#pragma once
inline void ICmdButton_::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  ICmdButton_::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline enum DUI_BUTTONSTATE  ICmdButton_::GetButtonState()
{
	enum DUI_BUTTONSTATE  _result;
	raw_GetButtonState(&_result);
	return _result;
}

inline void ICmdButton_::SetButtonState(enum DUI_BUTTONSTATE  eState  )
{

	raw_SetButtonState(eState  );
}

inline void ICmdButton_::SetGraphicshIcon(OLE_HANDLE  hIcon, short  nOffsetX, short  nOffsetY  )
{

	raw_SetGraphicshIcon(hIcon, nOffsetX, nOffsetY  );
}

inline OLE_HANDLE  ICmdButton_::GetGraphicshIcon()
{
	OLE_HANDLE  _result;
	raw_GetGraphicshIcon(&_result);
	return _result;
}

inline void ICmdButton_::SetUpDownMode(BOOL  bUpDownMode  )
{
	VARIANT_BOOL xxx_bUpDownMode = bUpDownMode ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUpDownMode(xxx_bUpDownMode  );
}

inline BOOL  ICmdButton_::IsUpDownMode()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsUpDownMode(&_result);
	return _result ? TRUE : FALSE;
}

inline void ICmdButton_::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  ICmdButton_::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void ICmdButton_::SetGraphicOffset(long  nOffsetX, long  nOffsetY  )
{

	raw_SetGraphicOffset(nOffsetX, nOffsetY  );
}

inline void ICmdButton_::GetGraphicOffset(long * pnOffsetX, long * pnOffsetY  )
{

	raw_GetGraphicOffset(pnOffsetX, pnOffsetY  );
}

inline void ICmdButton_::ShowText(BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ShowText(xxx_bShow  );
}

inline BOOL  ICmdButton_::IsShowText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowText(&_result);
	return _result ? TRUE : FALSE;
}

inline void ICmdButton_::SetBackImageSec(enum DUI_BUTTONSTATE  eState, struct IDUIImageBase * pImageBase  )
{

	raw_SetBackImageSec(eState, pImageBase  );
}

inline struct IDUIImageBase * ICmdButton_::GetBackImageSec(enum DUI_BUTTONSTATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetBackImageSec(eState, &_result);
	return _result;
}

inline void ICmdButton_::SetBackTextStyle(enum DUI_BUTTONSTATE  eState, struct IDUITextStyle * pTextStyle  )
{

	raw_SetBackTextStyle(eState, pTextStyle  );
}

inline struct IDUITextStyle * ICmdButton_::GetBackTextStyle(enum DUI_BUTTONSTATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetBackTextStyle(eState, &_result);
	return _result;
}

inline BOOL  ICmdButton_::SetGraphicsImage(enum DUI_BUTTONSTATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicsImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * ICmdButton_::GetGraphicsImage(enum DUI_BUTTONSTATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetGraphicsImage(eState, &_result);
	return _result;
}

inline short  ICmdButton_::GetTextLength()
{
	short  _result;
	raw_GetTextLength(&_result);
	return _result;
}

inline void ICmdButton_::SetActive(BOOL  bActive  )
{
	VARIANT_BOOL xxx_bActive = bActive ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetActive(xxx_bActive  );
}

inline BOOL  ICmdButton_::IsActive()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsActive(&_result);
	return _result ? TRUE : FALSE;
}

inline void ICmdButton_::SetGraphHBmpForState(OLE_HANDLE  hBitmap, enum DUI_BUTTONSTATE  duiBtnState, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphHBmpForState(hBitmap, duiBtnState, xxx_bRedraw  );
}

inline OLE_HANDLE  ICmdButton_::GetGraphicshBitmap(enum DUI_BUTTONSTATE  duiBtnState  )
{
	OLE_HANDLE  _result;
	raw_GetGraphicshBitmap(duiBtnState, &_result);
	return _result;
}

inline BOOL  ICmdButton_::SetBackhBitmap(enum DUI_BUTTONSTATE  eState, OLE_HANDLE  hBitmap  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackhBitmap(eState, hBitmap, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  ICmdButton_::GetBackhBitmap(enum DUI_BUTTONSTATE  eState  )
{
	OLE_HANDLE  _result;
	raw_GetBackhBitmap(eState, &_result);
	return _result;
}

inline void ICmdButton_::SetRenderImageAngle(float  angle  )
{

	raw_SetRenderImageAngle(angle  );
}

inline void ICmdButton_::SetRenderImageScale(float  scale  )
{

	raw_SetRenderImageScale(scale  );
}

inline void ICmdButton_::SetGraphicshBitmap(OLE_HANDLE  hBitmap, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphicshBitmap(hBitmap, xxx_bRedraw  );
}

inline void  ICmdButton::SetText(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetText(strText);
}

inline tstring  ICmdButton::GetText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->GetText();
}

inline enum DUI_BUTTONSTATE  ICmdButton::GetButtonState()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->GetButtonState();
}

inline void  ICmdButton::SetButtonState(enum DUI_BUTTONSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetButtonState(eState);
}

inline void  ICmdButton::SetGraphicshIcon(OLE_HANDLE  hIcon, short  nOffsetX, short  nOffsetY  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetGraphicshIcon(hIcon, nOffsetX, nOffsetY);
}

inline OLE_HANDLE  ICmdButton::GetGraphicshIcon()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->GetGraphicshIcon();
}

inline void  ICmdButton::SetUpDownMode(BOOL  bUpDownMode  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetUpDownMode(bUpDownMode);
}

inline BOOL  ICmdButton::IsUpDownMode()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->IsUpDownMode();
}

inline void  ICmdButton::SetTooltip(tstring  strTooltip  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetTooltip(strTooltip);
}

inline tstring  ICmdButton::GetTooltip()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->GetTooltip();
}

inline void  ICmdButton::SetGraphicOffset(long  nOffsetX, long  nOffsetY  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetGraphicOffset(nOffsetX, nOffsetY);
}

inline void  ICmdButton::GetGraphicOffset(long * pnOffsetX, long * pnOffsetY  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->GetGraphicOffset(pnOffsetX, pnOffsetY);
}

inline void  ICmdButton::ShowText(BOOL  bShow  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->ShowText(bShow);
}

inline BOOL  ICmdButton::IsShowText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->IsShowText();
}

inline void  ICmdButton::SetBackImageSec(enum DUI_BUTTONSTATE  eState, struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetBackImageSec(eState, pImageBase);
}

inline struct IDUIImageBase * ICmdButton::GetBackImageSec(enum DUI_BUTTONSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->GetBackImageSec(eState);
}

inline void  ICmdButton::SetBackTextStyle(enum DUI_BUTTONSTATE  eState, struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetBackTextStyle(eState, pTextStyle);
}

inline struct IDUITextStyle * ICmdButton::GetBackTextStyle(enum DUI_BUTTONSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->GetBackTextStyle(eState);
}

inline BOOL  ICmdButton::SetGraphicsImage(enum DUI_BUTTONSTATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetGraphicsImage(eState, pImageBase, bRedraw);
}

inline struct IDUIImageBase * ICmdButton::GetGraphicsImage(enum DUI_BUTTONSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->GetGraphicsImage(eState);
}

inline short  ICmdButton::GetTextLength()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->GetTextLength();
}

inline void  ICmdButton::SetActive(BOOL  bActive  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetActive(bActive);
}

inline BOOL  ICmdButton::IsActive()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->IsActive();
}

inline void  ICmdButton::SetGraphHBmpForState(OLE_HANDLE  hBitmap, enum DUI_BUTTONSTATE  duiBtnState, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetGraphHBmpForState(hBitmap, duiBtnState, bRedraw);
}

inline OLE_HANDLE  ICmdButton::GetGraphicshBitmap(enum DUI_BUTTONSTATE  duiBtnState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->GetGraphicshBitmap(duiBtnState);
}

inline BOOL  ICmdButton::SetBackhBitmap(enum DUI_BUTTONSTATE  eState, OLE_HANDLE  hBitmap  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetBackhBitmap(eState, hBitmap);
}

inline OLE_HANDLE  ICmdButton::GetBackhBitmap(enum DUI_BUTTONSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->GetBackhBitmap(eState);
}

inline void  ICmdButton::SetRenderImageAngle(float  angle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetRenderImageAngle(angle);
}

inline void  ICmdButton::SetRenderImageScale(float  scale  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetRenderImageScale(scale);
}

inline void  ICmdButton::SetGraphicshBitmap(OLE_HANDLE  hBitmap, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((ICmdButton_*)m_pCtrl)->SetGraphicshBitmap(hBitmap, bRedraw);
}

inline void IDUIAnimate_::SetFramesCount(long  nCount  )
{

	raw_SetFramesCount(nCount  );
}

inline long  IDUIAnimate_::GetFramesCount()
{
	long  _result;
	raw_GetFramesCount(&_result);
	return _result;
}

inline void IDUIAnimate_::SetSpeed(long  nSpeed  )
{

	raw_SetSpeed(nSpeed  );
}

inline long  IDUIAnimate_::GetSpeed()
{
	long  _result;
	raw_GetSpeed(&_result);
	return _result;
}

inline void IDUIAnimate_::StartAnimate()
{

	raw_StartAnimate();
}

inline void IDUIAnimate_::StopAnimate(short  nFrame  )
{

	raw_StopAnimate(nFrame  );
}

inline void IDUIAnimate_::SetAutoStart(BOOL  bAutoStop  )
{
	VARIANT_BOOL xxx_bAutoStop = bAutoStop ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoStart(xxx_bAutoStop  );
}

inline void IDUIAnimate_::SetAutoStop(BOOL  bAutoStop, short  nElapse  )
{
	VARIANT_BOOL xxx_bAutoStop = bAutoStop ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoStop(xxx_bAutoStop, nElapse  );
}

inline void IDUIAnimate_::SetImageFrames(struct IDUIImageBase * pImageBase, BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetImageFrames(pImageBase, xxx_bRefresh  );
}

inline void  IDUIAnimate::SetFramesCount(long  nCount  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIAnimate_*)m_pCtrl)->SetFramesCount(nCount);
}

inline long  IDUIAnimate::GetFramesCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIAnimate_*)m_pCtrl)->GetFramesCount();
}

inline void  IDUIAnimate::SetSpeed(long  nSpeed  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIAnimate_*)m_pCtrl)->SetSpeed(nSpeed);
}

inline long  IDUIAnimate::GetSpeed()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIAnimate_*)m_pCtrl)->GetSpeed();
}

inline void  IDUIAnimate::StartAnimate()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIAnimate_*)m_pCtrl)->StartAnimate();
}

inline void  IDUIAnimate::StopAnimate(short  nFrame  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIAnimate_*)m_pCtrl)->StopAnimate(nFrame);
}

inline void  IDUIAnimate::SetAutoStart(BOOL  bAutoStop  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIAnimate_*)m_pCtrl)->SetAutoStart(bAutoStop);
}

inline void  IDUIAnimate::SetAutoStop(BOOL  bAutoStop, short  nElapse  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIAnimate_*)m_pCtrl)->SetAutoStop(bAutoStop, nElapse);
}

inline void  IDUIAnimate::SetImageFrames(struct IDUIImageBase * pImageBase, BOOL  bRefresh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIAnimate_*)m_pCtrl)->SetImageFrames(pImageBase, bRefresh);
}

inline void IDUICheckBox_::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUICheckBox_::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline enum DUI_CHECKBOXSTATE  IDUICheckBox_::GetButtonState()
{
	enum DUI_CHECKBOXSTATE  _result;
	raw_GetButtonState(&_result);
	return _result;
}

inline void IDUICheckBox_::SetButtonState(enum DUI_CHECKBOXSTATE  eState  )
{

	raw_SetButtonState(eState  );
}

inline enum DUICHECKBOX_VALUE  IDUICheckBox_::GetValue()
{
	enum DUICHECKBOX_VALUE  _result;
	raw_GetValue(&_result);
	return _result;
}

inline void IDUICheckBox_::SetValue(enum DUICHECKBOX_VALUE  eValue  )
{

	raw_SetValue(eValue  );
}

inline void IDUICheckBox_::SetThreeState(BOOL  bThreeState  )
{
	VARIANT_BOOL xxx_bThreeState = bThreeState ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetThreeState(xxx_bThreeState  );
}

inline BOOL  IDUICheckBox_::GetThreeState()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetThreeState(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICheckBox_::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  IDUICheckBox_::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUICheckBox_::ShowText(BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ShowText(xxx_bShow  );
}

inline BOOL  IDUICheckBox_::IsShowText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowText(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICheckBox_::SetPushButtonLike(BOOL  bPushButtonLike  )
{
	VARIANT_BOOL xxx_bPushButtonLike = bPushButtonLike ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetPushButtonLike(xxx_bPushButtonLike  );
}

inline BOOL  IDUICheckBox_::IsPushButtonLike()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsPushButtonLike(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICheckBox_::SetActive(BOOL  bActive  )
{
	VARIANT_BOOL xxx_bActive = bActive ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetActive(xxx_bActive  );
}

inline BOOL  IDUICheckBox_::IsActive()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsActive(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICheckBox_::SetData(OLE_HANDLE  hData  )
{

	raw_SetData(hData  );
}

inline OLE_HANDLE  IDUICheckBox_::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline void IDUICheckBox_::SetGraphics(OLE_HANDLE  hIcon, BOOL  bIsIcon  )
{
	VARIANT_BOOL xxx_bIsIcon = bIsIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphics(hIcon, xxx_bIsIcon  );
}

inline void IDUICheckBox_::SetImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue, struct IDUIImageBase * pImageBase  )
{

	raw_SetImage(eState, eValue, pImageBase  );
}

inline struct IDUIImageBase * IDUICheckBox_::GetImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue  )
{
	struct IDUIImageBase * _result;
	raw_GetImage(eState, eValue, &_result);
	return _result;
}

inline BOOL  IDUICheckBox_::SetGraphicsImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicsImage(eState, eValue, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUICheckBox_::GetGraphicsImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue  )
{
	struct IDUIImageBase * _result;
	raw_GetGraphicsImage(eState, eValue, &_result);
	return _result;
}

inline void  IDUICheckBox::SetText(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->SetText(strText);
}

inline tstring  IDUICheckBox::GetText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->GetText();
}

inline enum DUI_CHECKBOXSTATE  IDUICheckBox::GetButtonState()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->GetButtonState();
}

inline void  IDUICheckBox::SetButtonState(enum DUI_CHECKBOXSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->SetButtonState(eState);
}

inline enum DUICHECKBOX_VALUE  IDUICheckBox::GetValue()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->GetValue();
}

inline void  IDUICheckBox::SetValue(enum DUICHECKBOX_VALUE  eValue  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->SetValue(eValue);
}

inline void  IDUICheckBox::SetThreeState(BOOL  bThreeState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->SetThreeState(bThreeState);
}

inline BOOL  IDUICheckBox::GetThreeState()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->GetThreeState();
}

inline void  IDUICheckBox::SetTooltip(tstring  strTooltip  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->SetTooltip(strTooltip);
}

inline tstring  IDUICheckBox::GetTooltip()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->GetTooltip();
}

inline void  IDUICheckBox::ShowText(BOOL  bShow  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->ShowText(bShow);
}

inline BOOL  IDUICheckBox::IsShowText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->IsShowText();
}

inline void  IDUICheckBox::SetPushButtonLike(BOOL  bPushButtonLike  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->SetPushButtonLike(bPushButtonLike);
}

inline BOOL  IDUICheckBox::IsPushButtonLike()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->IsPushButtonLike();
}

inline void  IDUICheckBox::SetActive(BOOL  bActive  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->SetActive(bActive);
}

inline BOOL  IDUICheckBox::IsActive()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->IsActive();
}

inline void  IDUICheckBox::SetData(OLE_HANDLE  hData  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->SetData(hData);
}

inline OLE_HANDLE  IDUICheckBox::GetData()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->GetData();
}

inline void  IDUICheckBox::SetGraphics(OLE_HANDLE  hIcon, BOOL  bIsIcon  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->SetGraphics(hIcon, bIsIcon);
}

inline void  IDUICheckBox::SetImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue, struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->SetImage(eState, eValue, pImageBase);
}

inline struct IDUIImageBase * IDUICheckBox::GetImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->GetImage(eState, eValue);
}

inline BOOL  IDUICheckBox::SetGraphicsImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->SetGraphicsImage(eState, eValue, pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUICheckBox::GetGraphicsImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICheckBox_*)m_pCtrl)->GetGraphicsImage(eState, eValue);
}

inline void IUIFormObj_::SetDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDrawColor(xxx_bDrawColor  );
}

inline BOOL  IUIFormObj_::GetDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline void IUIFormObj_::SetBackImageSec(struct IDUIImageBase * pImageBase  )
{

	raw_SetBackImageSec(pImageBase  );
}

inline struct IDUIImageBase * IUIFormObj_::GetBackImageSec()
{
	struct IDUIImageBase * _result;
	raw_GetBackImageSec(&_result);
	return _result;
}

inline void IUIFormObj_::SetBackColor(struct IFillColor * pFillColor  )
{

	raw_SetBackColor(pFillColor  );
}

inline struct IFillColor * IUIFormObj_::GetBackColor()
{
	struct IFillColor * _result;
	raw_GetBackColor(&_result);
	return _result;
}

inline void IUIFormObj_::SetShowBitmap(BOOL  bShowBitmap  )
{
	VARIANT_BOOL xxx_bShowBitmap = bShowBitmap ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowBitmap(xxx_bShowBitmap  );
}

inline BOOL  IUIFormObj_::IsShowBitmap()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowBitmap(&_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIRenderImage * IUIFormObj_::SetBackBitmap(OLE_HANDLE  hBitmap  )
{
	struct IDUIRenderImage * _result;
	raw_SetBackBitmap(hBitmap, &_result);
	return _result;
}

inline OLE_HANDLE  IUIFormObj_::GetBackBitmap()
{
	OLE_HANDLE  _result;
	raw_GetBackBitmap(&_result);
	return _result;
}

inline void IUIFormObj_::DeleteBackBitmap()
{

	raw_DeleteBackBitmap();
}

inline void  IUIFormObj::SetDrawColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IUIFormObj_*)m_pCtrl)->SetDrawColor(bDrawColor);
}

inline BOOL  IUIFormObj::GetDrawColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IUIFormObj_*)m_pCtrl)->GetDrawColor();
}

inline void  IUIFormObj::SetBackImageSec(struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IUIFormObj_*)m_pCtrl)->SetBackImageSec(pImageBase);
}

inline struct IDUIImageBase * IUIFormObj::GetBackImageSec()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IUIFormObj_*)m_pCtrl)->GetBackImageSec();
}

inline void  IUIFormObj::SetBackColor(struct IFillColor * pFillColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IUIFormObj_*)m_pCtrl)->SetBackColor(pFillColor);
}

inline struct IFillColor * IUIFormObj::GetBackColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IUIFormObj_*)m_pCtrl)->GetBackColor();
}

inline void  IUIFormObj::SetShowBitmap(BOOL  bShowBitmap  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IUIFormObj_*)m_pCtrl)->SetShowBitmap(bShowBitmap);
}

inline BOOL  IUIFormObj::IsShowBitmap()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IUIFormObj_*)m_pCtrl)->IsShowBitmap();
}

inline struct IDUIRenderImage * IUIFormObj::SetBackBitmap(OLE_HANDLE  hBitmap  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IUIFormObj_*)m_pCtrl)->SetBackBitmap(hBitmap);
}

inline OLE_HANDLE  IUIFormObj::GetBackBitmap()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IUIFormObj_*)m_pCtrl)->GetBackBitmap();
}

inline void  IUIFormObj::DeleteBackBitmap()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IUIFormObj_*)m_pCtrl)->DeleteBackBitmap();
}

inline void IRadioBox_::SetText(tstring  strText, BOOL  bRedraw  )
{
	_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetText(xxx_strText, xxx_bRedraw  );
}

inline tstring  IRadioBox_::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline enum DUI_RADIOBOXSTATE  IRadioBox_::GetButtonState()
{
	enum DUI_RADIOBOXSTATE  _result;
	raw_GetButtonState(&_result);
	return _result;
}

inline void IRadioBox_::SetButtonState(enum DUI_RADIOBOXSTATE  eState, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetButtonState(eState, xxx_bRedraw  );
}

inline void IRadioBox_::SetValue(enum DUIRADIOBOX_VALUE  eValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetValue(eValue, xxx_bRedraw  );
}

inline enum DUIRADIOBOX_VALUE  IRadioBox_::GetValue()
{
	enum DUIRADIOBOX_VALUE  _result;
	raw_GetValue(&_result);
	return _result;
}

inline void IRadioBox_::SetUpDownMode(BOOL  bUpDownMode, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bUpDownMode = bUpDownMode ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUpDownMode(xxx_bUpDownMode, xxx_bRedraw  );
}

inline BOOL  IRadioBox_::IsUpDownMode()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsUpDownMode(&_result);
	return _result ? TRUE : FALSE;
}

inline void IRadioBox_::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  IRadioBox_::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IRadioBox_::SetGraphicOffset(long  nOffsetX, long  nOffsetY, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphicOffset(nOffsetX, nOffsetY, xxx_bRedraw  );
}

inline void IRadioBox_::GetGraphicOffset(long * pnOffsetX, long * pnOffsetY  )
{

	raw_GetGraphicOffset(pnOffsetX, pnOffsetY  );
}

inline void IRadioBox_::ShowText(BOOL  bShow, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ShowText(xxx_bShow, xxx_bRedraw  );
}

inline BOOL  IRadioBox_::IsShowText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowText(&_result);
	return _result ? TRUE : FALSE;
}

inline void IRadioBox_::StartBlink(short  nIDEvent, short  nElapse  )
{

	raw_StartBlink(nIDEvent, nElapse  );
}

inline void IRadioBox_::StopBlink()
{

	raw_StopBlink();
}

inline BOOL  IRadioBox_::SetBackImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(eState, xxx_bChecked, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IRadioBox_::GetBackImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetBackImage(eState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IRadioBox_::SetBackColor(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, OLE_COLOR  clrBack  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(eState, xxx_bChecked, clrBack, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_COLOR  IRadioBox_::GetBackColor(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	OLE_COLOR  _result;
	raw_GetBackColor(eState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IRadioBox_::SetBoxImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBoxImage(eState, xxx_bChecked, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IRadioBox_::GetBoxImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetBoxImage(eState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IRadioBox_::SetGraphicsImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicsImage(eState, xxx_bChecked, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IRadioBox_::GetGraphicsImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetGraphicsImage(eState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IRadioBox_::SetGraphicsBmp(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, OLE_HANDLE  hBitmap  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicsBmp(eState, xxx_bChecked, hBitmap, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IRadioBox_::GetGraphicsBmp(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	OLE_HANDLE  _result;
	raw_GetGraphicsBmp(eState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IRadioBox_::SetTextStyle(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUITextStyle * pTextStyle  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextStyle(eState, xxx_bChecked, pTextStyle, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IRadioBox_::GetTextStyle(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUITextStyle * _result;
	raw_GetTextStyle(eState, xxx_bChecked, &_result);
	return _result;
}

inline void IRadioBox_::SetBackDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetBackDrawColor(xxx_bDrawColor  );
}

inline BOOL  IRadioBox_::GetBackDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetBackDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline void IRadioBox_::SetData(OLE_HANDLE  hData  )
{

	raw_SetData(hData  );
}

inline OLE_HANDLE  IRadioBox_::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline BOOL  IRadioBox_::SetGraphicSize(long  nWidth, long  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicSize(nWidth, nHeight, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IRadioBox_::GetGraphicSize(long * pnWidth, long * pnHeight  )
{

	raw_GetGraphicSize(pnWidth, pnHeight  );
}

inline BOOL  IRadioBox_::SetGroupID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGroupID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline void IRadioBox_::GetGroupID(long * plResult  )
{

	raw_GetGroupID(plResult  );
}

inline struct IDUIRadioGroup * IRadioBox_::GetGroup()
{
	struct IDUIRadioGroup * _result;
	raw_GetGroup(&_result);
	return _result;
}

inline void  IRadioBox::SetText(tstring  strText, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetText(strText, bRedraw);
}

inline tstring  IRadioBox::GetText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetText();
}

inline enum DUI_RADIOBOXSTATE  IRadioBox::GetButtonState()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetButtonState();
}

inline void  IRadioBox::SetButtonState(enum DUI_RADIOBOXSTATE  eState, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetButtonState(eState, bRedraw);
}

inline void  IRadioBox::SetValue(enum DUIRADIOBOX_VALUE  eValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetValue(eValue, bRedraw);
}

inline enum DUIRADIOBOX_VALUE  IRadioBox::GetValue()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetValue();
}

inline void  IRadioBox::SetUpDownMode(BOOL  bUpDownMode, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetUpDownMode(bUpDownMode, bRedraw);
}

inline BOOL  IRadioBox::IsUpDownMode()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->IsUpDownMode();
}

inline void  IRadioBox::SetTooltip(tstring  strTooltip  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetTooltip(strTooltip);
}

inline tstring  IRadioBox::GetTooltip()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetTooltip();
}

inline void  IRadioBox::SetGraphicOffset(long  nOffsetX, long  nOffsetY, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetGraphicOffset(nOffsetX, nOffsetY, bRedraw);
}

inline void  IRadioBox::GetGraphicOffset(long * pnOffsetX, long * pnOffsetY  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetGraphicOffset(pnOffsetX, pnOffsetY);
}

inline void  IRadioBox::ShowText(BOOL  bShow, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->ShowText(bShow, bRedraw);
}

inline BOOL  IRadioBox::IsShowText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->IsShowText();
}

inline void  IRadioBox::StartBlink(short  nIDEvent, short  nElapse  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->StartBlink(nIDEvent, nElapse);
}

inline void  IRadioBox::StopBlink()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->StopBlink();
}

inline BOOL  IRadioBox::SetBackImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetBackImage(eState, bChecked, pImageBase);
}

inline struct IDUIImageBase * IRadioBox::GetBackImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetBackImage(eState, bChecked);
}

inline BOOL  IRadioBox::SetBackColor(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, OLE_COLOR  clrBack  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetBackColor(eState, bChecked, clrBack);
}

inline OLE_COLOR  IRadioBox::GetBackColor(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetBackColor(eState, bChecked);
}

inline BOOL  IRadioBox::SetBoxImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetBoxImage(eState, bChecked, pImageBase);
}

inline struct IDUIImageBase * IRadioBox::GetBoxImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetBoxImage(eState, bChecked);
}

inline BOOL  IRadioBox::SetGraphicsImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetGraphicsImage(eState, bChecked, pImageBase);
}

inline struct IDUIImageBase * IRadioBox::GetGraphicsImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetGraphicsImage(eState, bChecked);
}

inline BOOL  IRadioBox::SetGraphicsBmp(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, OLE_HANDLE  hBitmap  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetGraphicsBmp(eState, bChecked, hBitmap);
}

inline OLE_HANDLE  IRadioBox::GetGraphicsBmp(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetGraphicsBmp(eState, bChecked);
}

inline BOOL  IRadioBox::SetTextStyle(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetTextStyle(eState, bChecked, pTextStyle);
}

inline struct IDUITextStyle * IRadioBox::GetTextStyle(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetTextStyle(eState, bChecked);
}

inline void  IRadioBox::SetBackDrawColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetBackDrawColor(bDrawColor);
}

inline BOOL  IRadioBox::GetBackDrawColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetBackDrawColor();
}

inline void  IRadioBox::SetData(OLE_HANDLE  hData  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetData(hData);
}

inline OLE_HANDLE  IRadioBox::GetData()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetData();
}

inline BOOL  IRadioBox::SetGraphicSize(long  nWidth, long  nHeight, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetGraphicSize(nWidth, nHeight, bRedraw);
}

inline void  IRadioBox::GetGraphicSize(long * pnWidth, long * pnHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetGraphicSize(pnWidth, pnHeight);
}

inline BOOL  IRadioBox::SetGroupID(long  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->SetGroupID(nID);
}

inline void  IRadioBox::GetGroupID(long * plResult  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetGroupID(plResult);
}

inline struct IDUIRadioGroup * IRadioBox::GetGroup()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IRadioBox_*)m_pCtrl)->GetGroup();
}

inline long  IDUIRadioGroup::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline void IDUIRadioGroup::AddObject(OLE_HANDLE  hData  )
{

	raw_AddObject(hData  );
}

inline void IDUIRadioGroup::RemoveObject(tstring  strName  )
{
	_bstr_t xxx_strName(strName.c_str());

	raw_RemoveObject(xxx_strName  );
}


 inline void IDUIRadioGroup::SetRadio(IDUIControlBase*  pCtrl  )
 {
 
   if(pCtrl == NULL)return;
 	raw_SetRadio(pCtrl->m_pDataBlock);
 }
 

 inline IDUIControlBase*  IDUIRadioGroup::GetRadio()
 {
 	OLE_HANDLE  _result;
 	raw_GetRadio(&_result);
 	return (IDUIControlBase*)GetCtrlBase((void*)_result);
 }
 
inline long  IDUIPopupSingleList_::AddItem(tstring  strName, tstring  strText, tstring  strShortcut, long  nImageIndex  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strShortcut(strShortcut.c_str());
	long  _result;
	raw_AddItem(xxx_strName, xxx_strText, xxx_strShortcut, nImageIndex, &_result);
	return _result;
}

inline long  IDUIPopupSingleList_::InsertItem(long  nIndex, tstring  strName, tstring  strText, tstring  strShortcut, long  nImageIndex  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strShortcut(strShortcut.c_str());
	long  _result;
	raw_InsertItem(nIndex, xxx_strName, xxx_strText, xxx_strShortcut, nImageIndex, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::GetItemText(long  nIndex, BSTR * pstrText, BSTR * pstrShortcut  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetItemText(nIndex, pstrText, pstrShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::GetItemIdByIndex(long  nIndex, BSTR * pstrText, BSTR * pstrShortcut  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetItemIdByIndex(nIndex, pstrText, pstrShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::GetItemIdByText(tstring  strText, BSTR * pstrText, BSTR * pstrShortcut  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetItemIdByText(xxx_strText, pstrText, pstrShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::SetItemText(long  nIndex, tstring  strText, tstring  strShortcut  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strShortcut(strShortcut.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemText(nIndex, xxx_strText, xxx_strShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::GetItemTextByName(tstring  strName, BSTR * pstrText, BSTR * pstrShortcut  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetItemTextByName(xxx_strName, pstrText, pstrShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::SetItemTextByName(tstring  strName, tstring  strText, tstring  strShortcut  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strShortcut(strShortcut.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTextByName(xxx_strName, xxx_strText, xxx_strShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIPopupSingleList_::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline struct PSLItem  IDUIPopupSingleList_::GetItem(long  nIndex  )
{
	struct PSLItem  _result;
	raw_GetItem(nIndex, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::SetItem(long  nIndex, struct PSLItem * pItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItem(nIndex, pItem, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIPopupSingleList_::GetCurrentItem()
{
	long  _result;
	raw_GetCurrentItem(&_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::SetCurrentItem(long  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetCurrentItem(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::SetItemData(long  nIndex, OLE_HANDLE  hData  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemData(nIndex, hData, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIPopupSingleList_::GetItemData(long  nIndex  )
{
	OLE_HANDLE  _result;
	raw_GetItemData(nIndex, &_result);
	return _result;
}

inline tstring  IDUIPopupSingleList_::GetItemName(long  nIndex  )
{
	BSTR _result = NULL;
	raw_GetItemName(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline long  IDUIPopupSingleList_::GetItemIndex(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	long  _result;
	raw_GetItemIndex(xxx_strName, &_result);
	return _result;
}

inline void IDUIPopupSingleList_::SetWinPos(short  x, short  y  )
{

	raw_SetWinPos(x, y  );
}

inline void IDUIPopupSingleList_::SetListWidth(short  nWidth  )
{

	raw_SetListWidth(nWidth  );
}

inline short  IDUIPopupSingleList_::GetListWidth()
{
	short  _result;
	raw_GetListWidth(&_result);
	return _result;
}

inline void IDUIPopupSingleList_::SetListHeight(short  nHeight  )
{

	raw_SetListHeight(nHeight  );
}

inline short  IDUIPopupSingleList_::GetListHeight()
{
	short  _result;
	raw_GetListHeight(&_result);
	return _result;
}

inline void IDUIPopupSingleList_::SetListMaxHeight(short  nMaxHeight  )
{

	raw_SetListMaxHeight(nMaxHeight  );
}

inline short  IDUIPopupSingleList_::GetListMaxHeight()
{
	short  _result;
	raw_GetListMaxHeight(&_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::RemoveItem(long  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItem(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::RemoveItemByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByName(xxx_strName, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::RemoveAll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveAll(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::Show(BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_Show(xxx_bShow, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIPopupSingleList_::GetHandle()
{
	OLE_HANDLE  _result;
	raw_GetHandle(&_result);
	return _result;
}

inline void IDUIPopupSingleList_::SetDrawItemColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDrawItemColor(xxx_bDrawColor  );
}

inline BOOL  IDUIPopupSingleList_::GetDrawItemColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawItemColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::SetItemBackImage(short  nState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemBackImage(nState, xxx_bChecked, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIPopupSingleList_::GetItemBackImage(short  nState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetItemBackImage(nState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::SetItemBackColor(short  nState, BOOL  bChecked, OLE_COLOR  clrItemBack  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemBackColor(nState, xxx_bChecked, clrItemBack, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_COLOR  IDUIPopupSingleList_::GetItemBackColor(short  nState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	OLE_COLOR  _result;
	raw_GetItemBackColor(nState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::SetItemGraphic(long  nIndex, short  nState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemGraphic(nIndex, nState, xxx_bChecked, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIPopupSingleList_::GetItemGraphic(long  nIndex, short  nState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetItemGraphic(nIndex, nState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::SetItemTextStyle(short  nState, BOOL  bChecked, struct IDUITextStyle * pTextStyle  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTextStyle(nState, xxx_bChecked, pTextStyle, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIPopupSingleList_::GetItemTextStyle(short  nState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUITextStyle * _result;
	raw_GetItemTextStyle(nState, xxx_bChecked, &_result);
	return _result;
}

inline void IDUIPopupSingleList_::SetDrawBackColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDrawBackColor(xxx_bDrawColor  );
}

inline BOOL  IDUIPopupSingleList_::GetDrawBackColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawBackColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::SetBackImage(struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIPopupSingleList_::GetBackImage()
{
	struct IDUIImageBase * _result;
	raw_GetBackImage(&_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::SetBackColor(struct IFillColor * pClrBack  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(pClrBack, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIPopupSingleList_::GetBackColor()
{
	struct IFillColor * _result;
	raw_GetBackColor(&_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::SetItemHeight(short  nHeight  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemHeight(nHeight, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIPopupSingleList_::GetItemHeight()
{
	short  _result;
	raw_GetItemHeight(&_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::SetGraphicIconHandle(OLE_HANDLE  hIcon, short  nOffsetX, short  nOffsetY, short  nCount, BOOL  bHorz  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicIconHandle(hIcon, nOffsetX, nOffsetY, nCount, xxx_bHorz, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupSingleList_::SetNcBorder(struct SkinRect * pRcBorder  )
{

	raw_SetNcBorder(pRcBorder  );
}

inline struct SkinRect  IDUIPopupSingleList_::GetNcBorder()
{
	struct SkinRect  _result;
	raw_GetNcBorder(&_result);
	return _result;
}

inline OLE_HANDLE  IDUIPopupSingleList_::Create(OLE_HANDLE  hParent, long  nStyle  )
{
	OLE_HANDLE  _result;
	raw_Create(hParent, nStyle, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::IsShow()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShow(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupSingleList_::DoMouseWheel(long  wParam, long  lParam  )
{

	raw_DoMouseWheel(wParam, lParam  );
}

inline void IDUIPopupSingleList_::SetAnimateType(enum DUI_PSLANIMATETYPE  eType  )
{

	raw_SetAnimateType(eType  );
}

inline enum DUI_PSLANIMATETYPE  IDUIPopupSingleList_::GetAnimateType()
{
	enum DUI_PSLANIMATETYPE  _result;
	raw_GetAnimateType(&_result);
	return _result;
}

inline void IDUIPopupSingleList_::SetAnimateSpeed(int  nSpeed  )
{

	raw_SetAnimateSpeed(nSpeed  );
}

inline int  IDUIPopupSingleList_::GetAnimateSpeed()
{
	int  _result;
	raw_GetAnimateSpeed(&_result);
	return _result;
}

inline void IDUIPopupSingleList_::AddOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	raw_AddOwnerCtrl(pOwnerCtrl  );
}

inline BOOL  IDUIPopupSingleList_::RemoveOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveOwnerCtrl(pOwnerCtrl, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIPopupSingleList_::GetOwnerCtrl(OLE_HANDLE ** pOwnerCtrl  )
{
	short  _result;
	raw_GetOwnerCtrl(pOwnerCtrl, &_result);
	return _result;
}

inline void IDUIPopupSingleList_::SetActiveOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	raw_SetActiveOwnerCtrl(pOwnerCtrl  );
}

inline OLE_HANDLE  IDUIPopupSingleList_::GetActiveOwnerCtrl()
{
	OLE_HANDLE  _result;
	raw_GetActiveOwnerCtrl(&_result);
	return _result;
}

inline struct PSLItem  IDUIPopupSingleList_::SelectNextItem(BOOL  bNext  )
{
	VARIANT_BOOL xxx_bNext = bNext ? VARIANT_TRUE : VARIANT_FALSE;
	struct PSLItem  _result;
	raw_SelectNextItem(xxx_bNext, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList_::SetItemIconByImgBase(long  nIndex, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemIconByImgBase(nIndex, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::SetItemIconByIcon(long  nIndex, OLE_HANDLE  hIcon  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemIconByIcon(nIndex, hIcon, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::SetItemImageIndex(long  nIndex, long  nImageIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemImageIndex(nIndex, nImageIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::SetImageList(OLE_HANDLE  hImageList  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetImageList(hImageList, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupSingleList_::SetIconSize(struct SkinSize * pSknsize  )
{

	raw_SetIconSize(pSknsize  );
}

inline struct SkinSize  IDUIPopupSingleList_::GetIconSize()
{
	struct SkinSize  _result;
	raw_GetIconSize(&_result);
	return _result;
}

inline void IDUIPopupSingleList_::SetShowIcon(BOOL  bShowIcon  )
{
	VARIANT_BOOL xxx_bShowIcon = bShowIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowIcon(xxx_bShowIcon  );
}

inline BOOL  IDUIPopupSingleList_::IsShowIcon()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowIcon(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupSingleList_::SetSupportPerPixel(BOOL  bSupportPerPixel  )
{
	VARIANT_BOOL xxx_bSupportPerPixel = bSupportPerPixel ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSupportPerPixel(xxx_bSupportPerPixel  );
}

inline BOOL  IDUIPopupSingleList_::IsSupportPerPixel()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsSupportPerPixel(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupSingleList_::SetIconOffset(short  nOffsetX, short  nOffsetY  )
{

	raw_SetIconOffset(nOffsetX, nOffsetY  );
}

inline void IDUIPopupSingleList_::GetIconOffset(short * pnOffsetX, short * pnOffsetY  )
{

	raw_GetIconOffset(pnOffsetX, pnOffsetY  );
}

inline void IDUIPopupSingleList_::Test(struct TestStruct * pTestStruct  )
{

	raw_Test(pTestStruct  );
}

inline struct TestStruct  IDUIPopupSingleList_::GetTest()
{
	struct TestStruct  _result;
	raw_GetTest(&_result);
	return _result;
}

inline enum DUI_RENDERENGINE_TYPE  IDUIPopupSingleList_::GetRenderType()
{
	enum DUI_RENDERENGINE_TYPE  _result;
	raw_GetRenderType(&_result);
	return _result;
}

inline void IDUIPopupSingleList_::SetRenderType(enum DUI_RENDERENGINE_TYPE  eRenderType  )
{

	raw_SetRenderType(eRenderType  );
}

inline void IDUIPopupSingleList_::RemoveAllItemByOwnerCtrl(OLE_HANDLE  pOwnerCtrl, VARIANT_BOOL * pbResult  )
{

	raw_RemoveAllItemByOwnerCtrl(pOwnerCtrl, pbResult  );
}

inline BOOL  IDUIPopupSingleList_::GetItemTooltip(long  nIndex, BSTR * pstrText, BSTR * pstrShortcut  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetItemTooltip(nIndex, pstrText, pstrShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList_::SetItemTooltip(long  nIndex, tstring  strText, tstring  strShortcut  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strShortcut(strShortcut.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTooltip(nIndex, xxx_strText, xxx_strShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIPopupSingleList_::GetItemCount2(OLE_HANDLE  pOwnerCtrl  )
{
	long  _result;
	raw_GetItemCount2(pOwnerCtrl, &_result);
	return _result;
}

inline void IDUIPopupSingleList_::SetVScrollMoveSpeed(long  nMoveSpeed  )
{

	raw_SetVScrollMoveSpeed(nMoveSpeed  );
}

inline long  IDUIPopupSingleList::AddItem(tstring  strName, tstring  strText, tstring  strShortcut, long  nImageIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->AddItem(strName, strText, strShortcut, nImageIndex);
}

inline long  IDUIPopupSingleList::InsertItem(long  nIndex, tstring  strName, tstring  strText, tstring  strShortcut, long  nImageIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->InsertItem(nIndex, strName, strText, strShortcut, nImageIndex);
}

inline BOOL  IDUIPopupSingleList::GetItemText(long  nIndex, BSTR * pstrText, BSTR * pstrShortcut  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemText(nIndex, pstrText, pstrShortcut);
}

inline BOOL  IDUIPopupSingleList::GetItemIdByIndex(long  nIndex, BSTR * pstrText, BSTR * pstrShortcut  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemIdByIndex(nIndex, pstrText, pstrShortcut);
}

inline BOOL  IDUIPopupSingleList::GetItemIdByText(tstring  strText, BSTR * pstrText, BSTR * pstrShortcut  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemIdByText(strText, pstrText, pstrShortcut);
}

inline BOOL  IDUIPopupSingleList::SetItemText(long  nIndex, tstring  strText, tstring  strShortcut  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemText(nIndex, strText, strShortcut);
}

inline BOOL  IDUIPopupSingleList::GetItemTextByName(tstring  strName, BSTR * pstrText, BSTR * pstrShortcut  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemTextByName(strName, pstrText, pstrShortcut);
}

inline BOOL  IDUIPopupSingleList::SetItemTextByName(tstring  strName, tstring  strText, tstring  strShortcut  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemTextByName(strName, strText, strShortcut);
}

inline long  IDUIPopupSingleList::GetItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemCount();
}

inline struct PSLItem  IDUIPopupSingleList::GetItem(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItem(nIndex);
}

inline BOOL  IDUIPopupSingleList::SetItem(long  nIndex, struct PSLItem * pItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItem(nIndex, pItem);
}

inline long  IDUIPopupSingleList::GetCurrentItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetCurrentItem();
}

inline BOOL  IDUIPopupSingleList::SetCurrentItem(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetCurrentItem(nIndex);
}

inline BOOL  IDUIPopupSingleList::SetItemData(long  nIndex, OLE_HANDLE  hData  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemData(nIndex, hData);
}

inline OLE_HANDLE  IDUIPopupSingleList::GetItemData(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemData(nIndex);
}

inline tstring  IDUIPopupSingleList::GetItemName(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemName(nIndex);
}

inline long  IDUIPopupSingleList::GetItemIndex(tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemIndex(strName);
}

inline void  IDUIPopupSingleList::SetWinPos(short  x, short  y  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetWinPos(x, y);
}

inline void  IDUIPopupSingleList::SetListWidth(short  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetListWidth(nWidth);
}

inline short  IDUIPopupSingleList::GetListWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetListWidth();
}

inline void  IDUIPopupSingleList::SetListHeight(short  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetListHeight(nHeight);
}

inline short  IDUIPopupSingleList::GetListHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetListHeight();
}

inline void  IDUIPopupSingleList::SetListMaxHeight(short  nMaxHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetListMaxHeight(nMaxHeight);
}

inline short  IDUIPopupSingleList::GetListMaxHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetListMaxHeight();
}

inline BOOL  IDUIPopupSingleList::RemoveItem(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->RemoveItem(nIndex);
}

inline BOOL  IDUIPopupSingleList::RemoveItemByName(tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->RemoveItemByName(strName);
}

inline BOOL  IDUIPopupSingleList::RemoveAll()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->RemoveAll();
}

inline BOOL  IDUIPopupSingleList::Show(BOOL  bShow  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->Show(bShow);
}

inline OLE_HANDLE  IDUIPopupSingleList::GetHandle()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetHandle();
}

inline void  IDUIPopupSingleList::SetDrawItemColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetDrawItemColor(bDrawColor);
}

inline BOOL  IDUIPopupSingleList::GetDrawItemColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetDrawItemColor();
}

inline BOOL  IDUIPopupSingleList::SetItemBackImage(short  nState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemBackImage(nState, bChecked, pImageBase);
}

inline struct IDUIImageBase * IDUIPopupSingleList::GetItemBackImage(short  nState, BOOL  bChecked  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemBackImage(nState, bChecked);
}

inline BOOL  IDUIPopupSingleList::SetItemBackColor(short  nState, BOOL  bChecked, OLE_COLOR  clrItemBack  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemBackColor(nState, bChecked, clrItemBack);
}

inline OLE_COLOR  IDUIPopupSingleList::GetItemBackColor(short  nState, BOOL  bChecked  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemBackColor(nState, bChecked);
}

inline BOOL  IDUIPopupSingleList::SetItemGraphic(long  nIndex, short  nState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemGraphic(nIndex, nState, bChecked, pImageBase);
}

inline struct IDUIImageBase * IDUIPopupSingleList::GetItemGraphic(long  nIndex, short  nState, BOOL  bChecked  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemGraphic(nIndex, nState, bChecked);
}

inline BOOL  IDUIPopupSingleList::SetItemTextStyle(short  nState, BOOL  bChecked, struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemTextStyle(nState, bChecked, pTextStyle);
}

inline struct IDUITextStyle * IDUIPopupSingleList::GetItemTextStyle(short  nState, BOOL  bChecked  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemTextStyle(nState, bChecked);
}

inline void  IDUIPopupSingleList::SetDrawBackColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetDrawBackColor(bDrawColor);
}

inline BOOL  IDUIPopupSingleList::GetDrawBackColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetDrawBackColor();
}

inline BOOL  IDUIPopupSingleList::SetBackImage(struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetBackImage(pImageBase);
}

inline struct IDUIImageBase * IDUIPopupSingleList::GetBackImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetBackImage();
}

inline BOOL  IDUIPopupSingleList::SetBackColor(struct IFillColor * pClrBack  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetBackColor(pClrBack);
}

inline struct IFillColor * IDUIPopupSingleList::GetBackColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetBackColor();
}

inline BOOL  IDUIPopupSingleList::SetItemHeight(short  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemHeight(nHeight);
}

inline short  IDUIPopupSingleList::GetItemHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemHeight();
}

inline BOOL  IDUIPopupSingleList::SetGraphicIconHandle(OLE_HANDLE  hIcon, short  nOffsetX, short  nOffsetY, short  nCount, BOOL  bHorz  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetGraphicIconHandle(hIcon, nOffsetX, nOffsetY, nCount, bHorz);
}

inline void  IDUIPopupSingleList::SetNcBorder(struct SkinRect * pRcBorder  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetNcBorder(pRcBorder);
}

inline struct SkinRect  IDUIPopupSingleList::GetNcBorder()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetNcBorder();
}

inline OLE_HANDLE  IDUIPopupSingleList::Create(OLE_HANDLE  hParent, long  nStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->Create(hParent, nStyle);
}

inline BOOL  IDUIPopupSingleList::IsShow()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->IsShow();
}

inline void  IDUIPopupSingleList::DoMouseWheel(long  wParam, long  lParam  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->DoMouseWheel(wParam, lParam);
}

inline void  IDUIPopupSingleList::SetAnimateType(enum DUI_PSLANIMATETYPE  eType  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetAnimateType(eType);
}

inline enum DUI_PSLANIMATETYPE  IDUIPopupSingleList::GetAnimateType()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetAnimateType();
}

inline void  IDUIPopupSingleList::SetAnimateSpeed(int  nSpeed  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetAnimateSpeed(nSpeed);
}

inline int  IDUIPopupSingleList::GetAnimateSpeed()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetAnimateSpeed();
}

inline void  IDUIPopupSingleList::AddOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->AddOwnerCtrl(pOwnerCtrl);
}

inline BOOL  IDUIPopupSingleList::RemoveOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->RemoveOwnerCtrl(pOwnerCtrl);
}

inline short  IDUIPopupSingleList::GetOwnerCtrl(OLE_HANDLE ** pOwnerCtrl  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetOwnerCtrl(pOwnerCtrl);
}

inline void  IDUIPopupSingleList::SetActiveOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetActiveOwnerCtrl(pOwnerCtrl);
}

inline OLE_HANDLE  IDUIPopupSingleList::GetActiveOwnerCtrl()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetActiveOwnerCtrl();
}

inline struct PSLItem  IDUIPopupSingleList::SelectNextItem(BOOL  bNext  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SelectNextItem(bNext);
}

inline BOOL  IDUIPopupSingleList::SetItemIconByImgBase(long  nIndex, struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemIconByImgBase(nIndex, pImageBase);
}

inline BOOL  IDUIPopupSingleList::SetItemIconByIcon(long  nIndex, OLE_HANDLE  hIcon  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemIconByIcon(nIndex, hIcon);
}

inline BOOL  IDUIPopupSingleList::SetItemImageIndex(long  nIndex, long  nImageIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemImageIndex(nIndex, nImageIndex);
}

inline BOOL  IDUIPopupSingleList::SetImageList(OLE_HANDLE  hImageList  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetImageList(hImageList);
}

inline void  IDUIPopupSingleList::SetIconSize(struct SkinSize * pSknsize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetIconSize(pSknsize);
}

inline struct SkinSize  IDUIPopupSingleList::GetIconSize()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetIconSize();
}

inline void  IDUIPopupSingleList::SetShowIcon(BOOL  bShowIcon  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetShowIcon(bShowIcon);
}

inline BOOL  IDUIPopupSingleList::IsShowIcon()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->IsShowIcon();
}

inline void  IDUIPopupSingleList::SetSupportPerPixel(BOOL  bSupportPerPixel  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetSupportPerPixel(bSupportPerPixel);
}

inline BOOL  IDUIPopupSingleList::IsSupportPerPixel()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->IsSupportPerPixel();
}

inline void  IDUIPopupSingleList::SetIconOffset(short  nOffsetX, short  nOffsetY  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetIconOffset(nOffsetX, nOffsetY);
}

inline void  IDUIPopupSingleList::GetIconOffset(short * pnOffsetX, short * pnOffsetY  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetIconOffset(pnOffsetX, pnOffsetY);
}

inline void  IDUIPopupSingleList::Test(struct TestStruct * pTestStruct  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->Test(pTestStruct);
}

inline struct TestStruct  IDUIPopupSingleList::GetTest()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetTest();
}

inline enum DUI_RENDERENGINE_TYPE  IDUIPopupSingleList::GetRenderType()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetRenderType();
}

inline void  IDUIPopupSingleList::SetRenderType(enum DUI_RENDERENGINE_TYPE  eRenderType  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetRenderType(eRenderType);
}

inline void  IDUIPopupSingleList::RemoveAllItemByOwnerCtrl(OLE_HANDLE  pOwnerCtrl, VARIANT_BOOL * pbResult  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->RemoveAllItemByOwnerCtrl(pOwnerCtrl, pbResult);
}

inline BOOL  IDUIPopupSingleList::GetItemTooltip(long  nIndex, BSTR * pstrText, BSTR * pstrShortcut  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemTooltip(nIndex, pstrText, pstrShortcut);
}

inline BOOL  IDUIPopupSingleList::SetItemTooltip(long  nIndex, tstring  strText, tstring  strShortcut  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetItemTooltip(nIndex, strText, strShortcut);
}

inline long  IDUIPopupSingleList::GetItemCount2(OLE_HANDLE  pOwnerCtrl  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->GetItemCount2(pOwnerCtrl);
}

inline void  IDUIPopupSingleList::SetVScrollMoveSpeed(long  nMoveSpeed  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupSingleList_*)m_pCtrl)->SetVScrollMoveSpeed(nMoveSpeed);
}

inline void IDUIEditCtrl_::SetPassword(BOOL  bPassword  )
{
	VARIANT_BOOL xxx_bPassword = bPassword ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetPassword(xxx_bPassword  );
}

inline BOOL  IDUIEditCtrl_::IsPassword()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsPassword(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl_::SetReadOnly(BOOL  bReadOnly  )
{
	VARIANT_BOOL xxx_bReadOnly = bReadOnly ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetReadOnly(xxx_bReadOnly  );
}

inline BOOL  IDUIEditCtrl_::IsReadOnly()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsReadOnly(&_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIEditCtrl_::GetTextLength()
{
	long  _result;
	raw_GetTextLength(&_result);
	return _result;
}

inline void IDUIEditCtrl_::Clear()
{

	raw_Clear();
}

inline void IDUIEditCtrl_::Copy()
{

	raw_Copy();
}

inline void IDUIEditCtrl_::Cut()
{

	raw_Cut();
}

inline void IDUIEditCtrl_::Paste()
{

	raw_Paste();
}

inline tstring  IDUIEditCtrl_::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIEditCtrl_::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline void IDUIEditCtrl_::GetSel(long * pStartPos, long * pEndPos  )
{

	raw_GetSel(pStartPos, pEndPos  );
}

inline void IDUIEditCtrl_::SetSel(long  StartPos, long  EndPos, BOOL  bNoScroll  )
{
	VARIANT_BOOL xxx_bNoScroll = bNoScroll ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSel(StartPos, EndPos, xxx_bNoScroll  );
}

inline void IDUIEditCtrl_::SetTextLimit(long  TextLimit  )
{

	raw_SetTextLimit(TextLimit  );
}

inline void IDUIEditCtrl_::SetEditFocus()
{

	raw_SetEditFocus();
}

inline void IDUIEditCtrl_::KillEditFocus()
{

	raw_KillEditFocus();
}

inline void IDUIEditCtrl_::SetDefaultText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetDefaultText(xxx_strText  );
}

inline void IDUIEditCtrl_::GetHotKey(long * pHotKey  )
{

	raw_GetHotKey(pHotKey  );
}

inline void IDUIEditCtrl_::SetHotKey(short  VirtualKeyCode, short  Modifiers  )
{

	raw_SetHotKey(VirtualKeyCode, Modifiers  );
}

inline void IDUIEditCtrl_::SetNumberOnly(BOOL  bNumberOnly  )
{
	VARIANT_BOOL xxx_bNumberOnly = bNumberOnly ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetNumberOnly(xxx_bNumberOnly  );
}

inline BOOL  IDUIEditCtrl_::IsActive()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsActive(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl_::SetTextFilterFun(OLE_HANDLE  lpCmdFun  )
{

	raw_SetTextFilterFun(lpCmdFun  );
}

inline enum DUI_EDIT_RENDER_HINT  IDUIEditCtrl_::GetTextRenderHint()
{
	enum DUI_EDIT_RENDER_HINT  _result;
	raw_GetTextRenderHint(&_result);
	return _result;
}

inline void IDUIEditCtrl_::SetTextRenderHint(enum DUI_EDIT_RENDER_HINT  eRenderHint  )
{

	raw_SetTextRenderHint(eRenderHint  );
}

inline void IDUIEditCtrl_::SetTextEvent(tstring  strText, BOOL  bEvent  )
{
	_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bEvent = bEvent ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetTextEvent(xxx_strText, xxx_bEvent  );
}

inline void IDUIEditCtrl_::SetHotKeyDefaultText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetHotKeyDefaultText(xxx_strText  );
}

inline tstring  IDUIEditCtrl_::GetHotKeyDefaultText()
{
	BSTR _result = NULL;
	raw_GetHotKeyDefaultText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIEditCtrl_::SetEnableCopy(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnableCopy(xxx_bEnable  );
}

inline void IDUIEditCtrl_::SetEnablePaste(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnablePaste(xxx_bEnable  );
}

inline void IDUIEditCtrl_::SetEnableCut(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnableCut(xxx_bEnable  );
}

inline BOOL  IDUIEditCtrl_::GetEnableCopy()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnableCopy(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIEditCtrl_::GetEnablePaste()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnablePaste(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIEditCtrl_::GetEnableCut()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnableCut(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl_::EnableEditMenu(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableEditMenu(xxx_bEnable  );
}

inline BOOL  IDUIEditCtrl_::GetEnableEditMenu()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnableEditMenu(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl_::SetEnableDelete(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnableDelete(xxx_bEnable  );
}

inline BOOL  IDUIEditCtrl_::GetEnableDelete()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnableDelete(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl_::SetTextStyle(struct IDUITextStyle * pTextStyle, enum DUI_EDIT_STATE  eState  )
{

	raw_SetTextStyle(pTextStyle, eState  );
}

inline void IDUIEditCtrl_::SetMenuText(enum DUI_EDIT_MENU_TEXT  eType, tstring  str  )
{
	_bstr_t xxx_str(str.c_str());

	raw_SetMenuText(eType, xxx_str  );
}

inline void IDUIEditCtrl_::SetEnableUndo(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnableUndo(xxx_bEnable  );
}

inline BOOL  IDUIEditCtrl_::GetEnableUndo()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnableUndo(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl_::SetHighLightText(tstring  strSub, struct IDUITextStyle * pNewStyle  )
{
	_bstr_t xxx_strSub(strSub.c_str());

	raw_SetHighLightText(xxx_strSub, pNewStyle  );
}

inline void IDUIEditCtrl_::SetBackImageSec(enum DUI_EDIT_STATE  eState, struct IDUIImageBase * pNewStyle  )
{

	raw_SetBackImageSec(eState, pNewStyle  );
}

inline void IDUIEditCtrl_::SetBackColor(enum DUI_EDIT_STATE  eState, struct IFillColor * pNewStyle  )
{

	raw_SetBackColor(eState, pNewStyle  );
}

inline void IDUIEditCtrl_::SetEditEnablePaste(BOOL  bPaste  )
{
	VARIANT_BOOL xxx_bPaste = bPaste ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEditEnablePaste(xxx_bPaste  );
}

inline void IDUIEditCtrl_::IsPopMenu(BOOL  bIsPopMenu  )
{
	VARIANT_BOOL xxx_bIsPopMenu = bIsPopMenu ? VARIANT_TRUE : VARIANT_FALSE;

	raw_IsPopMenu(xxx_bIsPopMenu  );
}

inline void IDUIEditCtrl_::SetEditDisable(BOOL  bDisable  )
{
	VARIANT_BOOL xxx_bDisable = bDisable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEditDisable(xxx_bDisable  );
}

inline void IDUIEditCtrl_::ReSetScrollToTop()
{

	raw_ReSetScrollToTop();
}

inline void IDUIEditCtrl_::SetSelectColor(OLE_COLOR  ClrSelect  )
{

	raw_SetSelectColor(ClrSelect  );
}

inline OLE_COLOR  IDUIEditCtrl_::GetSelectColor()
{
	OLE_COLOR  _result;
	raw_GetSelectColor(&_result);
	return _result;
}

inline void IDUIEditCtrl_::SetOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	raw_SetOwnerCtrl(pOwnerCtrl  );
}

inline void IDUIEditCtrl_::SetNcBorder(struct SkinRect * m_rcNCBorder  )
{

	raw_SetNcBorder(m_rcNCBorder  );
}

inline void IDUIEditCtrl_::SetNoNegative(BOOL  bl  )
{
	VARIANT_BOOL xxx_bl = bl ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetNoNegative(xxx_bl  );
}

inline void  IDUIEditCtrl::SetPassword(BOOL  bPassword  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetPassword(bPassword);
}

inline BOOL  IDUIEditCtrl::IsPassword()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->IsPassword();
}

inline void  IDUIEditCtrl::SetReadOnly(BOOL  bReadOnly  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetReadOnly(bReadOnly);
}

inline BOOL  IDUIEditCtrl::IsReadOnly()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->IsReadOnly();
}

inline long  IDUIEditCtrl::GetTextLength()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetTextLength();
}

inline void  IDUIEditCtrl::Clear()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->Clear();
}

inline void  IDUIEditCtrl::Copy()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->Copy();
}

inline void  IDUIEditCtrl::Cut()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->Cut();
}

inline void  IDUIEditCtrl::Paste()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->Paste();
}

inline tstring  IDUIEditCtrl::GetText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetText();
}

inline void  IDUIEditCtrl::SetText(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetText(strText);
}

inline void  IDUIEditCtrl::GetSel(long * pStartPos, long * pEndPos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetSel(pStartPos, pEndPos);
}

inline void  IDUIEditCtrl::SetSel(long  StartPos, long  EndPos, BOOL  bNoScroll  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetSel(StartPos, EndPos, bNoScroll);
}

inline void  IDUIEditCtrl::SetTextLimit(long  TextLimit  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetTextLimit(TextLimit);
}

inline void  IDUIEditCtrl::SetEditFocus()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetEditFocus();
}

inline void  IDUIEditCtrl::KillEditFocus()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->KillEditFocus();
}

inline void  IDUIEditCtrl::SetDefaultText(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetDefaultText(strText);
}

inline void  IDUIEditCtrl::GetHotKey(long * pHotKey  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetHotKey(pHotKey);
}

inline void  IDUIEditCtrl::SetHotKey(short  VirtualKeyCode, short  Modifiers  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetHotKey(VirtualKeyCode, Modifiers);
}

inline void  IDUIEditCtrl::SetNumberOnly(BOOL  bNumberOnly  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetNumberOnly(bNumberOnly);
}

inline BOOL  IDUIEditCtrl::IsActive()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->IsActive();
}

inline void  IDUIEditCtrl::SetTextFilterFun(OLE_HANDLE  lpCmdFun  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetTextFilterFun(lpCmdFun);
}

inline enum DUI_EDIT_RENDER_HINT  IDUIEditCtrl::GetTextRenderHint()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetTextRenderHint();
}

inline void  IDUIEditCtrl::SetTextRenderHint(enum DUI_EDIT_RENDER_HINT  eRenderHint  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetTextRenderHint(eRenderHint);
}

inline void  IDUIEditCtrl::SetTextEvent(tstring  strText, BOOL  bEvent  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetTextEvent(strText, bEvent);
}

inline void  IDUIEditCtrl::SetHotKeyDefaultText(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetHotKeyDefaultText(strText);
}

inline tstring  IDUIEditCtrl::GetHotKeyDefaultText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetHotKeyDefaultText();
}

inline void  IDUIEditCtrl::SetEnableCopy(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetEnableCopy(bEnable);
}

inline void  IDUIEditCtrl::SetEnablePaste(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetEnablePaste(bEnable);
}

inline void  IDUIEditCtrl::SetEnableCut(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetEnableCut(bEnable);
}

inline BOOL  IDUIEditCtrl::GetEnableCopy()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetEnableCopy();
}

inline BOOL  IDUIEditCtrl::GetEnablePaste()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetEnablePaste();
}

inline BOOL  IDUIEditCtrl::GetEnableCut()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetEnableCut();
}

inline void  IDUIEditCtrl::EnableEditMenu(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->EnableEditMenu(bEnable);
}

inline BOOL  IDUIEditCtrl::GetEnableEditMenu()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetEnableEditMenu();
}

inline void  IDUIEditCtrl::SetEnableDelete(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetEnableDelete(bEnable);
}

inline BOOL  IDUIEditCtrl::GetEnableDelete()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetEnableDelete();
}

inline void  IDUIEditCtrl::SetTextStyle(struct IDUITextStyle * pTextStyle, enum DUI_EDIT_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetTextStyle(pTextStyle, eState);
}

inline void  IDUIEditCtrl::SetMenuText(enum DUI_EDIT_MENU_TEXT  eType, tstring  str  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetMenuText(eType, str);
}

inline void  IDUIEditCtrl::SetEnableUndo(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetEnableUndo(bEnable);
}

inline BOOL  IDUIEditCtrl::GetEnableUndo()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetEnableUndo();
}

inline void  IDUIEditCtrl::SetHighLightText(tstring  strSub, struct IDUITextStyle * pNewStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetHighLightText(strSub, pNewStyle);
}

inline void  IDUIEditCtrl::SetBackImageSec(enum DUI_EDIT_STATE  eState, struct IDUIImageBase * pNewStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetBackImageSec(eState, pNewStyle);
}

inline void  IDUIEditCtrl::SetBackColor(enum DUI_EDIT_STATE  eState, struct IFillColor * pNewStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetBackColor(eState, pNewStyle);
}

inline void  IDUIEditCtrl::SetEditEnablePaste(BOOL  bPaste  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetEditEnablePaste(bPaste);
}

inline void  IDUIEditCtrl::IsPopMenu(BOOL  bIsPopMenu  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->IsPopMenu(bIsPopMenu);
}

inline void  IDUIEditCtrl::SetEditDisable(BOOL  bDisable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetEditDisable(bDisable);
}

inline void  IDUIEditCtrl::ReSetScrollToTop()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->ReSetScrollToTop();
}

inline void  IDUIEditCtrl::SetSelectColor(OLE_COLOR  ClrSelect  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetSelectColor(ClrSelect);
}

inline OLE_COLOR  IDUIEditCtrl::GetSelectColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->GetSelectColor();
}

inline void  IDUIEditCtrl::SetOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetOwnerCtrl(pOwnerCtrl);
}

inline void  IDUIEditCtrl::SetNcBorder(struct SkinRect * m_rcNCBorder  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetNcBorder(m_rcNCBorder);
}

inline void  IDUIEditCtrl::SetNoNegative(BOOL  bl  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIEditCtrl_*)m_pCtrl)->SetNoNegative(bl);
}

inline BOOL  IDUIHeaderCtrl_::SetDrawBackColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawBackColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHeaderCtrl_::GetDrawBackColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawBackColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHeaderCtrl_::SetBackImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIHeaderCtrl_::GetBackImage()
{
	struct IDUIImageBase * _result;
	raw_GetBackImage(&_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl_::SetBackColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIHeaderCtrl_::GetBackColor(struct IFillColor ** ppFillColor  )
{

	raw_GetBackColor(ppFillColor  );
}

inline BOOL  IDUIHeaderCtrl_::SetItemImage(enum DUIHADER_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIHeaderCtrl_::GetItemImage(enum DUIHADER_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetItemImage(eState, &_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl_::SetItemColor(enum DUIHADER_STATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemColor(eState, pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIHeaderCtrl_::GetItemColor(enum DUIHADER_STATE  eState  )
{
	struct IFillColor * _result;
	raw_GetItemColor(eState, &_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl_::SetItemTextStyle(enum DUIHADER_STATE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTextStyle(eState, pTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIHeaderCtrl_::GetItemTextStyle(enum DUIHADER_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetItemTextStyle(eState, &_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl_::SetSupportDrag(BOOL  bCanDrag  )
{
	VARIANT_BOOL xxx_bCanDrag = bCanDrag ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSupportDrag(xxx_bCanDrag, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHeaderCtrl_::GetIsCanDrag()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsCanDrag(&_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIHeaderCtrl_::InsertItem(short  nPos, tstring  strText, short  nWidth  )
{
_bstr_t xxx_strText(strText.c_str());
	short  _result;
	raw_InsertItem(nPos, xxx_strText, nWidth, &_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl_::DeleteItem(short  nPos  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteItem(nPos, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIHeaderCtrl_::GetItemCount()
{
	short  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline void IDUIHeaderCtrl_::SetOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	raw_SetOwnerCtrl(pOwnerCtrl  );
}

inline OLE_HANDLE  IDUIHeaderCtrl_::GetOwnerCtrl()
{
	OLE_HANDLE  _result;
	raw_GetOwnerCtrl(&_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl_::SetDrawItemColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawItemColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHeaderCtrl_::GetDrawItemColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawItemColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHeaderCtrl_::SetDividerColor(OLE_COLOR  clrDivider  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDividerColor(clrDivider, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_COLOR  IDUIHeaderCtrl_::GetDividerColor()
{
	OLE_COLOR  _result;
	raw_GetDividerColor(&_result);
	return _result;
}

inline void IDUIHeaderCtrl_::SetScrollPos(long  nPos, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetScrollPos(nPos, xxx_bRedraw  );
}

inline long  IDUIHeaderCtrl_::GetScrollPos()
{
	long  _result;
	raw_GetScrollPos(&_result);
	return _result;
}

inline void IDUIHeaderCtrl_::SetShowSortIcon(BOOL  bShowSortIcon  )
{
	VARIANT_BOOL xxx_bShowSortIcon = bShowSortIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowSortIcon(xxx_bShowSortIcon  );
}

inline BOOL  IDUIHeaderCtrl_::GetShowSortIcon()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetShowSortIcon(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIHeaderCtrl_::SetItemSort(short  nIndex, enum DUI_HEADERCTRL_SORT  eSortType, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemSort(nIndex, eSortType, xxx_bRedraw  );
}

inline void IDUIHeaderCtrl_::GetCurSortItem(short * pnResult, enum DUI_HEADERCTRL_SORT * peResult  )
{

	raw_GetCurSortItem(pnResult, peResult  );
}

inline void IDUIHeaderCtrl_::SetItemWidth(short  nIndex, short  nWidth, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemWidth(nIndex, nWidth, xxx_bRedraw  );
}

inline enum DUICHECKBOX_VALUE  IDUIHeaderCtrl_::GetItemCheckState(short  nIndex  )
{
	enum DUICHECKBOX_VALUE  _result;
	raw_GetItemCheckState(nIndex, &_result);
	return _result;
}

inline void IDUIHeaderCtrl_::SetItemCheckState(short  nIndex, enum DUICHECKBOX_VALUE  eState  )
{

	raw_SetItemCheckState(nIndex, eState  );
}

inline void IDUIHeaderCtrl_::ShowItemCheckBox(short  nIndex, BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ShowItemCheckBox(nIndex, xxx_bShow  );
}

inline void IDUIHeaderCtrl_::DragDrogItem(short  nDradForm, short  nDrawTo  )
{

	raw_DragDrogItem(nDradForm, nDrawTo  );
}

inline void IDUIHeaderCtrl_::SetTextAlignType(short  nIndex, enum DUI_HEADERCTRL_ALIGNTYPE  eType  )
{

	raw_SetTextAlignType(nIndex, eType  );
}

inline void IDUIHeaderCtrl_::SetHeadCheckValue(long  eCheck, short  nIndex  )
{

	raw_SetHeadCheckValue(eCheck, nIndex  );
}

inline void IDUIHeaderCtrl_::SetColumnTextByIndex(long  nIndex, tstring  strColItem  )
{
	_bstr_t xxx_strColItem(strColItem.c_str());

	raw_SetColumnTextByIndex(nIndex, xxx_strColItem  );
}

inline tstring  IDUIHeaderCtrl_::GetColumnTextByIndex(long  nIndex  )
{
	BSTR _result = NULL;
	raw_GetColumnTextByIndex(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIHeaderCtrl_::DeleteAllItem()
{

	raw_DeleteAllItem();
}

inline BOOL  IDUIHeaderCtrl_::SetVisibleColumn(short  nCol, BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetVisibleColumn(nCol, xxx_bVisible, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHeaderCtrl::SetDrawBackColor(BOOL  bDrawColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetDrawBackColor(bDrawColor, bRedraw);
}

inline BOOL  IDUIHeaderCtrl::GetDrawBackColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetDrawBackColor();
}

inline BOOL  IDUIHeaderCtrl::SetBackImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetBackImage(pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUIHeaderCtrl::GetBackImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetBackImage();
}

inline BOOL  IDUIHeaderCtrl::SetBackColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetBackColor(pFillColor, bRedraw);
}

inline void  IDUIHeaderCtrl::GetBackColor(struct IFillColor ** ppFillColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetBackColor(ppFillColor);
}

inline BOOL  IDUIHeaderCtrl::SetItemImage(enum DUIHADER_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetItemImage(eState, pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUIHeaderCtrl::GetItemImage(enum DUIHADER_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetItemImage(eState);
}

inline BOOL  IDUIHeaderCtrl::SetItemColor(enum DUIHADER_STATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetItemColor(eState, pFillColor, bRedraw);
}

inline struct IFillColor * IDUIHeaderCtrl::GetItemColor(enum DUIHADER_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetItemColor(eState);
}

inline BOOL  IDUIHeaderCtrl::SetItemTextStyle(enum DUIHADER_STATE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetItemTextStyle(eState, pTextStyle, bRedraw);
}

inline struct IDUITextStyle * IDUIHeaderCtrl::GetItemTextStyle(enum DUIHADER_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetItemTextStyle(eState);
}

inline BOOL  IDUIHeaderCtrl::SetSupportDrag(BOOL  bCanDrag  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetSupportDrag(bCanDrag);
}

inline BOOL  IDUIHeaderCtrl::GetIsCanDrag()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetIsCanDrag();
}

inline short  IDUIHeaderCtrl::InsertItem(short  nPos, tstring  strText, short  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->InsertItem(nPos, strText, nWidth);
}

inline BOOL  IDUIHeaderCtrl::DeleteItem(short  nPos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->DeleteItem(nPos);
}

inline short  IDUIHeaderCtrl::GetItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetItemCount();
}

inline void  IDUIHeaderCtrl::SetOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetOwnerCtrl(pOwnerCtrl);
}

inline OLE_HANDLE  IDUIHeaderCtrl::GetOwnerCtrl()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetOwnerCtrl();
}

inline BOOL  IDUIHeaderCtrl::SetDrawItemColor(BOOL  bDrawColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetDrawItemColor(bDrawColor, bRedraw);
}

inline BOOL  IDUIHeaderCtrl::GetDrawItemColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetDrawItemColor();
}

inline BOOL  IDUIHeaderCtrl::SetDividerColor(OLE_COLOR  clrDivider  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetDividerColor(clrDivider);
}

inline OLE_COLOR  IDUIHeaderCtrl::GetDividerColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetDividerColor();
}

inline void  IDUIHeaderCtrl::SetScrollPos(long  nPos, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetScrollPos(nPos, bRedraw);
}

inline long  IDUIHeaderCtrl::GetScrollPos()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetScrollPos();
}

inline void  IDUIHeaderCtrl::SetShowSortIcon(BOOL  bShowSortIcon  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetShowSortIcon(bShowSortIcon);
}

inline BOOL  IDUIHeaderCtrl::GetShowSortIcon()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetShowSortIcon();
}

inline void  IDUIHeaderCtrl::SetItemSort(short  nIndex, enum DUI_HEADERCTRL_SORT  eSortType, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetItemSort(nIndex, eSortType, bRedraw);
}

inline void  IDUIHeaderCtrl::GetCurSortItem(short * pnResult, enum DUI_HEADERCTRL_SORT * peResult  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetCurSortItem(pnResult, peResult);
}

inline void  IDUIHeaderCtrl::SetItemWidth(short  nIndex, short  nWidth, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetItemWidth(nIndex, nWidth, bRedraw);
}

inline enum DUICHECKBOX_VALUE  IDUIHeaderCtrl::GetItemCheckState(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetItemCheckState(nIndex);
}

inline void  IDUIHeaderCtrl::SetItemCheckState(short  nIndex, enum DUICHECKBOX_VALUE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetItemCheckState(nIndex, eState);
}

inline void  IDUIHeaderCtrl::ShowItemCheckBox(short  nIndex, BOOL  bShow  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->ShowItemCheckBox(nIndex, bShow);
}

inline void  IDUIHeaderCtrl::DragDrogItem(short  nDradForm, short  nDrawTo  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->DragDrogItem(nDradForm, nDrawTo);
}

inline void  IDUIHeaderCtrl::SetTextAlignType(short  nIndex, enum DUI_HEADERCTRL_ALIGNTYPE  eType  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetTextAlignType(nIndex, eType);
}

inline void  IDUIHeaderCtrl::SetHeadCheckValue(long  eCheck, short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetHeadCheckValue(eCheck, nIndex);
}

inline void  IDUIHeaderCtrl::SetColumnTextByIndex(long  nIndex, tstring  strColItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetColumnTextByIndex(nIndex, strColItem);
}

inline tstring  IDUIHeaderCtrl::GetColumnTextByIndex(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->GetColumnTextByIndex(nIndex);
}

inline void  IDUIHeaderCtrl::DeleteAllItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->DeleteAllItem();
}

inline BOOL  IDUIHeaderCtrl::SetVisibleColumn(short  nCol, BOOL  bVisible  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHeaderCtrl_*)m_pCtrl)->SetVisibleColumn(nCol, bVisible);
}

inline void IDUIListView_::SetListType(enum DUILV_STYLE  eListType, BOOL  bRedraw, VARIANT_BOOL * pbResult  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetListType(eListType, xxx_bRedraw, pbResult  );
}

inline enum DUILV_STYLE  IDUIListView_::GetListType()
{
	enum DUILV_STYLE  _result;
	raw_GetListType(&_result);
	return _result;
}

inline BOOL  IDUIListView_::SetDrawBackColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawBackColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::IsDrawBackColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawBackColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::SetBackImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIListView_::GetBackImage()
{
	struct IDUIImageBase * _result;
	raw_GetBackImage(&_result);
	return _result;
}

inline BOOL  IDUIListView_::SetBackColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIListView_::GetBackColor()
{
	struct IFillColor * _result;
	raw_GetBackColor(&_result);
	return _result;
}

inline BOOL  IDUIListView_::SetDrawItemColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawItemColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::IsDrawItemColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawItemColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::SetItemHeight(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemHeight(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIListView_::GetItemHeight()
{
	short  _result;
	raw_GetItemHeight(&_result);
	return _result;
}

inline BOOL  IDUIListView_::SetItemWidth(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemWidth(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIListView_::GetItemWidth()
{
	short  _result;
	raw_GetItemWidth(&_result);
	return _result;
}

inline BOOL  IDUIListView_::SetItemDefImage(enum DUILVI_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemDefImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIListView_::GetItemDefImage(enum DUILVI_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetItemDefImage(eState, &_result);
	return _result;
}

inline BOOL  IDUIListView_::SetItemDefColor(enum DUILVI_STATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemDefColor(eState, pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIListView_::GetItemDefColor(enum DUILVI_STATE  eState  )
{
	struct IFillColor * _result;
	raw_GetItemDefColor(eState, &_result);
	return _result;
}

inline BOOL  IDUIListView_::SetTextStyle(enum DUILVI_STATE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextStyle(eState, pTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIListView_::GetTextStyle(enum DUILVI_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetTextStyle(eState, &_result);
	return _result;
}

inline BOOL  IDUIListView_::SetItemSpace(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemSpace(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIListView_::GetItemSpace()
{
	short  _result;
	raw_GetItemSpace(&_result);
	return _result;
}

inline void IDUIListView_::SetScrollSize(long  nSize  )
{

	raw_SetScrollSize(nSize  );
}

inline long  IDUIListView_::GetScrollSize()
{
	long  _result;
	raw_GetScrollSize(&_result);
	return _result;
}

inline void IDUIListView_::SetLeftScroll(BOOL  bLeftScroll  )
{
	VARIANT_BOOL xxx_bLeftScroll = bLeftScroll ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetLeftScroll(xxx_bLeftScroll  );
}

inline BOOL  IDUIListView_::IsLeftScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsLeftScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIListView_::InsertItem(long  nItem, tstring  szItem, long  nID, BOOL  bRefresh  )
{
_bstr_t xxx_szItem(szItem.c_str());
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;
	short  _result;
	raw_InsertItem(nItem, xxx_szItem, nID, xxx_bRefresh, &_result);
	return _result;
}

inline OLE_HANDLE  IDUIListView_::GetObject(tstring  strParent, tstring  strName  )
{
_bstr_t xxx_strParent(strParent.c_str());
_bstr_t xxx_strName(strName.c_str());
	OLE_HANDLE  _result;
	raw_GetObject(xxx_strParent, xxx_strName, &_result);
	return _result;
}

inline void IDUIListView_::SetListModel(OLE_HANDLE  pUIForm  )
{

	raw_SetListModel(pUIForm  );
}

inline BOOL  IDUIListView_::SetItemImage(long  nItem, enum DUILVI_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemImage(nItem, eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIListView_::GetItemImage(long  nItem, enum DUILVI_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetItemImage(nItem, eState, &_result);
	return _result;
}

inline BOOL  IDUIListView_::SetItemColor(long  nItem, enum DUILVI_STATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemColor(nItem, eState, pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIListView_::GetItemColor(long  nItem, enum DUILVI_STATE  eState  )
{
	struct IFillColor * _result;
	raw_GetItemColor(nItem, eState, &_result);
	return _result;
}

inline long  IDUIListView_::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline void IDUIListView_::DeleteItem(long  nItem, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_DeleteItem(nItem, xxx_bRedraw  );
}

inline void IDUIListView_::DeleteAllItems()
{

	raw_DeleteAllItems();
}

inline BOOL  IDUIListView_::SetItemText(long  nItem, short  iSubItem, tstring  szItem, BOOL  bRedraw  )
{
_bstr_t xxx_szItem(szItem.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemText(nItem, iSubItem, xxx_szItem, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIListView_::GetItemText(long  nItem, short  iSubItem  )
{
	BSTR _result = NULL;
	raw_GetItemText(nItem, iSubItem, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUIListView_::SetItemData(long  nItem, OLE_HANDLE  hData  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemData(nItem, hData, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIListView_::GetItemData(long  nItem  )
{
	OLE_HANDLE  _result;
	raw_GetItemData(nItem, &_result);
	return _result;
}

inline struct SkinRect  IDUIListView_::GetItemRect(long  nItem  )
{
	struct SkinRect  _result;
	raw_GetItemRect(nItem, &_result);
	return _result;
}

inline BOOL  IDUIListView_::SetItemGraphic(long  nItem, enum DUILVI_STATE  eState, OLE_HANDLE  hBitmap  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemGraphic(nItem, eState, hBitmap, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIListView_::GetItemGraphic(long  nItem, enum DUILVI_STATE  eState  )
{
	OLE_HANDLE  _result;
	raw_GetItemGraphic(nItem, eState, &_result);
	return _result;
}

inline void IDUIListView_::SetControlID(short  nIndex  )
{

	raw_SetControlID(nIndex  );
}

inline short  IDUIListView_::GetControlID()
{
	short  _result;
	raw_GetControlID(&_result);
	return _result;
}

inline void IDUIListView_::SetUseScrollBar(BOOL  bUseScrollBar  )
{
	VARIANT_BOOL xxx_bUseScrollBar = bUseScrollBar ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseScrollBar(xxx_bUseScrollBar  );
}

inline BOOL  IDUIListView_::IsUserScrollBar()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsUserScrollBar(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::RefreshView()
{

	raw_RefreshView();
}

inline OLE_HANDLE  IDUIListView_::GetResObject(long  nItem, tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	OLE_HANDLE  _result;
	raw_GetResObject(nItem, xxx_strName, &_result);
	return _result;
}

inline OLE_HANDLE  IDUIListView_::GetHeaderCtrl()
{
	OLE_HANDLE  _result;
	raw_GetHeaderCtrl(&_result);
	return _result;
}

inline struct IDUILVColumn * IDUIListView_::InsertColumn(short  nCol, tstring  strText, short  nWidth  )
{
_bstr_t xxx_strText(strText.c_str());
	struct IDUILVColumn * _result;
	raw_InsertColumn(nCol, xxx_strText, nWidth, &_result);
	return _result;
}

inline BOOL  IDUIListView_::DeleteColumn(short  nCol  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteColumn(nCol, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUILVColumn * IDUIListView_::GetColumn(short  nCol  )
{
	struct IDUILVColumn * _result;
	raw_GetColumn(nCol, &_result);
	return _result;
}

inline BOOL  IDUIListView_::IsDrawGrid()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawGrid(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetDrawGrid(BOOL  bDrawGrid  )
{
	VARIANT_BOOL xxx_bDrawGrid = bDrawGrid ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDrawGrid(xxx_bDrawGrid  );
}

inline BOOL  IDUIListView_::AppendItemText(long  nItem, short  iSubItem, tstring  szItem, tstring  szURL, BOOL  bRedraw  )
{
_bstr_t xxx_szItem(szItem.c_str());
_bstr_t xxx_szURL(szURL.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendItemText(nItem, iSubItem, xxx_szItem, xxx_szURL, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::AppendImage(long  nItem, short  iSubItem, tstring  szImagePath, BOOL  bRedraw  )
{
_bstr_t xxx_szImagePath(szImagePath.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendImage(nItem, iSubItem, xxx_szImagePath, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIListView_::GetUnitItemStaticTextStyle(enum DUILVI_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetUnitItemStaticTextStyle(eState, &_result);
	return _result;
}

inline struct IDUITextStyle * IDUIListView_::GetUnitItemUrlTextStyle(enum DUILVI_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetUnitItemUrlTextStyle(eState, &_result);
	return _result;
}

inline BOOL  IDUIListView_::SetUnitItemStaticTextStyle(enum DUILVI_STATE  eState, struct IDUITextStyle * ppTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetUnitItemStaticTextStyle(eState, ppTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIUnitItem * IDUIListView_::GetUnitItem(long  nRow, short  nCol  )
{
	struct IDUIUnitItem * _result;
	raw_GetUnitItem(nRow, nCol, &_result);
	return _result;
}

inline BOOL  IDUIListView_::SetUnitItemUrlTextStyle(enum DUILVI_STATE  eState, struct IDUITextStyle * ppTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetUnitItemUrlTextStyle(eState, ppTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::IsAutoResizeItemHeight()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoResizeItemHeight(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetAutoResizeItemHeight(BOOL  bResult  )
{
	VARIANT_BOOL xxx_bResult = bResult ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoResizeItemHeight(xxx_bResult  );
}

inline struct IDUITVItemBase * IDUIListView_::GetSelItem()
{
	struct IDUITVItemBase * _result;
	raw_GetSelItem(&_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUIListView_::AddGroup(long  nID, tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_AddGroup(nID, xxx_strName, &_result);
	return _result;
}

inline BOOL  IDUIListView_::RemoveGroupByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveGroupByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::RemoveGroupByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveGroupByName(xxx_strName, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::RemoveAllGroup()
{

	raw_RemoveAllGroup();
}

inline struct IDUITVItemGroup * IDUIListView_::GetGroupByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_GetGroupByName(xxx_strName, &_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUIListView_::GetGroupByID(long  nID  )
{
	struct IDUITVItemGroup * _result;
	raw_GetGroupByID(nID, &_result);
	return _result;
}

inline long  IDUIListView_::GetGroupCount()
{
	long  _result;
	raw_GetGroupCount(&_result);
	return _result;
}

inline BOOL  IDUIListView_::SetShowGroup(BOOL  bShow, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetShowGroup(xxx_bShow, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::GetShowGroup()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetShowGroup(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::RemoveItem(struct IDUITVItem * pItem  )
{

	raw_RemoveItem(pItem  );
}

inline void IDUIListView_::SetAutoAdjustIcon(BOOL  bAutoAdjust  )
{
	VARIANT_BOOL xxx_bAutoAdjust = bAutoAdjust ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoAdjustIcon(xxx_bAutoAdjust  );
}

inline BOOL  IDUIListView_::IsAutoAdjustIcon()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoAdjustIcon(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetIconAdjustSize(long  nWidth, long  nHeight  )
{

	raw_SetIconAdjustSize(nWidth, nHeight  );
}

inline void IDUIListView_::GetIconAdjustSize(long * pnWidth, long * pnHeight  )
{

	raw_GetIconAdjustSize(pnWidth, pnHeight  );
}

inline void IDUIListView_::SetIconOffset(long  nOffsetX, long  nOffsetY  )
{

	raw_SetIconOffset(nOffsetX, nOffsetY  );
}

inline void IDUIListView_::GetIconOffset(long * pnOffsetX, long * pnOffsetY  )
{

	raw_GetIconOffset(pnOffsetX, pnOffsetY  );
}

inline void IDUIListView_::SetSupportMultiSel(BOOL  bMutilSel  )
{
	VARIANT_BOOL xxx_bMutilSel = bMutilSel ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSupportMultiSel(xxx_bMutilSel  );
}

inline BOOL  IDUIListView_::IsSupportMultiSel()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsSupportMultiSel(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::GetSelItemCount(long * pnResult  )
{

	raw_GetSelItemCount(pnResult  );
}

inline struct IDUITVItemBase * IDUIListView_::GetFirstSelItem()
{
	struct IDUITVItemBase * _result;
	raw_GetFirstSelItem(&_result);
	return _result;
}

inline struct IDUITVItemBase * IDUIListView_::GetNextSelItem(struct IDUITVItemBase * pItem  )
{
	struct IDUITVItemBase * _result;
	raw_GetNextSelItem(pItem, &_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUIListView_::InsertGroup(long  nIndex, long  nID, tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_InsertGroup(nIndex, nID, xxx_strName, &_result);
	return _result;
}

inline void IDUIListView_::SortItems(OLE_HANDLE  lpCmdFun, struct IDUITVItemGroup * pParentItem, BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SortItems(lpCmdFun, pParentItem, xxx_bRefresh  );
}

inline void IDUIListView_::SetShowText(BOOL  bShowText, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bShowText = bShowText ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowText(xxx_bShowText, xxx_bRedraw  );
}

inline BOOL  IDUIListView_::IsShowText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowText(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetSelItem(struct IDUITVItemBase * pItemBase, BOOL  bChangePos  )
{
	VARIANT_BOOL xxx_bChangePos = bChangePos ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSelItem(pItemBase, xxx_bChangePos  );
}

inline struct IDUITVItemBase * IDUIListView_::GetItem(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemBase * _result;
	raw_GetItem(xxx_strName, &_result);
	return _result;
}

inline struct IDUITVItemBase * IDUIListView_::GetAt(long  nIndex  )
{
	struct IDUITVItemBase * _result;
	raw_GetAt(nIndex, &_result);
	return _result;
}

inline BOOL  IDUIListView_::IsDragable()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDragable(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::EnableDragable(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableDragable(xxx_bEnable  );
}

inline BOOL  IDUIListView_::IsDragByPostMsg()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDragByPostMsg(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetDragByPostMsg(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDragByPostMsg(xxx_bEnable  );
}

inline BOOL  IDUIListView_::IsExpendByIcon()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsExpendByIcon(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetExpendByIcon(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetExpendByIcon(xxx_bEnable  );
}

inline void IDUIListView_::SetSupportGroup(BOOL  bSupportGroup  )
{
	VARIANT_BOOL xxx_bSupportGroup = bSupportGroup ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSupportGroup(xxx_bSupportGroup  );
}

inline BOOL  IDUIListView_::IsSupportGroup()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsSupportGroup(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::VScroll(long  nScrollSize  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_VScroll(nScrollSize, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIListView_::GetVScrollPos()
{
	long  _result;
	raw_GetVScrollPos(&_result);
	return _result;
}

inline OLE_HANDLE  IDUIListView_::GetListModel()
{
	OLE_HANDLE  _result;
	raw_GetListModel(&_result);
	return _result;
}

inline void IDUIListView_::SetCheckBoxStyle(BOOL  bHasCheckBox, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bHasCheckBox = bHasCheckBox ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCheckBoxStyle(xxx_bHasCheckBox, xxx_bRedraw  );
}

inline BOOL  IDUIListView_::GetCheckBoxStyle()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetCheckBoxStyle(&_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIListView_::GetCheckItemCount()
{
	long  _result;
	raw_GetCheckItemCount(&_result);
	return _result;
}

inline struct IDUITVItem * IDUIListView_::GetFirstCheckItem()
{
	struct IDUITVItem * _result;
	raw_GetFirstCheckItem(&_result);
	return _result;
}

inline struct IDUITVItem * IDUIListView_::GetNextCheckItem(struct IDUITVItem * pItem  )
{
	struct IDUITVItem * _result;
	raw_GetNextCheckItem(pItem, &_result);
	return _result;
}

inline void IDUIListView_::SetCheckItem(struct IDUITVItem * pItem, BOOL  bCheck  )
{
	VARIANT_BOOL xxx_bCheck = bCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCheckItem(pItem, xxx_bCheck  );
}

inline BOOL  IDUIListView_::SetColumnUserModule(int  nCol, OLE_HANDLE  pIControlBaseModule  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetColumnUserModule(nCol, pIControlBaseModule, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIListView_::GetColumnUserModule(int  nCol  )
{
	OLE_HANDLE  _result;
	raw_GetColumnUserModule(nCol, &_result);
	return _result;
}

inline OLE_HANDLE  IDUIListView_::GetItemCtrlBase(long  nRow, long  nCol  )
{
	OLE_HANDLE  _result;
	raw_GetItemCtrlBase(nRow, nCol, &_result);
	return _result;
}

inline struct IDUITVItemBase * IDUIListView_::GetLastVisibleItem()
{
	struct IDUITVItemBase * _result;
	raw_GetLastVisibleItem(&_result);
	return _result;
}

inline void IDUIListView_::SetMultiSelItem(struct IDUITVItemBase * pItemBase, BOOL  bAutoCancelSel  )
{
	VARIANT_BOOL xxx_bAutoCancelSel = bAutoCancelSel ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetMultiSelItem(pItemBase, xxx_bAutoCancelSel  );
}

inline void IDUIListView_::SetUserModulePosition(int  nCol, int  nOffsetX, int  nOffsetY, int  nRightMargin, int  nHeight  )
{

	raw_SetUserModulePosition(nCol, nOffsetX, nOffsetY, nRightMargin, nHeight  );
}

inline BOOL  IDUIListView_::CanExpandGroup()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_CanExpandGroup(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetAllItemCheck(BOOL  bCheck  )
{
	VARIANT_BOOL xxx_bCheck = bCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAllItemCheck(xxx_bCheck  );
}

inline void IDUIListView_::ReDraw()
{

	raw_ReDraw();
}

inline BOOL  IDUIListView_::IsCustomClickOnly()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsCustomClickOnly(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetCustomClickOnly(BOOL  bResult  )
{
	VARIANT_BOOL xxx_bResult = bResult ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCustomClickOnly(xxx_bResult  );
}

inline BOOL  IDUIListView_::SwapCol(long  nIndex1, long  nIndex2  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SwapCol(nIndex1, nIndex2, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetItemState(long  nRow, enum DUILVI_STATE  eState  )
{

	raw_SetItemState(nRow, eState  );
}

inline void IDUIListView_::StartMultiSel(BOOL  bStartMulti  )
{
	VARIANT_BOOL xxx_bStartMulti = bStartMulti ? VARIANT_TRUE : VARIANT_FALSE;

	raw_StartMultiSel(xxx_bStartMulti  );
}

inline BOOL  IDUIListView_::IsStartMultiSel()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsStartMultiSel(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::AppendImageByHBitmap(long  nItem, short  iSubItem, OLE_HANDLE  hBitmap, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendImageByHBitmap(nItem, iSubItem, hBitmap, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::AppendImageByHIcon(long  nItem, short  iSubItem, OLE_HANDLE  hIcon, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendImageByHIcon(nItem, iSubItem, hIcon, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetGroupHeight(long  lHeight  )
{

	raw_SetGroupHeight(lHeight  );
}

inline long  IDUIListView_::GetGroupHeight()
{
	long  _result;
	raw_GetGroupHeight(&_result);
	return _result;
}

inline void IDUIListView_::SelectAllItem(BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SelectAllItem(xxx_bRefresh  );
}

inline void IDUIListView_::UnSelectAllItem(BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_UnSelectAllItem(xxx_bRefresh  );
}

inline OLE_HANDLE  IDUIListView_::GetListViewNofiyInfo(OLE_HANDLE  hInfo  )
{
	OLE_HANDLE  _result;
	raw_GetListViewNofiyInfo(hInfo, &_result);
	return _result;
}

inline void IDUIListView_::SetVerSpace(long  nSize  )
{

	raw_SetVerSpace(nSize  );
}

inline long  IDUIListView_::GetVisibleCount()
{
	long  _result;
	raw_GetVisibleCount(&_result);
	return _result;
}

inline void IDUIListView_::SetScrollBar(OLE_HANDLE  pScrollBar  )
{

	raw_SetScrollBar(pScrollBar  );
}

inline BOOL  IDUIListView_::IsDrawVerGrid()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawVerGrid(&_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIListView_::GetIconRowCount()
{
	long  _result;
	raw_GetIconRowCount(&_result);
	return _result;
}

inline void IDUIListView_::SetUseRollOver(BOOL  bRollOver  )
{
	VARIANT_BOOL xxx_bRollOver = bRollOver ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseRollOver(xxx_bRollOver  );
}

inline BOOL  IDUIListView_::IsUseRollOver()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsUseRollOver(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::ScrollOver(BOOL  bTop  )
{
	VARIANT_BOOL xxx_bTop = bTop ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ScrollOver(xxx_bTop  );
}

inline OLE_HANDLE  IDUIListView_::GetExternalScrollBar()
{
	OLE_HANDLE  _result;
	raw_GetExternalScrollBar(&_result);
	return _result;
}

inline struct IDUITVItemBase * IDUIListView_::GetItemByID(long  nID  )
{
	struct IDUITVItemBase * _result;
	raw_GetItemByID(nID, &_result);
	return _result;
}

inline void IDUIListView_::SetDblClkHighPriority(BOOL  bHigh  )
{
	VARIANT_BOOL xxx_bHigh = bHigh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDblClkHighPriority(xxx_bHigh  );
}

inline BOOL  IDUIListView_::GetDblClkHighPriority()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDblClkHighPriority(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetItemEnable(long  nIndex, BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemEnable(nIndex, xxx_bEnable  );
}

inline void IDUIListView_::SetBottomExtent(long  nExtent  )
{

	raw_SetBottomExtent(nExtent  );
}

inline long  IDUIListView_::GetBottomExtent()
{
	long  _result;
	raw_GetBottomExtent(&_result);
	return _result;
}

inline BOOL  IDUIListView_::SwapItem(struct IDUITVItemBase * pItem, struct IDUITVItemBase * pOtherItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SwapItem(pItem, pOtherItem, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::MoveItemTop(long  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_MoveItemTop(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::MoveItemBottom(long  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_MoveItemBottom(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetVirListItemsNum(long  nNum  )
{

	raw_SetVirListItemsNum(nNum  );
}

inline void IDUIListView_::SetUseVirList(BOOL  bUse  )
{
	VARIANT_BOOL xxx_bUse = bUse ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseVirList(xxx_bUse  );
}

inline void IDUIListView_::SetUseVirGroupList(BOOL  bUse  )
{
	VARIANT_BOOL xxx_bUse = bUse ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseVirGroupList(xxx_bUse  );
}

inline void IDUIListView_::SetVirGroupNum(long  nNum, struct IDUITVItemGroup * pParent  )
{

	raw_SetVirGroupNum(nNum, pParent  );
}

inline void IDUIListView_::SetVirSonItemNum(long  nNum, struct IDUITVItemGroup * pParent  )
{

	raw_SetVirSonItemNum(nNum, pParent  );
}

inline void IDUIListView_::SetAutoDrop(BOOL  bAutoDrop  )
{
	VARIANT_BOOL xxx_bAutoDrop = bAutoDrop ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoDrop(xxx_bAutoDrop  );
}

inline void IDUIListView_::SetHorScrollBar(OLE_HANDLE  pScrollBar  )
{

	raw_SetHorScrollBar(pScrollBar  );
}

inline void IDUIListView_::RefreshVirGroup()
{

	raw_RefreshVirGroup();
}

inline void IDUIListView_::SetDragingHoverItemHot(BOOL  bNeed  )
{
	VARIANT_BOOL xxx_bNeed = bNeed ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDragingHoverItemHot(xxx_bNeed  );
}

inline void IDUIListView_::SetDragingHoverGroupHot(BOOL  bNeed  )
{
	VARIANT_BOOL xxx_bNeed = bNeed ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDragingHoverGroupHot(xxx_bNeed  );
}

inline void IDUIListView_::ExpandAllTopVirGroup(BOOL  bExpand  )
{
	VARIANT_BOOL xxx_bExpand = bExpand ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ExpandAllTopVirGroup(xxx_bExpand  );
}

inline long  IDUIListView_::GetSelectedItemIDList(struct DUILV_IDPAIR ** ppIdPair  )
{
	long  _result;
	raw_GetSelectedItemIDList(ppIdPair, &_result);
	return _result;
}

inline void IDUIListView_::VirGroupVScroll(long  nDistance  )
{

	raw_VirGroupVScroll(nDistance  );
}

inline void IDUIListView_::UpdateVirtualListData()
{

	raw_UpdateVirtualListData();
}

inline void IDUIListView_::EnableMouseScroll(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableMouseScroll(xxx_bEnable  );
}

inline long  IDUIListView_::GetSumItemHeight()
{
	long  _result;
	raw_GetSumItemHeight(&_result);
	return _result;
}

inline struct IDUITVItemBase * IDUIListView_::GetFirstShowItem()
{
	struct IDUITVItemBase * _result;
	raw_GetFirstShowItem(&_result);
	return _result;
}

inline struct IDUITVItemBase * IDUIListView_::GetNextShowItem(struct IDUITVItemBase * pItem  )
{
	struct IDUITVItemBase * _result;
	raw_GetNextShowItem(pItem, &_result);
	return _result;
}

inline BOOL  IDUIListView_::CancelSelectedItem(struct IDUITVItemBase * pItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_CancelSelectedItem(pItem, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::SetAutoSelectItem(BOOL  bAutoSelect  )
{
	VARIANT_BOOL xxx_bAutoSelect = bAutoSelect ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoSelectItem(xxx_bAutoSelect  );
}

inline void IDUIListView_::RefreshVirtual()
{

	raw_RefreshVirtual();
}

inline BOOL  IDUIListView_::InsertTreeListColumn(short  nCol, tstring  strText, short  nWidth  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_InsertTreeListColumn(nCol, xxx_strText, nWidth, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIListView_::InsertTreeListItem(struct IDUITVItem * pParentItem, long  nItem, tstring  szItem, long  nID, BOOL  bRefresh  )
{
_bstr_t xxx_szItem(szItem.c_str());
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;
	short  _result;
	raw_InsertTreeListItem(pParentItem, nItem, xxx_szItem, nID, xxx_bRefresh, &_result);
	return _result;
}

inline void IDUIListView_::AddHighLightItemOrCol(OLE_COLOR  oleclr, BOOL  bItem, short  nItem, short  nCol, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bItem = bItem ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_AddHighLightItemOrCol(oleclr, xxx_bItem, nItem, nCol, xxx_bRedraw  );
}

inline void IDUIListView_::DeleteHighLightInfo(BOOL  bItem, short  nItem, short  nCol, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bItem = bItem ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_DeleteHighLightInfo(xxx_bItem, nItem, nCol, xxx_bRedraw  );
}

inline void IDUIListView_::ReDrawShowItems(OLE_HANDLE  lpCmdFun, BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ReDrawShowItems(lpCmdFun, xxx_bRefresh  );
}

inline BOOL  IDUIListView_::RedrawUnitItemForVirtualList(long  nRow, long  nCol  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RedrawUnitItemForVirtualList(nRow, nCol, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView_::TurnPage(BOOL  bUp  )
{
	VARIANT_BOOL xxx_bUp = bUp ? VARIANT_TRUE : VARIANT_FALSE;

	raw_TurnPage(xxx_bUp  );
}

inline void IDUIListView_::SetReportItemTextStyle(long  nRow, long  nCol, BOOL  bRow, OLE_COLOR  clr, enum DUILVI_STATE  eState  )
{
	VARIANT_BOOL xxx_bRow = bRow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetReportItemTextStyle(nRow, nCol, xxx_bRow, clr, eState  );
}

inline void IDUIListView_::AddUnitColorInfo(OLE_COLOR  oleclr, short  nItem, short  nCol, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_AddUnitColorInfo(oleclr, nItem, nCol, xxx_bRedraw  );
}

inline void IDUIListView_::DeleteUnitColorInfo(short  nItem, short  nCol, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_DeleteUnitColorInfo(nItem, nCol, xxx_bRedraw  );
}

inline BOOL  IDUIListView_::SetVisibleColumn(short  nCol, BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetVisibleColumn(nCol, xxx_bVisible, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView_::SetReportGridLen(unsigned int  nGridLen  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetReportGridLen(nGridLen, &_result);
	return _result ? TRUE : FALSE;
}

inline unsigned int  IDUIListView_::GetReportGridLen()
{
	unsigned int  _result;
	raw_GetReportGridLen(&_result);
	return _result;
}

inline void  IDUIListView::SetListType(enum DUILV_STYLE  eListType, BOOL  bRedraw, VARIANT_BOOL * pbResult  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetListType(eListType, bRedraw, pbResult);
}

inline enum DUILV_STYLE  IDUIListView::GetListType()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetListType();
}

inline BOOL  IDUIListView::SetDrawBackColor(BOOL  bDrawColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetDrawBackColor(bDrawColor, bRedraw);
}

inline BOOL  IDUIListView::IsDrawBackColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsDrawBackColor();
}

inline BOOL  IDUIListView::SetBackImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetBackImage(pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUIListView::GetBackImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetBackImage();
}

inline BOOL  IDUIListView::SetBackColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetBackColor(pFillColor, bRedraw);
}

inline struct IFillColor * IDUIListView::GetBackColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetBackColor();
}

inline BOOL  IDUIListView::SetDrawItemColor(BOOL  bDrawColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetDrawItemColor(bDrawColor, bRedraw);
}

inline BOOL  IDUIListView::IsDrawItemColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsDrawItemColor();
}

inline BOOL  IDUIListView::SetItemHeight(short  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemHeight(nValue, bRedraw);
}

inline short  IDUIListView::GetItemHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemHeight();
}

inline BOOL  IDUIListView::SetItemWidth(short  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemWidth(nValue, bRedraw);
}

inline short  IDUIListView::GetItemWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemWidth();
}

inline BOOL  IDUIListView::SetItemDefImage(enum DUILVI_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemDefImage(eState, pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUIListView::GetItemDefImage(enum DUILVI_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemDefImage(eState);
}

inline BOOL  IDUIListView::SetItemDefColor(enum DUILVI_STATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemDefColor(eState, pFillColor, bRedraw);
}

inline struct IFillColor * IDUIListView::GetItemDefColor(enum DUILVI_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemDefColor(eState);
}

inline BOOL  IDUIListView::SetTextStyle(enum DUILVI_STATE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetTextStyle(eState, pTextStyle, bRedraw);
}

inline struct IDUITextStyle * IDUIListView::GetTextStyle(enum DUILVI_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetTextStyle(eState);
}

inline BOOL  IDUIListView::SetItemSpace(short  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemSpace(nValue, bRedraw);
}

inline short  IDUIListView::GetItemSpace()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemSpace();
}

inline void  IDUIListView::SetScrollSize(long  nSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetScrollSize(nSize);
}

inline long  IDUIListView::GetScrollSize()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetScrollSize();
}

inline void  IDUIListView::SetLeftScroll(BOOL  bLeftScroll  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetLeftScroll(bLeftScroll);
}

inline BOOL  IDUIListView::IsLeftScroll()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsLeftScroll();
}

inline short  IDUIListView::InsertItem(long  nItem, tstring  szItem, long  nID, BOOL  bRefresh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->InsertItem(nItem, szItem, nID, bRefresh);
}

inline OLE_HANDLE  IDUIListView::GetObject(tstring  strParent, tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetObject(strParent, strName);
}

inline void IDUIListView::SetListModel(IDUIControlBase*  pUIForm  )
 {
   if(pUIForm == NULL)
     return;
 
   ((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);
 
   return ((IDUIListView_*)m_pCtrl)->SetListModel(pUIForm->m_pDataBlock);
 }
 
inline BOOL  IDUIListView::SetItemImage(long  nItem, enum DUILVI_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemImage(nItem, eState, pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUIListView::GetItemImage(long  nItem, enum DUILVI_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemImage(nItem, eState);
}

inline BOOL  IDUIListView::SetItemColor(long  nItem, enum DUILVI_STATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemColor(nItem, eState, pFillColor, bRedraw);
}

inline struct IFillColor * IDUIListView::GetItemColor(long  nItem, enum DUILVI_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemColor(nItem, eState);
}

inline long  IDUIListView::GetItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemCount();
}

inline void  IDUIListView::DeleteItem(long  nItem, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->DeleteItem(nItem, bRedraw);
}

inline void  IDUIListView::DeleteAllItems()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->DeleteAllItems();
}

inline BOOL  IDUIListView::SetItemText(long  nItem, short  iSubItem, tstring  szItem, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemText(nItem, iSubItem, szItem, bRedraw);
}

inline tstring  IDUIListView::GetItemText(long  nItem, short  iSubItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemText(nItem, iSubItem);
}

inline BOOL  IDUIListView::SetItemData(long  nItem, OLE_HANDLE  hData  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemData(nItem, hData);
}

inline OLE_HANDLE  IDUIListView::GetItemData(long  nItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemData(nItem);
}

inline struct SkinRect  IDUIListView::GetItemRect(long  nItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemRect(nItem);
}

inline BOOL  IDUIListView::SetItemGraphic(long  nItem, enum DUILVI_STATE  eState, OLE_HANDLE  hBitmap  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemGraphic(nItem, eState, hBitmap);
}

inline OLE_HANDLE  IDUIListView::GetItemGraphic(long  nItem, enum DUILVI_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemGraphic(nItem, eState);
}

inline void  IDUIListView::SetControlID(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetControlID(nIndex);
}

inline short  IDUIListView::GetControlID()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetControlID();
}

inline void  IDUIListView::SetUseScrollBar(BOOL  bUseScrollBar  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetUseScrollBar(bUseScrollBar);
}

inline BOOL  IDUIListView::IsUserScrollBar()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsUserScrollBar();
}

inline void  IDUIListView::RefreshView()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->RefreshView();
}

inline OLE_HANDLE  IDUIListView::GetResObject(long  nItem, tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetResObject(nItem, strName);
}

inline OLE_HANDLE  IDUIListView::GetHeaderCtrl()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetHeaderCtrl();
}

inline struct IDUILVColumn * IDUIListView::InsertColumn(short  nCol, tstring  strText, short  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->InsertColumn(nCol, strText, nWidth);
}

inline BOOL  IDUIListView::DeleteColumn(short  nCol  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->DeleteColumn(nCol);
}

inline struct IDUILVColumn * IDUIListView::GetColumn(short  nCol  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetColumn(nCol);
}

inline BOOL  IDUIListView::IsDrawGrid()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsDrawGrid();
}

inline void  IDUIListView::SetDrawGrid(BOOL  bDrawGrid  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetDrawGrid(bDrawGrid);
}

inline BOOL  IDUIListView::AppendItemText(long  nItem, short  iSubItem, tstring  szItem, tstring  szURL, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->AppendItemText(nItem, iSubItem, szItem, szURL, bRedraw);
}

inline BOOL  IDUIListView::AppendImage(long  nItem, short  iSubItem, tstring  szImagePath, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->AppendImage(nItem, iSubItem, szImagePath, bRedraw);
}

inline struct IDUITextStyle * IDUIListView::GetUnitItemStaticTextStyle(enum DUILVI_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetUnitItemStaticTextStyle(eState);
}

inline struct IDUITextStyle * IDUIListView::GetUnitItemUrlTextStyle(enum DUILVI_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetUnitItemUrlTextStyle(eState);
}

inline BOOL  IDUIListView::SetUnitItemStaticTextStyle(enum DUILVI_STATE  eState, struct IDUITextStyle * ppTextStyle, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetUnitItemStaticTextStyle(eState, ppTextStyle, bRedraw);
}

inline struct IDUIUnitItem * IDUIListView::GetUnitItem(long  nRow, short  nCol  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetUnitItem(nRow, nCol);
}

inline BOOL  IDUIListView::SetUnitItemUrlTextStyle(enum DUILVI_STATE  eState, struct IDUITextStyle * ppTextStyle, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetUnitItemUrlTextStyle(eState, ppTextStyle, bRedraw);
}

inline BOOL  IDUIListView::IsAutoResizeItemHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsAutoResizeItemHeight();
}

inline void  IDUIListView::SetAutoResizeItemHeight(BOOL  bResult  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetAutoResizeItemHeight(bResult);
}

inline struct IDUITVItemBase * IDUIListView::GetSelItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetSelItem();
}

inline struct IDUITVItemGroup * IDUIListView::AddGroup(long  nID, tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->AddGroup(nID, strName);
}

inline BOOL  IDUIListView::RemoveGroupByID(long  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->RemoveGroupByID(nID);
}

inline BOOL  IDUIListView::RemoveGroupByName(tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->RemoveGroupByName(strName);
}

inline void  IDUIListView::RemoveAllGroup()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->RemoveAllGroup();
}

inline struct IDUITVItemGroup * IDUIListView::GetGroupByName(tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetGroupByName(strName);
}

inline struct IDUITVItemGroup * IDUIListView::GetGroupByID(long  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetGroupByID(nID);
}

inline long  IDUIListView::GetGroupCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetGroupCount();
}

inline BOOL  IDUIListView::SetShowGroup(BOOL  bShow, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetShowGroup(bShow, bRedraw);
}

inline BOOL  IDUIListView::GetShowGroup()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetShowGroup();
}

inline void  IDUIListView::RemoveItem(struct IDUITVItem * pItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->RemoveItem(pItem);
}

inline void  IDUIListView::SetAutoAdjustIcon(BOOL  bAutoAdjust  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetAutoAdjustIcon(bAutoAdjust);
}

inline BOOL  IDUIListView::IsAutoAdjustIcon()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsAutoAdjustIcon();
}

inline void  IDUIListView::SetIconAdjustSize(long  nWidth, long  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetIconAdjustSize(nWidth, nHeight);
}

inline void  IDUIListView::GetIconAdjustSize(long * pnWidth, long * pnHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetIconAdjustSize(pnWidth, pnHeight);
}

inline void  IDUIListView::SetIconOffset(long  nOffsetX, long  nOffsetY  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetIconOffset(nOffsetX, nOffsetY);
}

inline void  IDUIListView::GetIconOffset(long * pnOffsetX, long * pnOffsetY  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetIconOffset(pnOffsetX, pnOffsetY);
}

inline void  IDUIListView::SetSupportMultiSel(BOOL  bMutilSel  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetSupportMultiSel(bMutilSel);
}

inline BOOL  IDUIListView::IsSupportMultiSel()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsSupportMultiSel();
}

inline void  IDUIListView::GetSelItemCount(long * pnResult  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetSelItemCount(pnResult);
}

inline struct IDUITVItemBase * IDUIListView::GetFirstSelItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetFirstSelItem();
}

inline struct IDUITVItemBase * IDUIListView::GetNextSelItem(struct IDUITVItemBase * pItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetNextSelItem(pItem);
}

inline struct IDUITVItemGroup * IDUIListView::InsertGroup(long  nIndex, long  nID, tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->InsertGroup(nIndex, nID, strName);
}

inline void  IDUIListView::SortItems(OLE_HANDLE  lpCmdFun, struct IDUITVItemGroup * pParentItem, BOOL  bRefresh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SortItems(lpCmdFun, pParentItem, bRefresh);
}

inline void  IDUIListView::SetShowText(BOOL  bShowText, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetShowText(bShowText, bRedraw);
}

inline BOOL  IDUIListView::IsShowText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsShowText();
}

inline void  IDUIListView::SetSelItem(struct IDUITVItemBase * pItemBase, BOOL  bChangePos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetSelItem(pItemBase, bChangePos);
}

inline struct IDUITVItemBase * IDUIListView::GetItem(tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItem(strName);
}

inline struct IDUITVItemBase * IDUIListView::GetAt(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetAt(nIndex);
}

inline BOOL  IDUIListView::IsDragable()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsDragable();
}

inline void  IDUIListView::EnableDragable(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->EnableDragable(bEnable);
}

inline BOOL  IDUIListView::IsDragByPostMsg()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsDragByPostMsg();
}

inline void  IDUIListView::SetDragByPostMsg(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetDragByPostMsg(bEnable);
}

inline BOOL  IDUIListView::IsExpendByIcon()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsExpendByIcon();
}

inline void  IDUIListView::SetExpendByIcon(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetExpendByIcon(bEnable);
}

inline void  IDUIListView::SetSupportGroup(BOOL  bSupportGroup  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetSupportGroup(bSupportGroup);
}

inline BOOL  IDUIListView::IsSupportGroup()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsSupportGroup();
}

inline BOOL  IDUIListView::VScroll(long  nScrollSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->VScroll(nScrollSize);
}

inline long  IDUIListView::GetVScrollPos()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetVScrollPos();
}

inline OLE_HANDLE  IDUIListView::GetListModel()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetListModel();
}

inline void  IDUIListView::SetCheckBoxStyle(BOOL  bHasCheckBox, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetCheckBoxStyle(bHasCheckBox, bRedraw);
}

inline BOOL  IDUIListView::GetCheckBoxStyle()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetCheckBoxStyle();
}

inline long  IDUIListView::GetCheckItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetCheckItemCount();
}

inline struct IDUITVItem * IDUIListView::GetFirstCheckItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetFirstCheckItem();
}

inline struct IDUITVItem * IDUIListView::GetNextCheckItem(struct IDUITVItem * pItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetNextCheckItem(pItem);
}

inline void  IDUIListView::SetCheckItem(struct IDUITVItem * pItem, BOOL  bCheck  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetCheckItem(pItem, bCheck);
}

inline BOOL  IDUIListView::SetColumnUserModule(int  nCol, IDUIControlBase*  pIControlBaseModule  )
 {
 
 	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);
 
 	return ((IDUIListView_*)m_pCtrl)->SetColumnUserModule(nCol, pIControlBaseModule->m_pDataBlock);
 }
 
inline OLE_HANDLE  IDUIListView::GetColumnUserModule(int  nCol  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetColumnUserModule(nCol);
}

inline OLE_HANDLE  IDUIListView::GetItemCtrlBase(long  nRow, long  nCol  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemCtrlBase(nRow, nCol);
}

inline struct IDUITVItemBase * IDUIListView::GetLastVisibleItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetLastVisibleItem();
}

inline void  IDUIListView::SetMultiSelItem(struct IDUITVItemBase * pItemBase, BOOL  bAutoCancelSel  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetMultiSelItem(pItemBase, bAutoCancelSel);
}

inline void  IDUIListView::SetUserModulePosition(int  nCol, int  nOffsetX, int  nOffsetY, int  nRightMargin, int  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetUserModulePosition(nCol, nOffsetX, nOffsetY, nRightMargin, nHeight);
}

inline BOOL  IDUIListView::CanExpandGroup()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->CanExpandGroup();
}

inline void  IDUIListView::SetAllItemCheck(BOOL  bCheck  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetAllItemCheck(bCheck);
}

inline void  IDUIListView::ReDraw()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->ReDraw();
}

inline BOOL  IDUIListView::IsCustomClickOnly()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsCustomClickOnly();
}

inline void  IDUIListView::SetCustomClickOnly(BOOL  bResult  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetCustomClickOnly(bResult);
}

inline BOOL  IDUIListView::SwapCol(long  nIndex1, long  nIndex2  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SwapCol(nIndex1, nIndex2);
}

inline void  IDUIListView::SetItemState(long  nRow, enum DUILVI_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemState(nRow, eState);
}

inline void  IDUIListView::StartMultiSel(BOOL  bStartMulti  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->StartMultiSel(bStartMulti);
}

inline BOOL  IDUIListView::IsStartMultiSel()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsStartMultiSel();
}

inline BOOL  IDUIListView::AppendImageByHBitmap(long  nItem, short  iSubItem, OLE_HANDLE  hBitmap, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->AppendImageByHBitmap(nItem, iSubItem, hBitmap, bRedraw);
}

inline BOOL  IDUIListView::AppendImageByHIcon(long  nItem, short  iSubItem, OLE_HANDLE  hIcon, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->AppendImageByHIcon(nItem, iSubItem, hIcon, bRedraw);
}

inline void  IDUIListView::SetGroupHeight(long  lHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetGroupHeight(lHeight);
}

inline long  IDUIListView::GetGroupHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetGroupHeight();
}

inline void  IDUIListView::SelectAllItem(BOOL  bRefresh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SelectAllItem(bRefresh);
}

inline void  IDUIListView::UnSelectAllItem(BOOL  bRefresh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->UnSelectAllItem(bRefresh);
}

inline OLE_HANDLE  IDUIListView::GetListViewNofiyInfo(OLE_HANDLE  hInfo  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetListViewNofiyInfo(hInfo);
}

inline void  IDUIListView::SetVerSpace(long  nSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetVerSpace(nSize);
}

inline long  IDUIListView::GetVisibleCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetVisibleCount();
}

inline void IDUIListView::SetScrollBar(OLE_HANDLE  pScrollBar  )
 {
   if(pScrollBar == NULL)
     return;
 
   ((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);
 
 return ((IDUIListView_*)m_pCtrl)->SetScrollBar(((IDUIControlBase*)pScrollBar)->m_pDataBlock);
 }
 
inline BOOL  IDUIListView::IsDrawVerGrid()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsDrawVerGrid();
}

inline long  IDUIListView::GetIconRowCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetIconRowCount();
}

inline void  IDUIListView::SetUseRollOver(BOOL  bRollOver  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetUseRollOver(bRollOver);
}

inline BOOL  IDUIListView::IsUseRollOver()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->IsUseRollOver();
}

inline void  IDUIListView::ScrollOver(BOOL  bTop  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->ScrollOver(bTop);
}

inline IDUIScrollBar* IDUIListView::GetExternalScrollBar()
 {
 
 ((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);
 
 return (IDUIScrollBar*)GetCtrlBase((void*)((IDUIListView_*)m_pCtrl)->GetExternalScrollBar());
 }
 
inline struct IDUITVItemBase * IDUIListView::GetItemByID(long  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetItemByID(nID);
}

inline void  IDUIListView::SetDblClkHighPriority(BOOL  bHigh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetDblClkHighPriority(bHigh);
}

inline BOOL  IDUIListView::GetDblClkHighPriority()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetDblClkHighPriority();
}

inline void  IDUIListView::SetItemEnable(long  nIndex, BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetItemEnable(nIndex, bEnable);
}

inline void  IDUIListView::SetBottomExtent(long  nExtent  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetBottomExtent(nExtent);
}

inline long  IDUIListView::GetBottomExtent()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetBottomExtent();
}

inline BOOL  IDUIListView::SwapItem(struct IDUITVItemBase * pItem, struct IDUITVItemBase * pOtherItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SwapItem(pItem, pOtherItem);
}

inline BOOL  IDUIListView::MoveItemTop(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->MoveItemTop(nIndex);
}

inline BOOL  IDUIListView::MoveItemBottom(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->MoveItemBottom(nIndex);
}

inline void  IDUIListView::SetVirListItemsNum(long  nNum  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetVirListItemsNum(nNum);
}

inline void  IDUIListView::SetUseVirList(BOOL  bUse  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetUseVirList(bUse);
}

inline void  IDUIListView::SetUseVirGroupList(BOOL  bUse  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetUseVirGroupList(bUse);
}

inline void  IDUIListView::SetVirGroupNum(long  nNum, struct IDUITVItemGroup * pParent  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetVirGroupNum(nNum, pParent);
}

inline void  IDUIListView::SetVirSonItemNum(long  nNum, struct IDUITVItemGroup * pParent  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetVirSonItemNum(nNum, pParent);
}

inline void  IDUIListView::SetAutoDrop(BOOL  bAutoDrop  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetAutoDrop(bAutoDrop);
}

inline void  IDUIListView::SetHorScrollBar(OLE_HANDLE  pScrollBar  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetHorScrollBar(pScrollBar);
}

inline void  IDUIListView::RefreshVirGroup()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->RefreshVirGroup();
}

inline void  IDUIListView::SetDragingHoverItemHot(BOOL  bNeed  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetDragingHoverItemHot(bNeed);
}

inline void  IDUIListView::SetDragingHoverGroupHot(BOOL  bNeed  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetDragingHoverGroupHot(bNeed);
}

inline void  IDUIListView::ExpandAllTopVirGroup(BOOL  bExpand  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->ExpandAllTopVirGroup(bExpand);
}

inline long  IDUIListView::GetSelectedItemIDList(struct DUILV_IDPAIR ** ppIdPair  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetSelectedItemIDList(ppIdPair);
}

inline void  IDUIListView::VirGroupVScroll(long  nDistance  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->VirGroupVScroll(nDistance);
}

inline void  IDUIListView::UpdateVirtualListData()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->UpdateVirtualListData();
}

inline void  IDUIListView::EnableMouseScroll(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->EnableMouseScroll(bEnable);
}

inline long  IDUIListView::GetSumItemHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetSumItemHeight();
}

inline struct IDUITVItemBase * IDUIListView::GetFirstShowItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetFirstShowItem();
}

inline struct IDUITVItemBase * IDUIListView::GetNextShowItem(struct IDUITVItemBase * pItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetNextShowItem(pItem);
}

inline BOOL  IDUIListView::CancelSelectedItem(struct IDUITVItemBase * pItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->CancelSelectedItem(pItem);
}

inline void  IDUIListView::SetAutoSelectItem(BOOL  bAutoSelect  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetAutoSelectItem(bAutoSelect);
}

inline void  IDUIListView::RefreshVirtual()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->RefreshVirtual();
}

inline BOOL  IDUIListView::InsertTreeListColumn(short  nCol, tstring  strText, short  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->InsertTreeListColumn(nCol, strText, nWidth);
}

inline short  IDUIListView::InsertTreeListItem(struct IDUITVItem * pParentItem, long  nItem, tstring  szItem, long  nID, BOOL  bRefresh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->InsertTreeListItem(pParentItem, nItem, szItem, nID, bRefresh);
}

inline void  IDUIListView::AddHighLightItemOrCol(OLE_COLOR  oleclr, BOOL  bItem, short  nItem, short  nCol, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->AddHighLightItemOrCol(oleclr, bItem, nItem, nCol, bRedraw);
}

inline void  IDUIListView::DeleteHighLightInfo(BOOL  bItem, short  nItem, short  nCol, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->DeleteHighLightInfo(bItem, nItem, nCol, bRedraw);
}

inline void  IDUIListView::ReDrawShowItems(OLE_HANDLE  lpCmdFun, BOOL  bRefresh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->ReDrawShowItems(lpCmdFun, bRefresh);
}

inline BOOL  IDUIListView::RedrawUnitItemForVirtualList(long  nRow, long  nCol  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->RedrawUnitItemForVirtualList(nRow, nCol);
}

inline void  IDUIListView::TurnPage(BOOL  bUp  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->TurnPage(bUp);
}

inline void  IDUIListView::SetReportItemTextStyle(long  nRow, long  nCol, BOOL  bRow, OLE_COLOR  clr, enum DUILVI_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetReportItemTextStyle(nRow, nCol, bRow, clr, eState);
}

inline void  IDUIListView::AddUnitColorInfo(OLE_COLOR  oleclr, short  nItem, short  nCol, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->AddUnitColorInfo(oleclr, nItem, nCol, bRedraw);
}

inline void  IDUIListView::DeleteUnitColorInfo(short  nItem, short  nCol, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->DeleteUnitColorInfo(nItem, nCol, bRedraw);
}

inline BOOL  IDUIListView::SetVisibleColumn(short  nCol, BOOL  bVisible  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetVisibleColumn(nCol, bVisible);
}

inline BOOL  IDUIListView::SetReportGridLen(unsigned int  nGridLen  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->SetReportGridLen(nGridLen);
}

inline unsigned int  IDUIListView::GetReportGridLen()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListView_*)m_pCtrl)->GetReportGridLen();
}

inline BOOL  IDUILVColumn::SetColumnWidth(short  nWidth  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetColumnWidth(nWidth, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUILVColumn::GetColumnWidth()
{
	short  _result;
	raw_GetColumnWidth(&_result);
	return _result;
}

inline BOOL  IDUILVColumn::SetTextStyle(enum DUILVI_STATE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextStyle(eState, pTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUILVColumn::GetTextStyle(enum DUILVI_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetTextStyle(eState, &_result);
	return _result;
}

inline void IDUILVColumn::SetAlignMode(enum DUILV_UNITITEM_HORZ  eHovAlign, enum DUILV_UNITITEM_VERT  eVerAlign  )
{

	raw_SetAlignMode(eHovAlign, eVerAlign  );
}

inline enum DUILV_UNITITEM_VERT  IDUILVColumn::GetVerAlignMode()
{
	enum DUILV_UNITITEM_VERT  _result;
	raw_GetVerAlignMode(&_result);
	return _result;
}

inline enum DUILV_UNITITEM_HORZ  IDUILVColumn::GetHorzAlignMode()
{
	enum DUILV_UNITITEM_HORZ  _result;
	raw_GetHorzAlignMode(&_result);
	return _result;
}

inline void IDUILVColumn::SetSort(BOOL  bSort  )
{
	VARIANT_BOOL xxx_bSort = bSort ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSort(xxx_bSort  );
}

inline BOOL  IDUILVColumn::GetSort()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetSort(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIUnitItem::AppendStatic(tstring  strText, tstring  strURL  )
{
	_bstr_t xxx_strText(strText.c_str());
	_bstr_t xxx_strURL(strURL.c_str());

	raw_AppendStatic(xxx_strText, xxx_strURL  );
}

inline void IDUIUnitItem::SetAlignMode(enum DUILV_UNITITEM_HORZ  eHovAlign, enum DUILV_UNITITEM_VERT  eVerAlign  )
{

	raw_SetAlignMode(eHovAlign, eVerAlign  );
}

inline enum DUILV_UNITITEM_VERT  IDUIUnitItem::GetVerAlignMode()
{
	enum DUILV_UNITITEM_VERT  _result;
	raw_GetVerAlignMode(&_result);
	return _result;
}

inline enum DUILV_UNITITEM_HORZ  IDUIUnitItem::GetHorzAlignMode()
{
	enum DUILV_UNITITEM_HORZ  _result;
	raw_GetHorzAlignMode(&_result);
	return _result;
}

inline long  IDUIUnitItem::GetUnitItemCount()
{
	long  _result;
	raw_GetUnitItemCount(&_result);
	return _result;
}

inline void IDUIUnitItem::GetUnitItemData(long  nIndex, BSTR * strText, BSTR * strURL, BSTR * strImagePath  )
{

	raw_GetUnitItemData(nIndex, strText, strURL, strImagePath  );
}

inline void IDUIUnitItem::Reset()
{

	raw_Reset();
}

inline void IDUIUnitItem::SetTextStyle(struct IDUITextStyle * pTextStyle, enum DUILVI_STATE  eState  )
{

	raw_SetTextStyle(pTextStyle, eState  );
}

inline struct IDUITextStyle * IDUIUnitItem::GetTextStyle(enum DUILVI_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetTextStyle(eState, &_result);
	return _result;
}

inline struct SkinRect  IDUIUnitItem::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline long  IDUIUnitItem::IsUserModule()
{
	long  _result;
	raw_IsUserModule(&_result);
	return _result;
}


 inline IDUIControlBase*  IDUIUnitItem::GetControlBase()
 {
 	OLE_HANDLE  _result;
 	raw_GetControlBase(&_result);
 	return (IDUIControlBase*)GetCtrlBase((void*)_result);
 }
 
inline void IDUIUnitItem::SetToolTipText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetToolTipText(xxx_strText  );
}

inline void IDUIUnitItem::SetUnitItemText(long  nIndex, tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetUnitItemText(nIndex, xxx_strText  );
}

inline void IDUITVItemBase::SetText(tstring  strText, BOOL  bRedraw  )
{
	_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetText(xxx_strText, xxx_bRedraw  );
}

inline tstring  IDUITVItemBase::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITVItemBase::SetID(long  nID  )
{

	raw_SetID(nID  );
}

inline long  IDUITVItemBase::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline BOOL  IDUITVItemBase::SetData(OLE_HANDLE  hData  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetData(hData, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUITVItemBase::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline enum DUILV_TYPE  IDUITVItemBase::GetType()
{
	enum DUILV_TYPE  _result;
	raw_GetType(&_result);
	return _result;
}

inline void IDUITVItemBase::SetObjPtr(OLE_HANDLE  pObjPtr  )
{

	raw_SetObjPtr(pObjPtr  );
}

inline struct SkinRect  IDUITVItemBase::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUITVItemBase::GetGroup()
{
	struct IDUITVItemGroup * _result;
	raw_GetGroup(&_result);
	return _result;
}

inline long  IDUITVItemBase::GetIndex()
{
	long  _result;
	raw_GetIndex(&_result);
	return _result;
}

inline IDUIControlBase*  IDUITVItemBase::GetCustomObj() 
 {
 	OLE_HANDLE  _result;
 	raw_GetCustomObj(&_result);
 
   IDUIControlBase* pCtrl = NULL;
   if(_result)
   {
   pCtrl = (IDUIControlBase*)GetCtrlBase((void*)_result);
   }
 
 	return pCtrl;
 }
 
inline void IDUITVItemBase::SetDefOffset(struct SkinSize  DefSize  )
{

	raw_SetDefOffset(DefSize  );
}

inline struct IDUIControlBase * IDUITVItemBase::GetVirtualModel()
{
	struct IDUIControlBase * _result;
	raw_GetVirtualModel(&_result);
	return _result;
}

inline void IDUITVItemBase::SetVisible(BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetVisible(xxx_bVisible  );
}

inline BOOL  IDUITVItemBase::GetVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITVItem * IDUITVItemGroup::InsertItem(long  nIndex, long  nID, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	struct IDUITVItem * _result;
	raw_InsertItem(nIndex, nID, xxx_strText, &_result);
	return _result;
}

inline struct IDUITVItem * IDUITVItemGroup::AppendItem(long  nID, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	struct IDUITVItem * _result;
	raw_AppendItem(nID, xxx_strText, &_result);
	return _result;
}

inline BOOL  IDUITVItemGroup::RemoveItem(struct IDUITVItem * pItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItem(pItem, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITVItemGroup::RemoveItemByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITVItemGroup::RemoveAllItems()
{

	raw_RemoveAllItems();
}

inline struct IDUITVItem * IDUITVItemGroup::GetItem(long  nID  )
{
	struct IDUITVItem * _result;
	raw_GetItem(nID, &_result);
	return _result;
}

inline struct IDUITVItemBase * IDUITVItemGroup::GetAt(long  nIndex  )
{
	struct IDUITVItemBase * _result;
	raw_GetAt(nIndex, &_result);
	return _result;
}

inline long  IDUITVItemGroup::GetCount()
{
	long  _result;
	raw_GetCount(&_result);
	return _result;
}

inline void IDUITVItemGroup::SetExpand(BOOL  bExpand  )
{
	VARIANT_BOOL xxx_bExpand = bExpand ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetExpand(xxx_bExpand  );
}

inline BOOL  IDUITVItemGroup::IsExpand()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsExpand(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITVItemGroup::SetHaveGroup(BOOL  bHaveGroup  )
{
	VARIANT_BOOL xxx_bHaveGroup = bHaveGroup ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHaveGroup(xxx_bHaveGroup  );
}

inline struct IDUITVItemGroup * IDUITVItemGroup::AddGroup(long  nID, tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_AddGroup(nID, xxx_strName, &_result);
	return _result;
}

inline BOOL  IDUITVItemGroup::RemoveGroupByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveGroupByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITVItemGroup::RemoveGroupByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveGroupByName(xxx_strName, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITVItemGroup::RemoveAllGroup()
{

	raw_RemoveAllGroup();
}

inline struct IDUITVItemGroup * IDUITVItemGroup::GetGroupByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_GetGroupByName(xxx_strName, &_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUITVItemGroup::GetGroupByID(long  nID  )
{
	struct IDUITVItemGroup * _result;
	raw_GetGroupByID(nID, &_result);
	return _result;
}

inline BOOL  IDUITVItemGroup::GetHaveGroup()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetHaveGroup(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITVItemGroup::SetGraphics(OLE_HANDLE  hBmp, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphics(hBmp, xxx_bRedraw  );
}

inline OLE_HANDLE  IDUITVItemGroup::GetGraphics()
{
	OLE_HANDLE  _result;
	raw_GetGraphics(&_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUITVItemGroup::InsertGroup(long  nIndex, long  nID, tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_InsertGroup(nIndex, nID, xxx_strName, &_result);
	return _result;
}

inline void IDUITVItemGroup::SetHaveCloseButton(BOOL  bHaveButton  )
{
	VARIANT_BOOL xxx_bHaveButton = bHaveButton ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHaveCloseButton(xxx_bHaveButton  );
}

inline BOOL  IDUITVItemGroup::HaveCloseButton()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_HaveCloseButton(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITVItemGroup::SetTextColor(OLE_COLOR  color  )
{

	raw_SetTextColor(color  );
}

inline void IDUITVItemGroup::SetIcon(struct IDUIImageBase * pImageBase  )
{

	raw_SetIcon(pImageBase  );
}

inline void IDUITVItemGroup::SetGroupHeight(long  nHeight  )
{

	raw_SetGroupHeight(nHeight  );
}

inline long  IDUITVItemGroup::GetGroupHeight()
{
	long  _result;
	raw_GetGroupHeight(&_result);
	return _result;
}

inline void IDUITVItemGroup::SetCheck(short  nCheck  )
{

	raw_SetCheck(nCheck  );
}

inline short  IDUITVItemGroup::GetCheck()
{
	short  _result;
	raw_GetCheck(&_result);
	return _result;
}

inline void IDUITVItemGroup::SetItemEnable(long  nIndex, BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemEnable(nIndex, xxx_bEnable  );
}

inline void IDUITVItemGroup::SetUsePureVirList(BOOL  bUse, long  nMaxCount  )
{
	VARIANT_BOOL xxx_bUse = bUse ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUsePureVirList(xxx_bUse, nMaxCount  );
}

inline void IDUITVItemGroup::ScrollTopOrBottom(BOOL  bTop  )
{
	VARIANT_BOOL xxx_bTop = bTop ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ScrollTopOrBottom(xxx_bTop  );
}

inline void IDUITVItemGroup::ScrollDistance(long  nDistance  )
{

	raw_ScrollDistance(nDistance  );
}

inline long  IDUITVItemGroup::GetCurDistance(BOOL  bTop  )
{
	VARIANT_BOOL xxx_bTop = bTop ? VARIANT_TRUE : VARIANT_FALSE;
	long  _result;
	raw_GetCurDistance(xxx_bTop, &_result);
	return _result;
}

inline BOOL  IDUITVItem::SetGraphics(enum DUILVI_STATE  eState, OLE_HANDLE  hBitmap  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphics(eState, hBitmap, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUITVItem::GetGraphics(enum DUILVI_STATE  eState  )
{
	OLE_HANDLE  _result;
	raw_GetGraphics(eState, &_result);
	return _result;
}

inline void IDUITVItem::SetHeight(long  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHeight(nHeight, xxx_bRedraw  );
}

inline long  IDUITVItem::GetHeight()
{
	long  _result;
	raw_GetHeight(&_result);
	return _result;
}

inline void IDUITVItem::Refresh()
{

	raw_Refresh();
}

inline struct IDUIUnitItem * IDUITVItem::GetUnitItem(long  nCol  )
{
	struct IDUIUnitItem * _result;
	raw_GetUnitItem(nCol, &_result);
	return _result;
}

inline void IDUITVItem::AppendItemText(short  iSubItem, tstring  szItem, tstring  szURL, BOOL  bRedraw  )
{
	_bstr_t xxx_szItem(szItem.c_str());
	_bstr_t xxx_szURL(szURL.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_AppendItemText(iSubItem, xxx_szItem, xxx_szURL, xxx_bRedraw  );
}

inline void IDUITVItem::SetCheck(BOOL  bCheck  )
{
	VARIANT_BOOL xxx_bCheck = bCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCheck(xxx_bCheck  );
}

inline void IDUITVItem::SetWidth(long  nWidth, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetWidth(nWidth, xxx_bRedraw  );
}

inline long  IDUITVItem::GetWidth()
{
	long  _result;
	raw_GetWidth(&_result);
	return _result;
}

inline void IDUITVItem::SetEnable(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnable(xxx_bEnable  );
}

inline BOOL  IDUITVItem::GetEnable()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnable(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITVItem::AppendTreeListItem(struct IDUIUnitItem * pParentItem, long  nCol, tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_AppendTreeListItem(pParentItem, nCol, xxx_strText  );
}

inline short  IDUITVItem::InsertItem(long  nItem, tstring  szItem, long  nID, BOOL  bRefresh  )
{
_bstr_t xxx_szItem(szItem.c_str());
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;
	short  _result;
	raw_InsertItem(nItem, xxx_szItem, nID, xxx_bRefresh, &_result);
	return _result;
}

inline struct IDUIUnitItem * IDUITVItem::GetChildUnitItem(long  nRow, long  nCol  )
{
	struct IDUIUnitItem * _result;
	raw_GetChildUnitItem(nRow, nCol, &_result);
	return _result;
}

inline struct IDUITVItemBase * IDUITVItem::GetAt(long  nIndex  )
{
	struct IDUITVItemBase * _result;
	raw_GetAt(nIndex, &_result);
	return _result;
}

inline BOOL  IDUIMenuBar_::SetMenuBarBack(short  nState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetMenuBarBack(nState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIMenuBar_::GetMenuBarBack(short  nState  )
{
	struct IDUIImageBase * _result;
	raw_GetMenuBarBack(nState, &_result);
	return _result;
}

inline BOOL  IDUIMenuBar_::SetItemImage(enum DUI_MENUBAR_ITEM_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIMenuBar_::GetItemImage(enum DUI_MENUBAR_ITEM_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetItemImage(eState, &_result);
	return _result;
}

inline BOOL  IDUIMenuBar_::SetItemTextStyle(enum DUI_MENUBAR_ITEM_STATE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTextStyle(eState, pTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIMenuBar_::GetItemTextStyle(enum DUI_MENUBAR_ITEM_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetItemTextStyle(eState, &_result);
	return _result;
}

inline BOOL  IDUIMenuBar_::SetItemHeight(long  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemHeight(nHeight, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIMenuBar_::GetItemHeight()
{
	long  _result;
	raw_GetItemHeight(&_result);
	return _result;
}

inline BOOL  IDUIMenuBar_::SetItemsSapce(long  nSpace, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemsSapce(nSpace, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIMenuBar_::GetItemSpace()
{
	long  _result;
	raw_GetItemSpace(&_result);
	return _result;
}

inline BOOL  IDUIMenuBar_::SetShowMore(BOOL  bShowMore, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bShowMore = bShowMore ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetShowMore(xxx_bShowMore, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar_::GetShowMore()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetShowMore(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar_::SetMenuBarHeight(long  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetMenuBarHeight(nHeight, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIMenuBar_::GetMenuBarHeight()
{
	long  _result;
	raw_GetMenuBarHeight(&_result);
	return _result;
}

inline BOOL  IDUIMenuBar_::LoadMenu(OLE_HANDLE  hMenu  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_LoadMenu(hMenu, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar_::AppendItem(OLE_HANDLE  hMenu, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendItem(hMenu, xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar_::InsertItem(OLE_HANDLE  hMenu, tstring  strText, short  nIndex  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_InsertItem(hMenu, xxx_strText, nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar_::DeleteItem(short  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteItem(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar_::ModifyItem(short  nIndex, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ModifyItem(nIndex, xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar_::SetShowMoreImage(enum DUI_MENUBAR_ITEM_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetShowMoreImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIMenuBar_::GetShowMoreImage(enum DUI_MENUBAR_ITEM_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetShowMoreImage(eState, &_result);
	return _result;
}

inline OLE_HANDLE  IDUIMenuBar_::GetMenu()
{
	OLE_HANDLE  _result;
	raw_GetMenu(&_result);
	return _result;
}

inline BOOL  IDUIMenuBar_::SetBackDrawColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackDrawColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar_::GetBackDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetBackDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar_::SetBackColor(short  nState, struct IFillColor * pColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(nState, pColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIMenuBar_::GetBackColor(short  nState  )
{
	struct IFillColor * _result;
	raw_GetBackColor(nState, &_result);
	return _result;
}

inline BOOL  IDUIMenuBar_::LoadDUIMenu(IDispatch * pDUIMenu  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_LoadDUIMenu(pDUIMenu, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIMenuBar_::GetMenuItemCount()
{
	long  _result;
	raw_GetMenuItemCount(&_result);
	return _result;
}

inline BOOL  IDUIMenuBar::SetMenuBarBack(short  nState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->SetMenuBarBack(nState, pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUIMenuBar::GetMenuBarBack(short  nState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetMenuBarBack(nState);
}

inline BOOL  IDUIMenuBar::SetItemImage(enum DUI_MENUBAR_ITEM_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->SetItemImage(eState, pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUIMenuBar::GetItemImage(enum DUI_MENUBAR_ITEM_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetItemImage(eState);
}

inline BOOL  IDUIMenuBar::SetItemTextStyle(enum DUI_MENUBAR_ITEM_STATE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->SetItemTextStyle(eState, pTextStyle, bRedraw);
}

inline struct IDUITextStyle * IDUIMenuBar::GetItemTextStyle(enum DUI_MENUBAR_ITEM_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetItemTextStyle(eState);
}

inline BOOL  IDUIMenuBar::SetItemHeight(long  nHeight, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->SetItemHeight(nHeight, bRedraw);
}

inline long  IDUIMenuBar::GetItemHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetItemHeight();
}

inline BOOL  IDUIMenuBar::SetItemsSapce(long  nSpace, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->SetItemsSapce(nSpace, bRedraw);
}

inline long  IDUIMenuBar::GetItemSpace()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetItemSpace();
}

inline BOOL  IDUIMenuBar::SetShowMore(BOOL  bShowMore, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->SetShowMore(bShowMore, bRedraw);
}

inline BOOL  IDUIMenuBar::GetShowMore()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetShowMore();
}

inline BOOL  IDUIMenuBar::SetMenuBarHeight(long  nHeight, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->SetMenuBarHeight(nHeight, bRedraw);
}

inline long  IDUIMenuBar::GetMenuBarHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetMenuBarHeight();
}

inline BOOL  IDUIMenuBar::LoadMenu(OLE_HANDLE  hMenu  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->LoadMenu(hMenu);
}

inline BOOL  IDUIMenuBar::AppendItem(OLE_HANDLE  hMenu, tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->AppendItem(hMenu, strText);
}

inline BOOL  IDUIMenuBar::InsertItem(OLE_HANDLE  hMenu, tstring  strText, short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->InsertItem(hMenu, strText, nIndex);
}

inline BOOL  IDUIMenuBar::DeleteItem(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->DeleteItem(nIndex);
}

inline BOOL  IDUIMenuBar::ModifyItem(short  nIndex, tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->ModifyItem(nIndex, strText);
}

inline BOOL  IDUIMenuBar::SetShowMoreImage(enum DUI_MENUBAR_ITEM_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->SetShowMoreImage(eState, pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUIMenuBar::GetShowMoreImage(enum DUI_MENUBAR_ITEM_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetShowMoreImage(eState);
}

inline OLE_HANDLE  IDUIMenuBar::GetMenu()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetMenu();
}

inline BOOL  IDUIMenuBar::SetBackDrawColor(BOOL  bDrawColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->SetBackDrawColor(bDrawColor, bRedraw);
}

inline BOOL  IDUIMenuBar::GetBackDrawColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetBackDrawColor();
}

inline BOOL  IDUIMenuBar::SetBackColor(short  nState, struct IFillColor * pColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->SetBackColor(nState, pColor, bRedraw);
}

inline struct IFillColor * IDUIMenuBar::GetBackColor(short  nState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetBackColor(nState);
}

inline BOOL  IDUIMenuBar::LoadDUIMenu(IDispatch * pDUIMenu  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->LoadDUIMenu(pDUIMenu);
}

inline long  IDUIMenuBar::GetMenuItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMenuBar_*)m_pCtrl)->GetMenuItemCount();
}

inline void IDUIProgressbar_::SetRange(short  nLower, short  nUpper  )
{

	raw_SetRange(nLower, nUpper  );
}

inline void IDUIProgressbar_::GetRange(short * pnLower, short * pnUpper  )
{

	raw_GetRange(pnLower, pnUpper  );
}

inline short  IDUIProgressbar_::SetPos(short  nPos  )
{
	short  _result;
	raw_SetPos(nPos, &_result);
	return _result;
}

inline short  IDUIProgressbar_::GetPos()
{
	short  _result;
	raw_GetPos(&_result);
	return _result;
}

inline short  IDUIProgressbar_::SetStep(short  nStep  )
{
	short  _result;
	raw_SetStep(nStep, &_result);
	return _result;
}

inline short  IDUIProgressbar_::StepIt()
{
	short  _result;
	raw_StepIt(&_result);
	return _result;
}

inline short  IDUIProgressbar_::OffsetPos(short  nStep  )
{
	short  _result;
	raw_OffsetPos(nStep, &_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::IsHorz()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsHorz(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::SetHorz(BOOL  bHorz  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetHorz(xxx_bHorz, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::IsDrawText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawText(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::SetDrawText(BOOL  bDrawText  )
{
	VARIANT_BOOL xxx_bDrawText = bDrawText ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawText(xxx_bDrawText, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::IsDrawBorder()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawBorder(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::IsBorderDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsBorderDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::SetBorderDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderDrawColor(xxx_bDrawColor, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::IsBackDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsBackDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::SetBackDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackDrawColor(xxx_bDrawColor, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::IsClientDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsClientDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::SetClientDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetClientDrawColor(xxx_bDrawColor, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIProgressbar_::GetBorderImage()
{
	struct IDUIImageBase * _result;
	raw_GetBorderImage(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetBorderImage(struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderImage(pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIProgressbar_::GetBorderColor()
{
	struct IFillColor * _result;
	raw_GetBorderColor(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetBorderColor(struct IFillColor * pColor  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderColor(pColor, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIProgressbar_::GetBackImage()
{
	struct IDUIImageBase * _result;
	raw_GetBackImage(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetBackImage(struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIProgressbar_::GetBackColor()
{
	struct IFillColor * _result;
	raw_GetBackColor(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetBackColor(struct IFillColor * pColor  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(pColor, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIProgressbar_::GetClientImage()
{
	struct IDUIImageBase * _result;
	raw_GetClientImage(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetClientImage(struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetClientImage(pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIProgressbar_::GetClientColor()
{
	struct IFillColor * _result;
	raw_GetClientColor(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetClientColor(struct IFillColor * pColor  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetClientColor(pColor, &_result);
	return _result ? TRUE : FALSE;
}

inline unsigned long  IDUIProgressbar_::GetBorderWidth()
{
	unsigned long  _result;
	raw_GetBorderWidth(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetBorderWidth(unsigned long  nWidth  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderWidth(nWidth, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIProgressbar_::GetClientOffset(unsigned long * Leftoffset, unsigned long * Topoffset, unsigned long * Rightoffset, unsigned long * Bottomoffset  )
{

	raw_GetClientOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset  );
}

inline BOOL  IDUIProgressbar_::SetClientOffset(unsigned long  Leftoffset, unsigned long  Topoffset, unsigned long  Rightoffset, unsigned long  Bottomoffset  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetClientOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIProgressbar_::GetTextStyle()
{
	struct IDUITextStyle * _result;
	raw_GetTextStyle(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetTextStyle(struct IDUITextStyle * pTextStyle  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextStyle(pTextStyle, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIProgressbar_::GetTextFormat()
{
	BSTR _result = NULL;
	raw_GetTextFormat(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUIProgressbar_::SetTextFormat(tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextFormat(xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIProgressbar_::GetForeImage()
{
	struct IDUIImageBase * _result;
	raw_GetForeImage(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetForeImage(struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetForeImage(pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIProgressbar_::GetForeColor()
{
	struct IFillColor * _result;
	raw_GetForeColor(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetForeColor(struct IFillColor * pColor  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetForeColor(pColor, &_result);
	return _result ? TRUE : FALSE;
}

inline unsigned long  IDUIProgressbar_::GetForeWidth()
{
	unsigned long  _result;
	raw_GetForeWidth(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetForeWidth(unsigned long  nWidth  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetForeWidth(nWidth, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::SetClientWidth(unsigned long  nWidth  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetClientWidth(nWidth, &_result);
	return _result ? TRUE : FALSE;
}

inline unsigned long  IDUIProgressbar_::GetClientWidth()
{
	unsigned long  _result;
	raw_GetClientWidth(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetSpeed(unsigned long  nSpeed  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSpeed(nSpeed, &_result);
	return _result ? TRUE : FALSE;
}

inline unsigned long  IDUIProgressbar_::GetSpeed()
{
	unsigned long  _result;
	raw_GetSpeed(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetElapse(unsigned long  nElapse  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetElapse(nElapse, &_result);
	return _result ? TRUE : FALSE;
}

inline unsigned long  IDUIProgressbar_::GetElapse()
{
	unsigned long  _result;
	raw_GetElapse(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::StartAnimate()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_StartAnimate(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::StopAnimate()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_StopAnimate(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::SetRunOnce(BOOL  bRunOnce  )
{
	VARIANT_BOOL xxx_bRunOnce = bRunOnce ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRunOnce(xxx_bRunOnce, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::IsRunOnce()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsRunOnce(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::IsForeDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsForeDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar_::SetForeDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetForeDrawColor(xxx_bDrawColor, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIProgressbar_::GetForeOffset(unsigned long * Leftoffset, unsigned long * Topoffset, unsigned long * Rightoffset, unsigned long * Bottomoffset  )
{

	raw_GetForeOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset  );
}

inline BOOL  IDUIProgressbar_::SetForeOffset(unsigned long  Leftoffset, unsigned long  Topoffset, unsigned long  Rightoffset, unsigned long  Bottomoffset  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetForeOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset, &_result);
	return _result ? TRUE : FALSE;
}

inline enum PROGRESSBAR_STYLE  IDUIProgressbar_::GetStyle()
{
	enum PROGRESSBAR_STYLE  _result;
	raw_GetStyle(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar_::SetStyle(enum PROGRESSBAR_STYLE  Style  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStyle(Style, &_result);
	return _result ? TRUE : FALSE;
}

inline void  IDUIProgressbar::SetRange(short  nLower, short  nUpper  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetRange(nLower, nUpper);
}

inline void  IDUIProgressbar::GetRange(short * pnLower, short * pnUpper  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetRange(pnLower, pnUpper);
}

inline short  IDUIProgressbar::SetPos(short  nPos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetPos(nPos);
}

inline short  IDUIProgressbar::GetPos()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetPos();
}

inline short  IDUIProgressbar::SetStep(short  nStep  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetStep(nStep);
}

inline short  IDUIProgressbar::StepIt()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->StepIt();
}

inline short  IDUIProgressbar::OffsetPos(short  nStep  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->OffsetPos(nStep);
}

inline BOOL  IDUIProgressbar::IsHorz()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->IsHorz();
}

inline BOOL  IDUIProgressbar::SetHorz(BOOL  bHorz  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetHorz(bHorz);
}

inline BOOL  IDUIProgressbar::IsDrawText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->IsDrawText();
}

inline BOOL  IDUIProgressbar::SetDrawText(BOOL  bDrawText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetDrawText(bDrawText);
}

inline BOOL  IDUIProgressbar::IsDrawBorder()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->IsDrawBorder();
}

inline BOOL  IDUIProgressbar::IsBorderDrawColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->IsBorderDrawColor();
}

inline BOOL  IDUIProgressbar::SetBorderDrawColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetBorderDrawColor(bDrawColor);
}

inline BOOL  IDUIProgressbar::IsBackDrawColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->IsBackDrawColor();
}

inline BOOL  IDUIProgressbar::SetBackDrawColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetBackDrawColor(bDrawColor);
}

inline BOOL  IDUIProgressbar::IsClientDrawColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->IsClientDrawColor();
}

inline BOOL  IDUIProgressbar::SetClientDrawColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetClientDrawColor(bDrawColor);
}

inline struct IDUIImageBase * IDUIProgressbar::GetBorderImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetBorderImage();
}

inline BOOL  IDUIProgressbar::SetBorderImage(struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetBorderImage(pImageBase);
}

inline struct IFillColor * IDUIProgressbar::GetBorderColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetBorderColor();
}

inline BOOL  IDUIProgressbar::SetBorderColor(struct IFillColor * pColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetBorderColor(pColor);
}

inline struct IDUIImageBase * IDUIProgressbar::GetBackImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetBackImage();
}

inline BOOL  IDUIProgressbar::SetBackImage(struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetBackImage(pImageBase);
}

inline struct IFillColor * IDUIProgressbar::GetBackColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetBackColor();
}

inline BOOL  IDUIProgressbar::SetBackColor(struct IFillColor * pColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetBackColor(pColor);
}

inline struct IDUIImageBase * IDUIProgressbar::GetClientImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetClientImage();
}

inline BOOL  IDUIProgressbar::SetClientImage(struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetClientImage(pImageBase);
}

inline struct IFillColor * IDUIProgressbar::GetClientColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetClientColor();
}

inline BOOL  IDUIProgressbar::SetClientColor(struct IFillColor * pColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetClientColor(pColor);
}

inline unsigned long  IDUIProgressbar::GetBorderWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetBorderWidth();
}

inline BOOL  IDUIProgressbar::SetBorderWidth(unsigned long  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetBorderWidth(nWidth);
}

inline void  IDUIProgressbar::GetClientOffset(unsigned long * Leftoffset, unsigned long * Topoffset, unsigned long * Rightoffset, unsigned long * Bottomoffset  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetClientOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset);
}

inline BOOL  IDUIProgressbar::SetClientOffset(unsigned long  Leftoffset, unsigned long  Topoffset, unsigned long  Rightoffset, unsigned long  Bottomoffset  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetClientOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset);
}

inline struct IDUITextStyle * IDUIProgressbar::GetTextStyle()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetTextStyle();
}

inline BOOL  IDUIProgressbar::SetTextStyle(struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetTextStyle(pTextStyle);
}

inline tstring  IDUIProgressbar::GetTextFormat()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetTextFormat();
}

inline BOOL  IDUIProgressbar::SetTextFormat(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetTextFormat(strText);
}

inline struct IDUIImageBase * IDUIProgressbar::GetForeImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetForeImage();
}

inline BOOL  IDUIProgressbar::SetForeImage(struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetForeImage(pImageBase);
}

inline struct IFillColor * IDUIProgressbar::GetForeColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetForeColor();
}

inline BOOL  IDUIProgressbar::SetForeColor(struct IFillColor * pColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetForeColor(pColor);
}

inline unsigned long  IDUIProgressbar::GetForeWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetForeWidth();
}

inline BOOL  IDUIProgressbar::SetForeWidth(unsigned long  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetForeWidth(nWidth);
}

inline BOOL  IDUIProgressbar::SetClientWidth(unsigned long  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetClientWidth(nWidth);
}

inline unsigned long  IDUIProgressbar::GetClientWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetClientWidth();
}

inline BOOL  IDUIProgressbar::SetSpeed(unsigned long  nSpeed  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetSpeed(nSpeed);
}

inline unsigned long  IDUIProgressbar::GetSpeed()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetSpeed();
}

inline BOOL  IDUIProgressbar::SetElapse(unsigned long  nElapse  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetElapse(nElapse);
}

inline unsigned long  IDUIProgressbar::GetElapse()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetElapse();
}

inline BOOL  IDUIProgressbar::StartAnimate()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->StartAnimate();
}

inline BOOL  IDUIProgressbar::StopAnimate()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->StopAnimate();
}

inline BOOL  IDUIProgressbar::SetRunOnce(BOOL  bRunOnce  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetRunOnce(bRunOnce);
}

inline BOOL  IDUIProgressbar::IsRunOnce()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->IsRunOnce();
}

inline BOOL  IDUIProgressbar::IsForeDrawColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->IsForeDrawColor();
}

inline BOOL  IDUIProgressbar::SetForeDrawColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetForeDrawColor(bDrawColor);
}

inline void  IDUIProgressbar::GetForeOffset(unsigned long * Leftoffset, unsigned long * Topoffset, unsigned long * Rightoffset, unsigned long * Bottomoffset  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetForeOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset);
}

inline BOOL  IDUIProgressbar::SetForeOffset(unsigned long  Leftoffset, unsigned long  Topoffset, unsigned long  Rightoffset, unsigned long  Bottomoffset  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetForeOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset);
}

inline enum PROGRESSBAR_STYLE  IDUIProgressbar::GetStyle()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->GetStyle();
}

inline BOOL  IDUIProgressbar::SetStyle(enum PROGRESSBAR_STYLE  Style  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIProgressbar_*)m_pCtrl)->SetStyle(Style);
}

inline long  IDUIScrollBar_::GetScrollPos()
{
	long  _result;
	raw_GetScrollPos(&_result);
	return _result;
}

inline long  IDUIScrollBar_::SetScrollPos(long  nPos, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	long  _result;
	raw_SetScrollPos(nPos, xxx_bRedraw, &_result);
	return _result;
}

inline void IDUIScrollBar_::GetScrollRange(long * lpMin, long * lpMax  )
{

	raw_GetScrollRange(lpMin, lpMax  );
}

inline void IDUIScrollBar_::SetScrollRange(long  nMin, long  nMax, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetScrollRange(nMin, nMax, xxx_bRedraw  );
}

inline void IDUIScrollBar_::ShowScrollBar(BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ShowScrollBar(xxx_bShow  );
}

inline void IDUIScrollBar_::EnableScrollBar(BOOL  bEnabled  )
{
	VARIANT_BOOL xxx_bEnabled = bEnabled ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableScrollBar(xxx_bEnabled  );
}

inline BOOL  IDUIScrollBar_::SetScrollInfo(struct DUISCROLLINFO * lpScrollInfo, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetScrollInfo(lpScrollInfo, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIScrollBar_::GetScrollInfo(struct DUISCROLLINFO * lpScrollInfo, enum DUISB_MASK  sifMask  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetScrollInfo(lpScrollInfo, sifMask, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIScrollBar_::GetScrollLimit()
{
	long  _result;
	raw_GetScrollLimit(&_result);
	return _result;
}

inline BOOL  IDUIScrollBar_::GetScrollBarInfo(struct DUISCROLLBARINFO * pScrollBarInfo  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetScrollBarInfo(pScrollBarInfo, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIScrollBar_::SetBackImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(xxx_bHorz, eState, pImage, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIScrollBar_::GetBackImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetBackImage(xxx_bHorz, eState, &_result);
	return _result;
}

inline BOOL  IDUIScrollBar_::SetLeftUpImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetLeftUpImage(xxx_bHorz, eState, pImage, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIScrollBar_::GetLeftUpImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetLeftUpImage(xxx_bHorz, eState, &_result);
	return _result;
}

inline BOOL  IDUIScrollBar_::SetRightDownImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRightDownImage(xxx_bHorz, eState, pImage, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIScrollBar_::GetRightDownImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetRightDownImage(xxx_bHorz, eState, &_result);
	return _result;
}

inline BOOL  IDUIScrollBar_::SetThumbImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbImage(xxx_bHorz, eState, pImage, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIScrollBar_::GetThumbImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetThumbImage(xxx_bHorz, eState, &_result);
	return _result;
}

inline BOOL  IDUIScrollBar_::SetThumbTickImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbTickImage(xxx_bHorz, eState, pImage, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIScrollBar_::GetThumbTickImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetThumbTickImage(xxx_bHorz, eState, &_result);
	return _result;
}

inline void IDUIScrollBar_::SetHorz(BOOL  bHorz  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHorz(xxx_bHorz  );
}

inline BOOL  IDUIScrollBar_::IsHorz()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsHorz(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIScrollBar_::SetPageSize(long  nPageSize  )
{

	raw_SetPageSize(nPageSize  );
}

inline long  IDUIScrollBar_::GetPageSize()
{
	long  _result;
	raw_GetPageSize(&_result);
	return _result;
}

inline void IDUIScrollBar_::SetOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	raw_SetOwnerCtrl(pOwnerCtrl  );
}

inline OLE_HANDLE  IDUIScrollBar_::GetOwnerCtrl()
{
	OLE_HANDLE  _result;
	raw_GetOwnerCtrl(&_result);
	return _result;
}

inline void IDUIScrollBar_::ReDraw()
{

	raw_ReDraw();
}

inline void IDUIScrollBar_::SetHorzUpButtonWidth(long  nHorzUpButtonWidth  )
{

	raw_SetHorzUpButtonWidth(nHorzUpButtonWidth  );
}

inline void IDUIScrollBar_::SetHorzDownButtonWidth(long  nHorzDownButtonWidth  )
{

	raw_SetHorzDownButtonWidth(nHorzDownButtonWidth  );
}

inline void IDUIScrollBar_::SetVertUpButtonHeight(long  nVertUpButtonHeight  )
{

	raw_SetVertUpButtonHeight(nVertUpButtonHeight  );
}

inline void IDUIScrollBar_::SetVertDownButtonHeight(long  nVertDownButtonHeight  )
{

	raw_SetVertDownButtonHeight(nVertDownButtonHeight  );
}

inline long  IDUIScrollBar_::GetHorzUpButtonWidth()
{
	long  _result;
	raw_GetHorzUpButtonWidth(&_result);
	return _result;
}

inline long  IDUIScrollBar_::GetHorzDownButtonWidth()
{
	long  _result;
	raw_GetHorzDownButtonWidth(&_result);
	return _result;
}

inline long  IDUIScrollBar_::GetVertUpButtonHeight()
{
	long  _result;
	raw_GetVertUpButtonHeight(&_result);
	return _result;
}

inline long  IDUIScrollBar_::GetVertDownButtonHeight()
{
	long  _result;
	raw_GetVertDownButtonHeight(&_result);
	return _result;
}

inline void IDUIScrollBar_::SetFadeInOut(BOOL  bFadeInOut  )
{
	VARIANT_BOOL xxx_bFadeInOut = bFadeInOut ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetFadeInOut(xxx_bFadeInOut  );
}

inline BOOL  IDUIScrollBar_::GetFadeInOut()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetFadeInOut(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIScrollBar_::StartFadeInOut(BOOL  bFadeIn  )
{
	VARIANT_BOOL xxx_bFadeIn = bFadeIn ? VARIANT_TRUE : VARIANT_FALSE;

	raw_StartFadeInOut(xxx_bFadeIn  );
}

inline void IDUIScrollBar_::EndFadeInOut()
{

	raw_EndFadeInOut();
}

inline void IDUIScrollBar_::SetFadeInOutStep(int  nStep  )
{

	raw_SetFadeInOutStep(nStep  );
}

inline long  IDUIScrollBar_::SetScrollPosEvent(long  nPos, BOOL  bRedraw, BOOL  bEvent  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bEvent = bEvent ? VARIANT_TRUE : VARIANT_FALSE;
	long  _result;
	raw_SetScrollPosEvent(nPos, xxx_bRedraw, xxx_bEvent, &_result);
	return _result;
}

inline long  IDUIScrollBar_::GetThumbMin()
{
	long  _result;
	raw_GetThumbMin(&_result);
	return _result;
}

inline void IDUIScrollBar_::SetThumnMin(long  nMinPos  )
{

	raw_SetThumnMin(nMinPos  );
}

inline long  IDUIScrollBar_::SetScrollPosNoNotify(long  nPos, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	long  _result;
	raw_SetScrollPosNoNotify(nPos, xxx_bRedraw, &_result);
	return _result;
}

inline void IDUIScrollBar_::SetMoveSpeed(long  nMoveSpeed  )
{

	raw_SetMoveSpeed(nMoveSpeed  );
}

inline long  IDUIScrollBar::GetScrollPos()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetScrollPos();
}

inline long  IDUIScrollBar::SetScrollPos(long  nPos, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetScrollPos(nPos, bRedraw);
}

inline void  IDUIScrollBar::GetScrollRange(long * lpMin, long * lpMax  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetScrollRange(lpMin, lpMax);
}

inline void  IDUIScrollBar::SetScrollRange(long  nMin, long  nMax, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetScrollRange(nMin, nMax, bRedraw);
}

inline void  IDUIScrollBar::ShowScrollBar(BOOL  bShow  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->ShowScrollBar(bShow);
}

inline void  IDUIScrollBar::EnableScrollBar(BOOL  bEnabled  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->EnableScrollBar(bEnabled);
}

inline BOOL  IDUIScrollBar::SetScrollInfo(struct DUISCROLLINFO * lpScrollInfo, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetScrollInfo(lpScrollInfo, bRedraw);
}

inline BOOL  IDUIScrollBar::GetScrollInfo(struct DUISCROLLINFO * lpScrollInfo, enum DUISB_MASK  sifMask  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetScrollInfo(lpScrollInfo, sifMask);
}

inline long  IDUIScrollBar::GetScrollLimit()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetScrollLimit();
}

inline BOOL  IDUIScrollBar::GetScrollBarInfo(struct DUISCROLLBARINFO * pScrollBarInfo  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetScrollBarInfo(pScrollBarInfo);
}

inline BOOL  IDUIScrollBar::SetBackImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetBackImage(bHorz, eState, pImage);
}

inline struct IDUIImageBase * IDUIScrollBar::GetBackImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetBackImage(bHorz, eState);
}

inline BOOL  IDUIScrollBar::SetLeftUpImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetLeftUpImage(bHorz, eState, pImage);
}

inline struct IDUIImageBase * IDUIScrollBar::GetLeftUpImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetLeftUpImage(bHorz, eState);
}

inline BOOL  IDUIScrollBar::SetRightDownImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetRightDownImage(bHorz, eState, pImage);
}

inline struct IDUIImageBase * IDUIScrollBar::GetRightDownImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetRightDownImage(bHorz, eState);
}

inline BOOL  IDUIScrollBar::SetThumbImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetThumbImage(bHorz, eState, pImage);
}

inline struct IDUIImageBase * IDUIScrollBar::GetThumbImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetThumbImage(bHorz, eState);
}

inline BOOL  IDUIScrollBar::SetThumbTickImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetThumbTickImage(bHorz, eState, pImage);
}

inline struct IDUIImageBase * IDUIScrollBar::GetThumbTickImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetThumbTickImage(bHorz, eState);
}

inline void  IDUIScrollBar::SetHorz(BOOL  bHorz  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetHorz(bHorz);
}

inline BOOL  IDUIScrollBar::IsHorz()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->IsHorz();
}

inline void  IDUIScrollBar::SetPageSize(long  nPageSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetPageSize(nPageSize);
}

inline long  IDUIScrollBar::GetPageSize()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetPageSize();
}

inline void  IDUIScrollBar::SetOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetOwnerCtrl(pOwnerCtrl);
}

inline OLE_HANDLE  IDUIScrollBar::GetOwnerCtrl()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetOwnerCtrl();
}

inline void  IDUIScrollBar::ReDraw()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->ReDraw();
}

inline void  IDUIScrollBar::SetHorzUpButtonWidth(long  nHorzUpButtonWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetHorzUpButtonWidth(nHorzUpButtonWidth);
}

inline void  IDUIScrollBar::SetHorzDownButtonWidth(long  nHorzDownButtonWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetHorzDownButtonWidth(nHorzDownButtonWidth);
}

inline void  IDUIScrollBar::SetVertUpButtonHeight(long  nVertUpButtonHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetVertUpButtonHeight(nVertUpButtonHeight);
}

inline void  IDUIScrollBar::SetVertDownButtonHeight(long  nVertDownButtonHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetVertDownButtonHeight(nVertDownButtonHeight);
}

inline long  IDUIScrollBar::GetHorzUpButtonWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetHorzUpButtonWidth();
}

inline long  IDUIScrollBar::GetHorzDownButtonWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetHorzDownButtonWidth();
}

inline long  IDUIScrollBar::GetVertUpButtonHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetVertUpButtonHeight();
}

inline long  IDUIScrollBar::GetVertDownButtonHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetVertDownButtonHeight();
}

inline void  IDUIScrollBar::SetFadeInOut(BOOL  bFadeInOut  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetFadeInOut(bFadeInOut);
}

inline BOOL  IDUIScrollBar::GetFadeInOut()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetFadeInOut();
}

inline void  IDUIScrollBar::StartFadeInOut(BOOL  bFadeIn  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->StartFadeInOut(bFadeIn);
}

inline void  IDUIScrollBar::EndFadeInOut()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->EndFadeInOut();
}

inline void  IDUIScrollBar::SetFadeInOutStep(int  nStep  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetFadeInOutStep(nStep);
}

inline long  IDUIScrollBar::SetScrollPosEvent(long  nPos, BOOL  bRedraw, BOOL  bEvent  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetScrollPosEvent(nPos, bRedraw, bEvent);
}

inline long  IDUIScrollBar::GetThumbMin()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->GetThumbMin();
}

inline void  IDUIScrollBar::SetThumnMin(long  nMinPos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetThumnMin(nMinPos);
}

inline long  IDUIScrollBar::SetScrollPosNoNotify(long  nPos, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetScrollPosNoNotify(nPos, bRedraw);
}

inline void  IDUIScrollBar::SetMoveSpeed(long  nMoveSpeed  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollBar_*)m_pCtrl)->SetMoveSpeed(nMoveSpeed);
}

inline void IDUIScrollContainer_::OnWheel(long  zDelta  )
{

	raw_OnWheel(zDelta  );
}

inline void  IDUIScrollContainer::OnWheel(long  zDelta  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIScrollContainer_*)m_pCtrl)->OnWheel(zDelta);
}

inline BOOL  IDUISliderbar_::SetSliderType(enum DUI_SLIDERCTRLTYPE  eSliderType, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSliderType(eSliderType, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline enum DUI_SLIDERCTRLTYPE  IDUISliderbar_::GetSliderType()
{
	enum DUI_SLIDERCTRLTYPE  _result;
	raw_GetSliderType(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetChannelImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetChannelImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar_::GetChannelImage()
{
	struct IDUIImageBase * _result;
	raw_GetChannelImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetHorzSliderCtrl(BOOL  bHorz, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetHorzSliderCtrl(xxx_bHorz, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::GetIsHorzSliderCtrl()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsHorzSliderCtrl(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetDrawChannelColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawChannelColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::GetIsDrawChannelColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsDrawChannelColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetChannelBorderColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetChannelBorderColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar_::GetChannelBorderColor()
{
	struct IFillColor * _result;
	raw_GetChannelBorderColor(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetChannelColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetChannelColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar_::GetChannelColor()
{
	struct IFillColor * _result;
	raw_GetChannelColor(&_result);
	return _result;
}

inline short  IDUISliderbar_::GetChannelHeight()
{
	short  _result;
	raw_GetChannelHeight(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetChannelHeight(short  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetChannelHeight(nHeight, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUISliderbar_::GetBorderWidth()
{
	short  _result;
	raw_GetBorderWidth(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetBorderWidth(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderWidth(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISliderbar_::GetRange(long * pnMin, long * pnMax  )
{

	raw_GetRange(pnMin, pnMax  );
}

inline BOOL  IDUISliderbar_::SetRange(long  nMin, long  nMax, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRange(nMin, nMax, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetRangeMin()
{
	long  _result;
	raw_GetRangeMin(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetRangeMin(long  nMin, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRangeMin(nMin, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetRangeMax()
{
	long  _result;
	raw_GetRangeMax(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetRangeMax(long  nMax, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRangeMax(nMax, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetDrawThumbColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawThumbColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::GetIsDrawThumbColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsDrawThumbColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetThumbColor(enum DUI_BUTTONSTATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbColor(eState, pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar_::GetThumbColor(enum DUI_BUTTONSTATE  eState  )
{
	struct IFillColor * _result;
	raw_GetThumbColor(eState, &_result);
	return _result;
}

inline short  IDUISliderbar_::GetThumbHeight()
{
	short  _result;
	raw_GetThumbHeight(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetThumbHeight(short  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbHeight(nHeight, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUISliderbar_::GetThumbWidth()
{
	short  _result;
	raw_GetThumbWidth(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetThumbWidth(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbWidth(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetThumbImage(enum DUI_BUTTONSTATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar_::GetThumbImage(enum DUI_BUTTONSTATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetThumbImage(eState, &_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetTooltip(tstring  strTooltip, BOOL  bRedraw  )
{
_bstr_t xxx_strTooltip(strTooltip.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTooltip(xxx_strTooltip, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUISliderbar_::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUISliderbar_::SetPointType(enum DUI_POINTTYPE  eTickType, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetPointType(eTickType, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline enum DUI_POINTTYPE  IDUISliderbar_::GetPointType()
{
	enum DUI_POINTTYPE  _result;
	raw_GetPointType(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetTickMarks(BOOL  bTickmarks, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bTickmarks = bTickmarks ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTickMarks(xxx_bTickmarks, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::GetIsTickMarks()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsTickMarks(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetAutoTics(BOOL  bAutoTics, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bAutoTics = bAutoTics ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetAutoTics(xxx_bAutoTics, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::GetIsAutoTics()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsAutoTics(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetTickImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTickImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar_::GetTickImage()
{
	struct IDUIImageBase * _result;
	raw_GetTickImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetTickColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTickColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar_::GetTickColor()
{
	struct IFillColor * _result;
	raw_GetTickColor(&_result);
	return _result;
}

inline short  IDUISliderbar_::GetLineLength()
{
	short  _result;
	raw_GetLineLength(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetLineLength(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetLineLength(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUISliderbar_::GetLineWidth()
{
	short  _result;
	raw_GetLineWidth(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetLineWidth(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetLineWidth(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUISliderbar_::GetLineSpace()
{
	short  _result;
	raw_GetLineSpace(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetLineSpace(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetLineSpace(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetTicFreg()
{
	long  _result;
	raw_GetTicFreg(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetTicFreg(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTicFreg(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetDrawSelColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawSelColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::GetIsDrawSelColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsDrawSelColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetSelectionImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelectionImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar_::GetSelectionImage()
{
	struct IDUIImageBase * _result;
	raw_GetSelectionImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetSelectionColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelectionColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar_::GetSelectionColor()
{
	struct IFillColor * _result;
	raw_GetSelectionColor(&_result);
	return _result;
}

inline void IDUISliderbar_::GetSelection(long * pnMin, long * pnMax  )
{

	raw_GetSelection(pnMin, pnMax  );
}

inline BOOL  IDUISliderbar_::SetSelection(long  nMin, long  nMax, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelection(nMin, nMax, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetSelRangeMin()
{
	long  _result;
	raw_GetSelRangeMin(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetSelRangeMin(long  value, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelRangeMin(value, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetSelRangeMax()
{
	long  _result;
	raw_GetSelRangeMax(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetSelRangeMax(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelRangeMax(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetSelectionHeight()
{
	long  _result;
	raw_GetSelectionHeight(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetSelectionHeight(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelectionHeight(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetVirtualThumb(BOOL  bVirtual, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bVirtual = bVirtual ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetVirtualThumb(xxx_bVirtual, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::GetIsVirtualThumb()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsVirtualThumb(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetVirtualThumbImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetVirtualThumbImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar_::GetVirtualThumbImage()
{
	struct IDUIImageBase * _result;
	raw_GetVirtualThumbImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetDrawStateColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawStateColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::GetIsDrawStateColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsDrawStateColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetStateImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar_::GetStateImage()
{
	struct IDUIImageBase * _result;
	raw_GetStateImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetStateColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar_::GetStateColor()
{
	struct IFillColor * _result;
	raw_GetStateColor(&_result);
	return _result;
}

inline long  IDUISliderbar_::GetStateHeight()
{
	long  _result;
	raw_GetStateHeight(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetStateHeight(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateHeight(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISliderbar_::GetSpace(long * pnSpaceStart, long * pnSpaceEnd  )
{

	raw_GetSpace(pnSpaceStart, pnSpaceEnd  );
}

inline BOOL  IDUISliderbar_::SetSpace(long  nSpaceStart, long  nSpaceEnd, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSpace(nSpaceStart, nSpaceEnd, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetSpaceStart()
{
	long  _result;
	raw_GetSpaceStart(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetSpaceStart(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSpaceStart(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetSpaceEnd()
{
	long  _result;
	raw_GetSpaceEnd(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetSpaceEnd(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSpaceEnd(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISliderbar_::GetStateSpace(long * pnSpaceStart, long * pnSpaceEnd  )
{

	raw_GetStateSpace(pnSpaceStart, pnSpaceEnd  );
}

inline BOOL  IDUISliderbar_::SetStateSpace(long  nSpaceStart, long  nSpaceEnd, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateSpace(nSpaceStart, nSpaceEnd, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetStateSpaceStart()
{
	long  _result;
	raw_GetStateSpaceStart(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetStateSpaceStart(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateSpaceStart(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetStateSpaceEnd()
{
	long  _result;
	raw_GetStateSpaceEnd(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetStateSpaceEnd(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateSpaceEnd(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUISliderbar_::SetEnableSelecton(BOOL  bEnableSel, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bEnableSel = bEnableSel ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	short  _result;
	raw_SetEnableSelecton(xxx_bEnableSel, xxx_bRedraw, &_result);
	return _result;
}

inline BOOL  IDUISliderbar_::GetIsEnableSelecton()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsEnableSelecton(&_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetPos()
{
	long  _result;
	raw_GetPos(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetPos(long  nPos  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetPos(nPos, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetTic(long  nTic  )
{
	long  _result;
	raw_GetTic(nTic, &_result);
	return _result;
}

inline long  IDUISliderbar_::GetTicPos(long  nTic  )
{
	long  _result;
	raw_GetTicPos(nTic, &_result);
	return _result;
}

inline long  IDUISliderbar_::GetTicArray()
{
	long  _result;
	raw_GetTicArray(&_result);
	return _result;
}

inline long  IDUISliderbar_::GetNumTics()
{
	long  _result;
	raw_GetNumTics(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetTic(long  nTic  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTic(nTic, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::ClearTics(BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ClearTics(xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::ClearSel(BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ClearSel(xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::SetLineSize(long  nSize  )
{
	long  _result;
	raw_SetLineSize(nSize, &_result);
	return _result;
}

inline long  IDUISliderbar_::GetLineSize()
{
	long  _result;
	raw_GetLineSize(&_result);
	return _result;
}

inline long  IDUISliderbar_::SetPageSize(long  nSize  )
{
	long  _result;
	raw_SetPageSize(nSize, &_result);
	return _result;
}

inline long  IDUISliderbar_::GetPageSize()
{
	long  _result;
	raw_GetPageSize(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetDrawFrontColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawFrontColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::GetIsDrawFrontColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsDrawFrontColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetFrontImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetFrontImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar_::GetFrontImage()
{
	struct IDUIImageBase * _result;
	raw_GetFrontImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetFrontColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetFrontColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar_::GetFrontColor()
{
	struct IFillColor * _result;
	raw_GetFrontColor(&_result);
	return _result;
}

inline long  IDUISliderbar_::GetFrontHeight()
{
	long  _result;
	raw_GetFrontHeight(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetFrontHeight(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetFrontHeight(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar_::GetStatePos()
{
	long  _result;
	raw_GetStatePos(&_result);
	return _result;
}

inline BOOL  IDUISliderbar_::SetStatePos(long  nPos  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStatePos(nPos, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::SetEnabledState(BOOL  bEnabled, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bEnabled = bEnabled ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetEnabledState(xxx_bEnabled, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::GetIsEnabledState()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsEnabledState(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar_::IsStepProgress()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsStepProgress(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISliderbar_::SetStepProgress(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetStepProgress(xxx_bEnable  );
}

inline BOOL  IDUISliderbar::SetSliderType(enum DUI_SLIDERCTRLTYPE  eSliderType, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetSliderType(eSliderType, bRedraw);
}

inline enum DUI_SLIDERCTRLTYPE  IDUISliderbar::GetSliderType()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetSliderType();
}

inline BOOL  IDUISliderbar::SetChannelImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetChannelImage(pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUISliderbar::GetChannelImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetChannelImage();
}

inline BOOL  IDUISliderbar::SetHorzSliderCtrl(BOOL  bHorz, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetHorzSliderCtrl(bHorz, bRedraw);
}

inline BOOL  IDUISliderbar::GetIsHorzSliderCtrl()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetIsHorzSliderCtrl();
}

inline BOOL  IDUISliderbar::SetDrawChannelColor(BOOL  bDrawColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetDrawChannelColor(bDrawColor, bRedraw);
}

inline BOOL  IDUISliderbar::GetIsDrawChannelColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetIsDrawChannelColor();
}

inline BOOL  IDUISliderbar::SetChannelBorderColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetChannelBorderColor(pFillColor, bRedraw);
}

inline struct IFillColor * IDUISliderbar::GetChannelBorderColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetChannelBorderColor();
}

inline BOOL  IDUISliderbar::SetChannelColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetChannelColor(pFillColor, bRedraw);
}

inline struct IFillColor * IDUISliderbar::GetChannelColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetChannelColor();
}

inline short  IDUISliderbar::GetChannelHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetChannelHeight();
}

inline BOOL  IDUISliderbar::SetChannelHeight(short  nHeight, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetChannelHeight(nHeight, bRedraw);
}

inline short  IDUISliderbar::GetBorderWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetBorderWidth();
}

inline BOOL  IDUISliderbar::SetBorderWidth(short  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetBorderWidth(nValue, bRedraw);
}

inline void  IDUISliderbar::GetRange(long * pnMin, long * pnMax  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetRange(pnMin, pnMax);
}

inline BOOL  IDUISliderbar::SetRange(long  nMin, long  nMax, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetRange(nMin, nMax, bRedraw);
}

inline long  IDUISliderbar::GetRangeMin()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetRangeMin();
}

inline BOOL  IDUISliderbar::SetRangeMin(long  nMin, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetRangeMin(nMin, bRedraw);
}

inline long  IDUISliderbar::GetRangeMax()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetRangeMax();
}

inline BOOL  IDUISliderbar::SetRangeMax(long  nMax, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetRangeMax(nMax, bRedraw);
}

inline BOOL  IDUISliderbar::SetDrawThumbColor(BOOL  bDrawColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetDrawThumbColor(bDrawColor, bRedraw);
}

inline BOOL  IDUISliderbar::GetIsDrawThumbColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetIsDrawThumbColor();
}

inline BOOL  IDUISliderbar::SetThumbColor(enum DUI_BUTTONSTATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetThumbColor(eState, pFillColor, bRedraw);
}

inline struct IFillColor * IDUISliderbar::GetThumbColor(enum DUI_BUTTONSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetThumbColor(eState);
}

inline short  IDUISliderbar::GetThumbHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetThumbHeight();
}

inline BOOL  IDUISliderbar::SetThumbHeight(short  nHeight, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetThumbHeight(nHeight, bRedraw);
}

inline short  IDUISliderbar::GetThumbWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetThumbWidth();
}

inline BOOL  IDUISliderbar::SetThumbWidth(short  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetThumbWidth(nValue, bRedraw);
}

inline BOOL  IDUISliderbar::SetThumbImage(enum DUI_BUTTONSTATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetThumbImage(eState, pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUISliderbar::GetThumbImage(enum DUI_BUTTONSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetThumbImage(eState);
}

inline BOOL  IDUISliderbar::SetTooltip(tstring  strTooltip, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetTooltip(strTooltip, bRedraw);
}

inline tstring  IDUISliderbar::GetTooltip()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetTooltip();
}

inline BOOL  IDUISliderbar::SetPointType(enum DUI_POINTTYPE  eTickType, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetPointType(eTickType, bRedraw);
}

inline enum DUI_POINTTYPE  IDUISliderbar::GetPointType()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetPointType();
}

inline BOOL  IDUISliderbar::SetTickMarks(BOOL  bTickmarks, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetTickMarks(bTickmarks, bRedraw);
}

inline BOOL  IDUISliderbar::GetIsTickMarks()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetIsTickMarks();
}

inline BOOL  IDUISliderbar::SetAutoTics(BOOL  bAutoTics, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetAutoTics(bAutoTics, bRedraw);
}

inline BOOL  IDUISliderbar::GetIsAutoTics()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetIsAutoTics();
}

inline BOOL  IDUISliderbar::SetTickImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetTickImage(pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUISliderbar::GetTickImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetTickImage();
}

inline BOOL  IDUISliderbar::SetTickColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetTickColor(pFillColor, bRedraw);
}

inline struct IFillColor * IDUISliderbar::GetTickColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetTickColor();
}

inline short  IDUISliderbar::GetLineLength()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetLineLength();
}

inline BOOL  IDUISliderbar::SetLineLength(short  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetLineLength(nValue, bRedraw);
}

inline short  IDUISliderbar::GetLineWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetLineWidth();
}

inline BOOL  IDUISliderbar::SetLineWidth(short  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetLineWidth(nValue, bRedraw);
}

inline short  IDUISliderbar::GetLineSpace()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetLineSpace();
}

inline BOOL  IDUISliderbar::SetLineSpace(short  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetLineSpace(nValue, bRedraw);
}

inline long  IDUISliderbar::GetTicFreg()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetTicFreg();
}

inline BOOL  IDUISliderbar::SetTicFreg(long  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetTicFreg(nValue, bRedraw);
}

inline BOOL  IDUISliderbar::SetDrawSelColor(BOOL  bDrawColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetDrawSelColor(bDrawColor, bRedraw);
}

inline BOOL  IDUISliderbar::GetIsDrawSelColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetIsDrawSelColor();
}

inline BOOL  IDUISliderbar::SetSelectionImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetSelectionImage(pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUISliderbar::GetSelectionImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetSelectionImage();
}

inline BOOL  IDUISliderbar::SetSelectionColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetSelectionColor(pFillColor, bRedraw);
}

inline struct IFillColor * IDUISliderbar::GetSelectionColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetSelectionColor();
}

inline void  IDUISliderbar::GetSelection(long * pnMin, long * pnMax  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetSelection(pnMin, pnMax);
}

inline BOOL  IDUISliderbar::SetSelection(long  nMin, long  nMax, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetSelection(nMin, nMax, bRedraw);
}

inline long  IDUISliderbar::GetSelRangeMin()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetSelRangeMin();
}

inline BOOL  IDUISliderbar::SetSelRangeMin(long  value, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetSelRangeMin(value, bRedraw);
}

inline long  IDUISliderbar::GetSelRangeMax()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetSelRangeMax();
}

inline BOOL  IDUISliderbar::SetSelRangeMax(long  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetSelRangeMax(nValue, bRedraw);
}

inline long  IDUISliderbar::GetSelectionHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetSelectionHeight();
}

inline BOOL  IDUISliderbar::SetSelectionHeight(long  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetSelectionHeight(nValue, bRedraw);
}

inline BOOL  IDUISliderbar::SetVirtualThumb(BOOL  bVirtual, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetVirtualThumb(bVirtual, bRedraw);
}

inline BOOL  IDUISliderbar::GetIsVirtualThumb()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetIsVirtualThumb();
}

inline BOOL  IDUISliderbar::SetVirtualThumbImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetVirtualThumbImage(pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUISliderbar::GetVirtualThumbImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetVirtualThumbImage();
}

inline BOOL  IDUISliderbar::SetDrawStateColor(BOOL  bDrawColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetDrawStateColor(bDrawColor, bRedraw);
}

inline BOOL  IDUISliderbar::GetIsDrawStateColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetIsDrawStateColor();
}

inline BOOL  IDUISliderbar::SetStateImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetStateImage(pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUISliderbar::GetStateImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetStateImage();
}

inline BOOL  IDUISliderbar::SetStateColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetStateColor(pFillColor, bRedraw);
}

inline struct IFillColor * IDUISliderbar::GetStateColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetStateColor();
}

inline long  IDUISliderbar::GetStateHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetStateHeight();
}

inline BOOL  IDUISliderbar::SetStateHeight(long  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetStateHeight(nValue, bRedraw);
}

inline void  IDUISliderbar::GetSpace(long * pnSpaceStart, long * pnSpaceEnd  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetSpace(pnSpaceStart, pnSpaceEnd);
}

inline BOOL  IDUISliderbar::SetSpace(long  nSpaceStart, long  nSpaceEnd, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetSpace(nSpaceStart, nSpaceEnd, bRedraw);
}

inline long  IDUISliderbar::GetSpaceStart()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetSpaceStart();
}

inline BOOL  IDUISliderbar::SetSpaceStart(long  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetSpaceStart(nValue, bRedraw);
}

inline long  IDUISliderbar::GetSpaceEnd()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetSpaceEnd();
}

inline BOOL  IDUISliderbar::SetSpaceEnd(long  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetSpaceEnd(nValue, bRedraw);
}

inline void  IDUISliderbar::GetStateSpace(long * pnSpaceStart, long * pnSpaceEnd  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetStateSpace(pnSpaceStart, pnSpaceEnd);
}

inline BOOL  IDUISliderbar::SetStateSpace(long  nSpaceStart, long  nSpaceEnd, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetStateSpace(nSpaceStart, nSpaceEnd, bRedraw);
}

inline long  IDUISliderbar::GetStateSpaceStart()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetStateSpaceStart();
}

inline BOOL  IDUISliderbar::SetStateSpaceStart(long  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetStateSpaceStart(nValue, bRedraw);
}

inline long  IDUISliderbar::GetStateSpaceEnd()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetStateSpaceEnd();
}

inline BOOL  IDUISliderbar::SetStateSpaceEnd(long  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetStateSpaceEnd(nValue, bRedraw);
}

inline short  IDUISliderbar::SetEnableSelecton(BOOL  bEnableSel, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetEnableSelecton(bEnableSel, bRedraw);
}

inline BOOL  IDUISliderbar::GetIsEnableSelecton()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetIsEnableSelecton();
}

inline long  IDUISliderbar::GetPos()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetPos();
}

inline BOOL  IDUISliderbar::SetPos(long  nPos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetPos(nPos);
}

inline long  IDUISliderbar::GetTic(long  nTic  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetTic(nTic);
}

inline long  IDUISliderbar::GetTicPos(long  nTic  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetTicPos(nTic);
}

inline long  IDUISliderbar::GetTicArray()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetTicArray();
}

inline long  IDUISliderbar::GetNumTics()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetNumTics();
}

inline BOOL  IDUISliderbar::SetTic(long  nTic  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetTic(nTic);
}

inline BOOL  IDUISliderbar::ClearTics(BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->ClearTics(bRedraw);
}

inline BOOL  IDUISliderbar::ClearSel(BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->ClearSel(bRedraw);
}

inline long  IDUISliderbar::SetLineSize(long  nSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetLineSize(nSize);
}

inline long  IDUISliderbar::GetLineSize()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetLineSize();
}

inline long  IDUISliderbar::SetPageSize(long  nSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetPageSize(nSize);
}

inline long  IDUISliderbar::GetPageSize()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetPageSize();
}

inline BOOL  IDUISliderbar::SetDrawFrontColor(BOOL  bDrawColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetDrawFrontColor(bDrawColor, bRedraw);
}

inline BOOL  IDUISliderbar::GetIsDrawFrontColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetIsDrawFrontColor();
}

inline BOOL  IDUISliderbar::SetFrontImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetFrontImage(pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUISliderbar::GetFrontImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetFrontImage();
}

inline BOOL  IDUISliderbar::SetFrontColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetFrontColor(pFillColor, bRedraw);
}

inline struct IFillColor * IDUISliderbar::GetFrontColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetFrontColor();
}

inline long  IDUISliderbar::GetFrontHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetFrontHeight();
}

inline BOOL  IDUISliderbar::SetFrontHeight(long  nValue, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetFrontHeight(nValue, bRedraw);
}

inline long  IDUISliderbar::GetStatePos()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetStatePos();
}

inline BOOL  IDUISliderbar::SetStatePos(long  nPos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetStatePos(nPos);
}

inline BOOL  IDUISliderbar::SetEnabledState(BOOL  bEnabled, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetEnabledState(bEnabled, bRedraw);
}

inline BOOL  IDUISliderbar::GetIsEnabledState()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->GetIsEnabledState();
}

inline BOOL  IDUISliderbar::IsStepProgress()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->IsStepProgress();
}

inline void  IDUISliderbar::SetStepProgress(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISliderbar_*)m_pCtrl)->SetStepProgress(bEnable);
}

inline void IDUISpin_::SetBackColor(OLE_COLOR  color  )
{

	raw_SetBackColor(color  );
}

inline void IDUISpin_::SetBackImage(OLE_HANDLE  hBitmap  )
{

	raw_SetBackImage(hBitmap  );
}

inline void IDUISpin_::SetPenMode(enum ePenMode  penMode  )
{

	raw_SetPenMode(penMode  );
}

inline void IDUISpin_::GetPenMode()
{

	raw_GetPenMode();
}

inline void IDUISpin_::SetPenColor(OLE_COLOR  color  )
{

	raw_SetPenColor(color  );
}

inline void IDUISpin_::SetPenSize(int  nSize  )
{

	raw_SetPenSize(nSize  );
}

inline void IDUISpin_::SetEraseSize(int  nSize  )
{

	raw_SetEraseSize(nSize  );
}

inline void IDUISpin_::GetEraseSize()
{

	raw_GetEraseSize();
}

inline void IDUISpin_::InsertPic(OLE_HANDLE  hBitmap  )
{

	raw_InsertPic(hBitmap  );
}

inline void IDUISpin_::SetTextColor(OLE_COLOR  color  )
{

	raw_SetTextColor(color  );
}

inline void IDUISpin_::SetTextSize(int  nSize  )
{

	raw_SetTextSize(nSize  );
}

inline void IDUISpin_::SetTextFamily(tstring  strFamilyName  )
{
	_bstr_t xxx_strFamilyName(strFamilyName.c_str());

	raw_SetTextFamily(xxx_strFamilyName  );
}

inline void IDUISpin_::SetEraserMode(enum eEraserMode  eraserMode  )
{

	raw_SetEraserMode(eraserMode  );
}

inline void IDUISpin_::SetRoundEraserSize(int  nSize  )
{

	raw_SetRoundEraserSize(nSize  );
}

inline void IDUISpin_::SetRectangleEraserSize(int  nSize  )
{

	raw_SetRectangleEraserSize(nSize  );
}

inline void IDUISpin_::ClearAllContent()
{

	raw_ClearAllContent();
}

inline void IDUISpin_::SetOprationMaxCount(int  nSize  )
{

	raw_SetOprationMaxCount(nSize  );
}

inline void IDUISpin_::OprationUndo()
{

	raw_OprationUndo();
}

inline void IDUISpin_::OprationForword()
{

	raw_OprationForword();
}

inline void IDUISpin_::SetViewSize(struct SkinRect  rect  )
{

	raw_SetViewSize(rect  );
}

inline void IDUISpin_::SetViewBkColor(OLE_COLOR  color  )
{

	raw_SetViewBkColor(color  );
}

inline void IDUISpin_::SetOperationMode(enum eOperationMode  eMode  )
{

	raw_SetOperationMode(eMode  );
}

inline void IDUISpin_::SetGraphicType(enum eGraphicType  eType  )
{

	raw_SetGraphicType(eType  );
}

inline void IDUISpin_::SetSelectedColor(OLE_COLOR  color  )
{

	raw_SetSelectedColor(color  );
}

inline void IDUISpin_::GetWhiteboardDoc()
{

	raw_GetWhiteboardDoc();
}

inline void IDUISpin_::OnMouseWheel(struct DUIPOINT  pt, int  nWheel  )
{

	raw_OnMouseWheel(pt, nWheel  );
}

inline void IDUISpin_::SetPicText(OLE_HANDLE * pic, tstring  text  )
{
	_bstr_t xxx_text(text.c_str());

	raw_SetPicText(pic, xxx_text  );
}

inline void IDUISpin_::GetPicText(OLE_HANDLE * pic, BSTR * picText  )
{

	raw_GetPicText(pic, picText  );
}

inline void IDUISpin_::OnWrite(tstring  bstr  )
{
	_bstr_t xxx_bstr(bstr.c_str());

	raw_OnWrite(xxx_bstr  );
}

inline void IDUISpin_::OnRead(tstring  bstr  )
{
	_bstr_t xxx_bstr(bstr.c_str());

	raw_OnRead(xxx_bstr  );
}

inline void IDUISpin_::GetImageAdd(BSTR * bstr  )
{

	raw_GetImageAdd(bstr  );
}

inline void IDUISpin_::InsertImageByAdd(tstring  bstr  )
{
	_bstr_t xxx_bstr(bstr.c_str());

	raw_InsertImageByAdd(xxx_bstr  );
}

inline void IDUISpin_::SetOldOperationMode(enum eOperationMode  eMode  )
{

	raw_SetOldOperationMode(eMode  );
}

inline void IDUISpin_::SetOldGraphicType(enum eGraphicType  eType  )
{

	raw_SetOldGraphicType(eType  );
}

inline void IDUISpin_::InsertFlagImage(tstring  bstr, int  x, int  y, int  id  )
{
	_bstr_t xxx_bstr(bstr.c_str());

	raw_InsertFlagImage(xxx_bstr, x, y, id  );
}

inline void IDUISpin_::InsertImageText(tstring  bstr, int  id  )
{
	_bstr_t xxx_bstr(bstr.c_str());

	raw_InsertImageText(xxx_bstr, id  );
}

inline void IDUISpin_::HideFlagImage(int  id  )
{

	raw_HideFlagImage(id  );
}

inline void  IDUISpin::SetBackColor(OLE_COLOR  color  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetBackColor(color);
}

inline void  IDUISpin::SetBackImage(OLE_HANDLE  hBitmap  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetBackImage(hBitmap);
}

inline void  IDUISpin::SetPenMode(enum ePenMode  penMode  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetPenMode(penMode);
}

inline void  IDUISpin::GetPenMode()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->GetPenMode();
}

inline void  IDUISpin::SetPenColor(OLE_COLOR  color  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetPenColor(color);
}

inline void  IDUISpin::SetPenSize(int  nSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetPenSize(nSize);
}

inline void  IDUISpin::SetEraseSize(int  nSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetEraseSize(nSize);
}

inline void  IDUISpin::GetEraseSize()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->GetEraseSize();
}

inline void  IDUISpin::InsertPic(OLE_HANDLE  hBitmap  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->InsertPic(hBitmap);
}

inline void  IDUISpin::SetTextColor(OLE_COLOR  color  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetTextColor(color);
}

inline void  IDUISpin::SetTextSize(int  nSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetTextSize(nSize);
}

inline void  IDUISpin::SetTextFamily(tstring  strFamilyName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetTextFamily(strFamilyName);
}

inline void  IDUISpin::SetEraserMode(enum eEraserMode  eraserMode  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetEraserMode(eraserMode);
}

inline void  IDUISpin::SetRoundEraserSize(int  nSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetRoundEraserSize(nSize);
}

inline void  IDUISpin::SetRectangleEraserSize(int  nSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetRectangleEraserSize(nSize);
}

inline void  IDUISpin::ClearAllContent()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->ClearAllContent();
}

inline void  IDUISpin::SetOprationMaxCount(int  nSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetOprationMaxCount(nSize);
}

inline void  IDUISpin::OprationUndo()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->OprationUndo();
}

inline void  IDUISpin::OprationForword()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->OprationForword();
}

inline void  IDUISpin::SetViewSize(struct SkinRect  rect  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetViewSize(rect);
}

inline void  IDUISpin::SetViewBkColor(OLE_COLOR  color  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetViewBkColor(color);
}

inline void  IDUISpin::SetOperationMode(enum eOperationMode  eMode  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetOperationMode(eMode);
}

inline void  IDUISpin::SetGraphicType(enum eGraphicType  eType  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetGraphicType(eType);
}

inline void  IDUISpin::SetSelectedColor(OLE_COLOR  color  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetSelectedColor(color);
}

inline void  IDUISpin::GetWhiteboardDoc()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->GetWhiteboardDoc();
}

inline void  IDUISpin::OnMouseWheel(struct DUIPOINT  pt, int  nWheel  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->OnMouseWheel(pt, nWheel);
}

inline void  IDUISpin::SetPicText(OLE_HANDLE * pic, tstring  text  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetPicText(pic, text);
}

inline void  IDUISpin::GetPicText(OLE_HANDLE * pic, BSTR * picText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->GetPicText(pic, picText);
}

inline void  IDUISpin::OnWrite(tstring  bstr  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->OnWrite(bstr);
}

inline void  IDUISpin::OnRead(tstring  bstr  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->OnRead(bstr);
}

inline void  IDUISpin::GetImageAdd(BSTR * bstr  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->GetImageAdd(bstr);
}

inline void  IDUISpin::InsertImageByAdd(tstring  bstr  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->InsertImageByAdd(bstr);
}

inline void  IDUISpin::SetOldOperationMode(enum eOperationMode  eMode  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetOldOperationMode(eMode);
}

inline void  IDUISpin::SetOldGraphicType(enum eGraphicType  eType  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->SetOldGraphicType(eType);
}

inline void  IDUISpin::InsertFlagImage(tstring  bstr, int  x, int  y, int  id  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->InsertFlagImage(bstr, x, y, id);
}

inline void  IDUISpin::InsertImageText(tstring  bstr, int  id  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->InsertImageText(bstr, id);
}

inline void  IDUISpin::HideFlagImage(int  id  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISpin_*)m_pCtrl)->HideFlagImage(id);
}

inline void IDUISplitter_::SetSplitterType(BOOL  bHorz  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSplitterType(xxx_bHorz  );
}

inline void IDUISplitter_::SetSplitterHorzMin(long  nTopMin, long  nBottomMin  )
{

	raw_SetSplitterHorzMin(nTopMin, nBottomMin  );
}

inline void IDUISplitter_::SetSplitterVertMin(long  nLeftMin, long  nRightMin  )
{

	raw_SetSplitterVertMin(nLeftMin, nRightMin  );
}

inline long  IDUISplitter_::GetTopLeftMin()
{
	long  _result;
	raw_GetTopLeftMin(&_result);
	return _result;
}

inline long  IDUISplitter_::GetBottomRightMin()
{
	long  _result;
	raw_GetBottomRightMin(&_result);
	return _result;
}

inline long  IDUISplitter_::GetGraphLength()
{
	long  _result;
	raw_GetGraphLength(&_result);
	return _result;
}

inline void IDUISplitter_::SetGraphLength(long  nGraphLength, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphLength(nGraphLength, xxx_bRedraw  );
}

inline void IDUISplitter_::SetBarPressColor(OLE_COLOR  clrPress  )
{

	raw_SetBarPressColor(clrPress  );
}

inline void IDUISplitter_::SetCustomDragOff(BOOL  bDragOff  )
{
	VARIANT_BOOL xxx_bDragOff = bDragOff ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCustomDragOff(xxx_bDragOff  );
}

inline void  IDUISplitter::SetSplitterType(BOOL  bHorz  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISplitter_*)m_pCtrl)->SetSplitterType(bHorz);
}

inline void  IDUISplitter::SetSplitterHorzMin(long  nTopMin, long  nBottomMin  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISplitter_*)m_pCtrl)->SetSplitterHorzMin(nTopMin, nBottomMin);
}

inline void  IDUISplitter::SetSplitterVertMin(long  nLeftMin, long  nRightMin  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISplitter_*)m_pCtrl)->SetSplitterVertMin(nLeftMin, nRightMin);
}

inline long  IDUISplitter::GetTopLeftMin()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISplitter_*)m_pCtrl)->GetTopLeftMin();
}

inline long  IDUISplitter::GetBottomRightMin()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISplitter_*)m_pCtrl)->GetBottomRightMin();
}

inline long  IDUISplitter::GetGraphLength()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISplitter_*)m_pCtrl)->GetGraphLength();
}

inline void  IDUISplitter::SetGraphLength(long  nGraphLength, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISplitter_*)m_pCtrl)->SetGraphLength(nGraphLength, bRedraw);
}

inline void  IDUISplitter::SetBarPressColor(OLE_COLOR  clrPress  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISplitter_*)m_pCtrl)->SetBarPressColor(clrPress);
}

inline void  IDUISplitter::SetCustomDragOff(BOOL  bDragOff  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISplitter_*)m_pCtrl)->SetCustomDragOff(bDragOff);
}

inline void IDUIStatic_::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUIStatic_::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline enum DUI_STATICSTATE  IDUIStatic_::GetStaticState()
{
	enum DUI_STATICSTATE  _result;
	raw_GetStaticState(&_result);
	return _result;
}

inline void IDUIStatic_::SetStaticState(enum DUI_STATICSTATE  eState  )
{

	raw_SetStaticState(eState  );
}

inline void IDUIStatic_::SetBackImageSec(enum DUI_STATICSTATE  eState, struct IDUIImageBase * pImageBase  )
{

	raw_SetBackImageSec(eState, pImageBase  );
}

inline struct IDUIImageBase * IDUIStatic_::GetBackImageSec(enum DUI_STATICSTATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetBackImageSec(eState, &_result);
	return _result;
}

inline void IDUIStatic_::SetBackColorByRGB(enum DUI_STATICSTATE  eState, OLE_COLOR  oleStartClr, OLE_COLOR  oleEndClr  )
{

	raw_SetBackColorByRGB(eState, oleStartClr, oleEndClr  );
}

inline struct IFillColor * IDUIStatic_::GetBackColor(enum DUI_STATICSTATE  eState  )
{
	struct IFillColor * _result;
	raw_GetBackColor(eState, &_result);
	return _result;
}

inline void IDUIStatic_::SetTextStyle(enum DUI_STATICSTATE  eState, struct IDUITextStyle * pTextStyle  )
{

	raw_SetTextStyle(eState, pTextStyle  );
}

inline struct IDUITextStyle * IDUIStatic_::GetTextStyle(enum DUI_STATICSTATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetTextStyle(eState, &_result);
	return _result;
}

inline void IDUIStatic_::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  IDUIStatic_::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUIStatic_::StartScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_StartScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIStatic_::AddScrollItem(tstring  strText, tstring  strURL  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strURL(strURL.c_str());
	OLE_HANDLE  _result;
	raw_AddScrollItem(xxx_strText, xxx_strURL, &_result);
	return _result;
}

inline BOOL  IDUIStatic_::SetTextScroll(BOOL  bIsScroll, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bIsScroll = bIsScroll ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextScroll(xxx_bIsScroll, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::GetTextScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetTextScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::SetScrollSpace(long  nSpace  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetScrollSpace(nSpace, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIStatic_::GetScrollSpace()
{
	long  _result;
	raw_GetScrollSpace(&_result);
	return _result;
}

inline BOOL  IDUIStatic_::SetScrollSpeed(long  nSpeed  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetScrollSpeed(nSpeed, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIStatic_::GetScrollSpeed()
{
	long  _result;
	raw_GetScrollSpeed(&_result);
	return _result;
}

inline BOOL  IDUIStatic_::SetScrollStep(long  nStep  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetScrollStep(nStep, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIStatic_::GetScrollStep()
{
	long  _result;
	raw_GetScrollStep(&_result);
	return _result;
}

inline BOOL  IDUIStatic_::DeleteScrollItem(OLE_HANDLE  hTextItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteScrollItem(hTextItem, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::ModifyScrollItem(OLE_HANDLE  hTextItem, tstring  strText, tstring  strNewURL  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strNewURL(strNewURL.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ModifyScrollItem(hTextItem, xxx_strText, xxx_strNewURL, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::DeleteAllScrollItem()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteAllScrollItem(&_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIStatic_::GetScrollTextsCount()
{
	short  _result;
	raw_GetScrollTextsCount(&_result);
	return _result;
}

inline BOOL  IDUIStatic_::SetHyperlink(BOOL  bIsHyperlink, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bIsHyperlink = bIsHyperlink ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetHyperlink(xxx_bIsHyperlink, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::GetIsHyperlink()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsHyperlink(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIStatic_::SetHyperlinkTextStyle(enum DUI_HYPERLINKTEXTSTYLE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHyperlinkTextStyle(eState, pTextStyle, xxx_bRedraw  );
}

inline struct IDUITextStyle * IDUIStatic_::GetHyperlinkTextStyle(enum DUI_HYPERLINKTEXTSTYLE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetHyperlinkTextStyle(eState, &_result);
	return _result;
}

inline BOOL  IDUIStatic_::SetDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawColor(xxx_bDrawColor, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::GetDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::ModifyScrollText(OLE_HANDLE  hTextItem, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ModifyScrollText(hTextItem, xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::ModifyScrollURL(OLE_HANDLE  hTextItem, tstring  strNewURL  )
{
_bstr_t xxx_strNewURL(strNewURL.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ModifyScrollURL(hTextItem, xxx_strNewURL, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::SetURL(tstring  strURL  )
{
_bstr_t xxx_strURL(strURL.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetURL(xxx_strURL, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIStatic_::GetURL()
{
	BSTR _result = NULL;
	raw_GetURL(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline tstring  IDUIStatic_::GetScrollText(OLE_HANDLE  hTextItem  )
{
	BSTR _result = NULL;
	raw_GetScrollText(hTextItem, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline tstring  IDUIStatic_::GetScrollURL(OLE_HANDLE  hTextItem  )
{
	BSTR _result = NULL;
	raw_GetScrollURL(hTextItem, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIStatic_::SetImageBack(OLE_HANDLE  hBmp, enum DUI_STATICSTATE  eState  )
{

	raw_SetImageBack(hBmp, eState  );
}

inline OLE_HANDLE  IDUIStatic_::GetImageBack(enum DUI_STATICSTATE  eState  )
{
	OLE_HANDLE  _result;
	raw_GetImageBack(eState, &_result);
	return _result;
}

inline void IDUIStatic_::GetAutoResize(VARIANT_BOOL * bAbleResize, unsigned long * nMinHeight, unsigned long * nMaxHeight, unsigned long * nMinWidth, unsigned long * nMaxWidth  )
{

	raw_GetAutoResize(bAbleResize, nMinHeight, nMaxHeight, nMinWidth, nMaxWidth  );
}

inline void IDUIStatic_::SetAutoResize(BOOL  bAbleAutosize, unsigned long  nMinHeight, unsigned long  nMaxHeight, unsigned long  nMinWidth, unsigned long  nMaxWidth  )
{
	VARIANT_BOOL xxx_bAbleAutosize = bAbleAutosize ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoResize(xxx_bAbleAutosize, nMinHeight, nMaxHeight, nMinWidth, nMaxWidth  );
}

inline BOOL  IDUIStatic_::PauseScroll(BOOL  bPause  )
{
	VARIANT_BOOL xxx_bPause = bPause ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_PauseScroll(xxx_bPause, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIStatic_::SetWordType(enum DUI_ENUM_WORDTYPE  eWordType  )
{

	raw_SetWordType(eWordType  );
}

inline enum DUI_ENUM_WORDTYPE  IDUIStatic_::GetWordType()
{
	enum DUI_ENUM_WORDTYPE  _result;
	raw_GetWordType(&_result);
	return _result;
}

inline void IDUIStatic_::EnableGetWord()
{

	raw_EnableGetWord();
}

inline void IDUIStatic_::DisableGetWord()
{

	raw_DisableGetWord();
}

inline void IDUIStatic_::SetSplitWord(tstring  strSplit  )
{
	_bstr_t xxx_strSplit(strSplit.c_str());

	raw_SetSplitWord(xxx_strSplit  );
}

inline void IDUIStatic_::GetSplitWord(BSTR * strSplit  )
{

	raw_GetSplitWord(strSplit  );
}

inline void IDUIStatic_::AppendSubScrollText(OLE_HANDLE  hTextItem, tstring  strText, struct IDUITextStyle * ppTextStyle  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_AppendSubScrollText(hTextItem, xxx_strText, ppTextStyle  );
}

inline void IDUIStatic_::ClearVScrollText()
{

	raw_ClearVScrollText();
}

inline void IDUIStatic_::AppendVScrollText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_AppendVScrollText(xxx_strText  );
}

inline BOOL  IDUIStatic_::StartVScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_StartVScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::StopVScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_StopVScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIStatic_::SetVWaitTime(long  nTime  )
{

	raw_SetVWaitTime(nTime  );
}

inline BOOL  IDUIStatic_::SetVInterval(long  nInterval  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetVInterval(nInterval, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::SetVMoveTop(BOOL  bTop  )
{
	VARIANT_BOOL xxx_bTop = bTop ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetVMoveTop(xxx_bTop, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::AppendSubString(tstring  strText, struct IDUITextStyle * pTextStyle  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendSubString(xxx_strText, pTextStyle, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::ChangeSubStringStyle(tstring  strText, struct IDUITextStyle * pTextStyle  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ChangeSubStringStyle(xxx_strText, pTextStyle, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic_::DeleteAllSubString()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteAllSubString(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIStatic_::HKSetMultiStyleTextMaxWidth(long  nMaxWidth  )
{

	raw_HKSetMultiStyleTextMaxWidth(nMaxWidth  );
}

inline void IDUIStatic_::SetBackColor(enum DUI_STATICSTATE  eState, struct IFillColor * pFillColor  )
{

	raw_SetBackColor(eState, pFillColor  );
}

inline void  IDUIStatic::SetText(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetText(strText);
}

inline tstring  IDUIStatic::GetText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetText();
}

inline enum DUI_STATICSTATE  IDUIStatic::GetStaticState()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetStaticState();
}

inline void  IDUIStatic::SetStaticState(enum DUI_STATICSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetStaticState(eState);
}

inline void  IDUIStatic::SetBackImageSec(enum DUI_STATICSTATE  eState, struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetBackImageSec(eState, pImageBase);
}

inline struct IDUIImageBase * IDUIStatic::GetBackImageSec(enum DUI_STATICSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetBackImageSec(eState);
}

inline void  IDUIStatic::SetBackColorByRGB(enum DUI_STATICSTATE  eState, OLE_COLOR  oleStartClr, OLE_COLOR  oleEndClr  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetBackColorByRGB(eState, oleStartClr, oleEndClr);
}

inline struct IFillColor * IDUIStatic::GetBackColor(enum DUI_STATICSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetBackColor(eState);
}

inline void  IDUIStatic::SetTextStyle(enum DUI_STATICSTATE  eState, struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetTextStyle(eState, pTextStyle);
}

inline struct IDUITextStyle * IDUIStatic::GetTextStyle(enum DUI_STATICSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetTextStyle(eState);
}

inline void  IDUIStatic::SetTooltip(tstring  strTooltip  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetTooltip(strTooltip);
}

inline tstring  IDUIStatic::GetTooltip()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetTooltip();
}

inline BOOL  IDUIStatic::StartScroll()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->StartScroll();
}

inline OLE_HANDLE  IDUIStatic::AddScrollItem(tstring  strText, tstring  strURL  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->AddScrollItem(strText, strURL);
}

inline BOOL  IDUIStatic::SetTextScroll(BOOL  bIsScroll, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetTextScroll(bIsScroll, bRedraw);
}

inline BOOL  IDUIStatic::GetTextScroll()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetTextScroll();
}

inline BOOL  IDUIStatic::SetScrollSpace(long  nSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetScrollSpace(nSpace);
}

inline long  IDUIStatic::GetScrollSpace()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetScrollSpace();
}

inline BOOL  IDUIStatic::SetScrollSpeed(long  nSpeed  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetScrollSpeed(nSpeed);
}

inline long  IDUIStatic::GetScrollSpeed()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetScrollSpeed();
}

inline BOOL  IDUIStatic::SetScrollStep(long  nStep  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetScrollStep(nStep);
}

inline long  IDUIStatic::GetScrollStep()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetScrollStep();
}

inline BOOL  IDUIStatic::DeleteScrollItem(OLE_HANDLE  hTextItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->DeleteScrollItem(hTextItem);
}

inline BOOL  IDUIStatic::ModifyScrollItem(OLE_HANDLE  hTextItem, tstring  strText, tstring  strNewURL  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->ModifyScrollItem(hTextItem, strText, strNewURL);
}

inline BOOL  IDUIStatic::DeleteAllScrollItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->DeleteAllScrollItem();
}

inline short  IDUIStatic::GetScrollTextsCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetScrollTextsCount();
}

inline BOOL  IDUIStatic::SetHyperlink(BOOL  bIsHyperlink, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetHyperlink(bIsHyperlink, bRedraw);
}

inline BOOL  IDUIStatic::GetIsHyperlink()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetIsHyperlink();
}

inline void  IDUIStatic::SetHyperlinkTextStyle(enum DUI_HYPERLINKTEXTSTYLE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetHyperlinkTextStyle(eState, pTextStyle, bRedraw);
}

inline struct IDUITextStyle * IDUIStatic::GetHyperlinkTextStyle(enum DUI_HYPERLINKTEXTSTYLE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetHyperlinkTextStyle(eState);
}

inline BOOL  IDUIStatic::SetDrawColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetDrawColor(bDrawColor);
}

inline BOOL  IDUIStatic::GetDrawColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetDrawColor();
}

inline BOOL  IDUIStatic::ModifyScrollText(OLE_HANDLE  hTextItem, tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->ModifyScrollText(hTextItem, strText);
}

inline BOOL  IDUIStatic::ModifyScrollURL(OLE_HANDLE  hTextItem, tstring  strNewURL  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->ModifyScrollURL(hTextItem, strNewURL);
}

inline BOOL  IDUIStatic::SetURL(tstring  strURL  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetURL(strURL);
}

inline tstring  IDUIStatic::GetURL()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetURL();
}

inline tstring  IDUIStatic::GetScrollText(OLE_HANDLE  hTextItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetScrollText(hTextItem);
}

inline tstring  IDUIStatic::GetScrollURL(OLE_HANDLE  hTextItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetScrollURL(hTextItem);
}

inline void  IDUIStatic::SetImageBack(OLE_HANDLE  hBmp, enum DUI_STATICSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetImageBack(hBmp, eState);
}

inline OLE_HANDLE  IDUIStatic::GetImageBack(enum DUI_STATICSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetImageBack(eState);
}

inline void  IDUIStatic::GetAutoResize(VARIANT_BOOL * bAbleResize, unsigned long * nMinHeight, unsigned long * nMaxHeight, unsigned long * nMinWidth, unsigned long * nMaxWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetAutoResize(bAbleResize, nMinHeight, nMaxHeight, nMinWidth, nMaxWidth);
}

inline void  IDUIStatic::SetAutoResize(BOOL  bAbleAutosize, unsigned long  nMinHeight, unsigned long  nMaxHeight, unsigned long  nMinWidth, unsigned long  nMaxWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetAutoResize(bAbleAutosize, nMinHeight, nMaxHeight, nMinWidth, nMaxWidth);
}

inline BOOL  IDUIStatic::PauseScroll(BOOL  bPause  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->PauseScroll(bPause);
}

inline void  IDUIStatic::SetWordType(enum DUI_ENUM_WORDTYPE  eWordType  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetWordType(eWordType);
}

inline enum DUI_ENUM_WORDTYPE  IDUIStatic::GetWordType()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetWordType();
}

inline void  IDUIStatic::EnableGetWord()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->EnableGetWord();
}

inline void  IDUIStatic::DisableGetWord()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->DisableGetWord();
}

inline void  IDUIStatic::SetSplitWord(tstring  strSplit  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetSplitWord(strSplit);
}

inline void  IDUIStatic::GetSplitWord(BSTR * strSplit  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->GetSplitWord(strSplit);
}

inline void  IDUIStatic::AppendSubScrollText(OLE_HANDLE  hTextItem, tstring  strText, struct IDUITextStyle * ppTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->AppendSubScrollText(hTextItem, strText, ppTextStyle);
}

inline void  IDUIStatic::ClearVScrollText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->ClearVScrollText();
}

inline void  IDUIStatic::AppendVScrollText(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->AppendVScrollText(strText);
}

inline BOOL  IDUIStatic::StartVScroll()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->StartVScroll();
}

inline BOOL  IDUIStatic::StopVScroll()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->StopVScroll();
}

inline void  IDUIStatic::SetVWaitTime(long  nTime  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetVWaitTime(nTime);
}

inline BOOL  IDUIStatic::SetVInterval(long  nInterval  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetVInterval(nInterval);
}

inline BOOL  IDUIStatic::SetVMoveTop(BOOL  bTop  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetVMoveTop(bTop);
}

inline BOOL  IDUIStatic::AppendSubString(tstring  strText, struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->AppendSubString(strText, pTextStyle);
}

inline BOOL  IDUIStatic::ChangeSubStringStyle(tstring  strText, struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->ChangeSubStringStyle(strText, pTextStyle);
}

inline BOOL  IDUIStatic::DeleteAllSubString()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->DeleteAllSubString();
}

inline void  IDUIStatic::HKSetMultiStyleTextMaxWidth(long  nMaxWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->HKSetMultiStyleTextMaxWidth(nMaxWidth);
}

inline void  IDUIStatic::SetBackColor(enum DUI_STATICSTATE  eState, struct IFillColor * pFillColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStatic_*)m_pCtrl)->SetBackColor(eState, pFillColor);
}

inline struct IDUITabCtrlItem * IDUITabCtrl_::AppendItem(tstring  strName, long  nID, tstring  strText  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	struct IDUITabCtrlItem * _result;
	raw_AppendItem(xxx_strName, nID, xxx_strText, &_result);
	return _result;
}

inline struct IDUITabCtrlItem * IDUITabCtrl_::InsertItem(short  nIndex, tstring  strName, long  nID, tstring  strText  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	struct IDUITabCtrlItem * _result;
	raw_InsertItem(nIndex, xxx_strName, nID, xxx_strText, &_result);
	return _result;
}

inline struct IDUITabCtrlItem * IDUITabCtrl_::GetItemByIndex(short  nIndex  )
{
	struct IDUITabCtrlItem * _result;
	raw_GetItemByIndex(nIndex, &_result);
	return _result;
}

inline struct IDUITabCtrlItem * IDUITabCtrl_::GetItemByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITabCtrlItem * _result;
	raw_GetItemByName(xxx_strName, &_result);
	return _result;
}

inline struct IDUITabCtrlItem * IDUITabCtrl_::GetItemByID(long  nID  )
{
	struct IDUITabCtrlItem * _result;
	raw_GetItemByID(nID, &_result);
	return _result;
}

inline long  IDUITabCtrl_::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline BOOL  IDUITabCtrl_::RemoveItem(struct IDUITabCtrlItem * pItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItem(pItem, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITabCtrl_::RemoveItemByIndex(short  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByIndex(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITabCtrl_::RemoveItemByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByName(xxx_strName, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITabCtrl_::RemoveItemByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrl_::RemoveAllItems()
{

	raw_RemoveAllItems();
}

inline struct IDUITabButton * IDUITabCtrl_::AppendButton(tstring  strName, long  nID, tstring  strText  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	struct IDUITabButton * _result;
	raw_AppendButton(xxx_strName, nID, xxx_strText, &_result);
	return _result;
}

inline struct IDUITabButton * IDUITabCtrl_::InsertButton(short  nIndex, tstring  strName, long  nID, tstring  strText  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	struct IDUITabButton * _result;
	raw_InsertButton(nIndex, xxx_strName, nID, xxx_strText, &_result);
	return _result;
}

inline struct IDUITabButton * IDUITabCtrl_::GetButtonByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITabButton * _result;
	raw_GetButtonByName(xxx_strName, &_result);
	return _result;
}

inline struct IDUITabButton * IDUITabCtrl_::GetButtonByID(long  nID  )
{
	struct IDUITabButton * _result;
	raw_GetButtonByID(nID, &_result);
	return _result;
}

inline struct IDUITabButton * IDUITabCtrl_::GetPreDefineBtnByID(enum DUITABCTRL_BTN_ID  nID  )
{
	struct IDUITabButton * _result;
	raw_GetPreDefineBtnByID(nID, &_result);
	return _result;
}

inline long  IDUITabCtrl_::GetButtonCount()
{
	long  _result;
	raw_GetButtonCount(&_result);
	return _result;
}

inline BOOL  IDUITabCtrl_::RemoveButton(struct IDUITabButton * pButton  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveButton(pButton, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITabCtrl_::RemoveButtonByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveButtonByName(xxx_strName, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITabCtrl_::RemoveButtonByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveButtonByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrl_::RemoveAllButtons()
{

	raw_RemoveAllButtons();
}

inline void IDUITabCtrl_::SetScrollPerStep(short  nScroll  )
{

	raw_SetScrollPerStep(nScroll  );
}

inline short  IDUITabCtrl_::GetScrollPerStep()
{
	short  _result;
	raw_GetScrollPerStep(&_result);
	return _result;
}

inline void IDUITabCtrl_::SetSelectedItem(short  nIndex  )
{

	raw_SetSelectedItem(nIndex  );
}

inline short  IDUITabCtrl_::GetSelectedItem()
{
	short  _result;
	raw_GetSelectedItem(&_result);
	return _result;
}

inline void IDUITabCtrl_::SetControlID(short  nIndex  )
{

	raw_SetControlID(nIndex  );
}

inline short  IDUITabCtrl_::GetControlID()
{
	short  _result;
	raw_GetControlID(&_result);
	return _result;
}

inline struct SkinRect  IDUITabCtrl_::GetItemsRect()
{
	struct SkinRect  _result;
	raw_GetItemsRect(&_result);
	return _result;
}

inline void IDUITabCtrl_::EnableItem(long  nIdIndex, BOOL  bEnable, BOOL  bByIndex  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bByIndex = bByIndex ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableItem(nIdIndex, xxx_bEnable, xxx_bByIndex  );
}

inline BOOL  IDUITabCtrl_::IsEnableItem(long  nIdIndex, BOOL  bByIndex  )
{
	VARIANT_BOOL xxx_bByIndex = bByIndex ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsEnableItem(nIdIndex, xxx_bByIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrl_::SetItemHaveCloseButton(BOOL  bHaveButton, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bHaveButton = bHaveButton ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemHaveCloseButton(xxx_bHaveButton, xxx_bRedraw  );
}

inline BOOL  IDUITabCtrl_::IsItemHaveCloseButton()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsItemHaveCloseButton(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrl_::SetDragable(BOOL  bDragable  )
{
	VARIANT_BOOL xxx_bDragable = bDragable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDragable(xxx_bDragable  );
}

inline void IDUITabCtrl_::SwapItem(struct IDUITabCtrlItem * pFirst, struct IDUITabCtrlItem * pSecond  )
{

	raw_SwapItem(pFirst, pSecond  );
}

inline void IDUITabCtrl_::SetSelShowCloseButton(BOOL  bHaveButton, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bHaveButton = bHaveButton ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSelShowCloseButton(xxx_bHaveButton, xxx_bRedraw  );
}

inline BOOL  IDUITabCtrl_::IsSelShowCloseButton()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsSelShowCloseButton(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrl_::SetAutoDefaultSize(short  nWidth  )
{

	raw_SetAutoDefaultSize(nWidth  );
}

inline struct IDUITabCtrlItem * IDUITabCtrl::AppendItem(tstring  strName, long  nID, tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->AppendItem(strName, nID, strText);
}

inline struct IDUITabCtrlItem * IDUITabCtrl::InsertItem(short  nIndex, tstring  strName, long  nID, tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->InsertItem(nIndex, strName, nID, strText);
}

inline struct IDUITabCtrlItem * IDUITabCtrl::GetItemByIndex(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetItemByIndex(nIndex);
}

inline struct IDUITabCtrlItem * IDUITabCtrl::GetItemByName(tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetItemByName(strName);
}

inline struct IDUITabCtrlItem * IDUITabCtrl::GetItemByID(long  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetItemByID(nID);
}

inline long  IDUITabCtrl::GetItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetItemCount();
}

inline BOOL  IDUITabCtrl::RemoveItem(struct IDUITabCtrlItem * pItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->RemoveItem(pItem);
}

inline BOOL  IDUITabCtrl::RemoveItemByIndex(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->RemoveItemByIndex(nIndex);
}

inline BOOL  IDUITabCtrl::RemoveItemByName(tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->RemoveItemByName(strName);
}

inline BOOL  IDUITabCtrl::RemoveItemByID(long  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->RemoveItemByID(nID);
}

inline void  IDUITabCtrl::RemoveAllItems()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->RemoveAllItems();
}

inline struct IDUITabButton * IDUITabCtrl::AppendButton(tstring  strName, long  nID, tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->AppendButton(strName, nID, strText);
}

inline struct IDUITabButton * IDUITabCtrl::InsertButton(short  nIndex, tstring  strName, long  nID, tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->InsertButton(nIndex, strName, nID, strText);
}

inline struct IDUITabButton * IDUITabCtrl::GetButtonByName(tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetButtonByName(strName);
}

inline struct IDUITabButton * IDUITabCtrl::GetButtonByID(long  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetButtonByID(nID);
}

inline struct IDUITabButton * IDUITabCtrl::GetPreDefineBtnByID(enum DUITABCTRL_BTN_ID  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetPreDefineBtnByID(nID);
}

inline long  IDUITabCtrl::GetButtonCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetButtonCount();
}

inline BOOL  IDUITabCtrl::RemoveButton(struct IDUITabButton * pButton  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->RemoveButton(pButton);
}

inline BOOL  IDUITabCtrl::RemoveButtonByName(tstring  strName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->RemoveButtonByName(strName);
}

inline BOOL  IDUITabCtrl::RemoveButtonByID(long  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->RemoveButtonByID(nID);
}

inline void  IDUITabCtrl::RemoveAllButtons()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->RemoveAllButtons();
}

inline void  IDUITabCtrl::SetScrollPerStep(short  nScroll  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->SetScrollPerStep(nScroll);
}

inline short  IDUITabCtrl::GetScrollPerStep()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetScrollPerStep();
}

inline void  IDUITabCtrl::SetSelectedItem(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->SetSelectedItem(nIndex);
}

inline short  IDUITabCtrl::GetSelectedItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetSelectedItem();
}

inline void  IDUITabCtrl::SetControlID(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->SetControlID(nIndex);
}

inline short  IDUITabCtrl::GetControlID()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetControlID();
}

inline struct SkinRect  IDUITabCtrl::GetItemsRect()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->GetItemsRect();
}

inline void  IDUITabCtrl::EnableItem(long  nIdIndex, BOOL  bEnable, BOOL  bByIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->EnableItem(nIdIndex, bEnable, bByIndex);
}

inline BOOL  IDUITabCtrl::IsEnableItem(long  nIdIndex, BOOL  bByIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->IsEnableItem(nIdIndex, bByIndex);
}

inline void  IDUITabCtrl::SetItemHaveCloseButton(BOOL  bHaveButton, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->SetItemHaveCloseButton(bHaveButton, bRedraw);
}

inline BOOL  IDUITabCtrl::IsItemHaveCloseButton()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->IsItemHaveCloseButton();
}

inline void  IDUITabCtrl::SetDragable(BOOL  bDragable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->SetDragable(bDragable);
}

inline void  IDUITabCtrl::SwapItem(struct IDUITabCtrlItem * pFirst, struct IDUITabCtrlItem * pSecond  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->SwapItem(pFirst, pSecond);
}

inline void  IDUITabCtrl::SetSelShowCloseButton(BOOL  bHaveButton, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->SetSelShowCloseButton(bHaveButton, bRedraw);
}

inline BOOL  IDUITabCtrl::IsSelShowCloseButton()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->IsSelShowCloseButton();
}

inline void  IDUITabCtrl::SetAutoDefaultSize(short  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITabCtrl_*)m_pCtrl)->SetAutoDefaultSize(nWidth);
}

inline void IDUITabCtrlItem::SetName(tstring  strName  )
{
	_bstr_t xxx_strName(strName.c_str());

	raw_SetName(xxx_strName  );
}

inline tstring  IDUITabCtrlItem::GetName()
{
	BSTR _result = NULL;
	raw_GetName(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITabCtrlItem::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUITabCtrlItem::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITabCtrlItem::SetID(long  nID  )
{

	raw_SetID(nID  );
}

inline long  IDUITabCtrlItem::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline void IDUITabCtrlItem::SetTooltip(tstring  strTipText  )
{
	_bstr_t xxx_strTipText(strTipText.c_str());

	raw_SetTooltip(xxx_strTipText  );
}

inline tstring  IDUITabCtrlItem::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITabCtrlItem::SetVisible(BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetVisible(xxx_bVisible  );
}

inline BOOL  IDUITabCtrlItem::IsVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrlItem::SetStatus(enum DUITABITEM_STATE  eStatus  )
{

	raw_SetStatus(eStatus  );
}

inline struct SkinRect  IDUITabCtrlItem::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline void IDUITabCtrlItem::SetGraphic(OLE_HANDLE  hBitmap, enum DUITABITEM_STATE  eState  )
{

	raw_SetGraphic(hBitmap, eState  );
}

inline OLE_HANDLE  IDUITabCtrlItem::GetGraphic()
{
	OLE_HANDLE  _result;
	raw_GetGraphic(&_result);
	return _result;
}

inline void IDUITabCtrlItem::SetIconFilePath(tstring  sFilePath, enum DUITABITEM_STATE  duiTabItemState  )
{
	_bstr_t xxx_sFilePath(sFilePath.c_str());

	raw_SetIconFilePath(xxx_sFilePath, duiTabItemState  );
}

inline void IDUITabCtrlItem::SetIcon(OLE_HANDLE  hIcon  )
{

	raw_SetIcon(hIcon  );
}

inline OLE_HANDLE  IDUITabCtrlItem::GetIcon()
{
	OLE_HANDLE  _result;
	raw_GetIcon(&_result);
	return _result;
}

inline void IDUITabCtrlItem::SetCustomBack(struct IDUIImageBase * pDUIImageBase, enum DUITABITEM_STATE  eState, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCustomBack(pDUIImageBase, eState, xxx_bRedraw  );
}

inline struct IDUIImageBase * IDUITabCtrlItem::GetCustomBack(enum DUITABITEM_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetCustomBack(eState, &_result);
	return _result;
}

inline long  IDUITabCtrlItem::GetIndex()
{
	long  _result;
	raw_GetIndex(&_result);
	return _result;
}

inline void IDUITabCtrlItem::SetHaveCloseButton(BOOL  bHaveButton, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bHaveButton = bHaveButton ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHaveCloseButton(xxx_bHaveButton, xxx_bRedraw  );
}

inline BOOL  IDUITabCtrlItem::IsHaveCloseButton()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsHaveCloseButton(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrlItem::SetWidth(long  nWidth, BOOL  bReCalc  )
{
	VARIANT_BOOL xxx_bReCalc = bReCalc ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetWidth(nWidth, xxx_bReCalc  );
}

inline long  IDUITabCtrlItem::GetWidth()
{
	long  _result;
	raw_GetWidth(&_result);
	return _result;
}

inline void IDUITabButton::SetName(tstring  strName  )
{
	_bstr_t xxx_strName(strName.c_str());

	raw_SetName(xxx_strName  );
}

inline tstring  IDUITabButton::GetName()
{
	BSTR _result = NULL;
	raw_GetName(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITabButton::SetID(long  nID  )
{

	raw_SetID(nID  );
}

inline long  IDUITabButton::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline void IDUITabButton::SetTooltip(tstring  strTipText  )
{
	_bstr_t xxx_strTipText(strTipText.c_str());

	raw_SetTooltip(xxx_strTipText  );
}

inline tstring  IDUITabButton::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITabButton::SetVisible(BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetVisible(xxx_bVisible  );
}

inline BOOL  IDUITabButton::IsVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabButton::SetStatus(enum DUITABITEM_STATE  eStatus  )
{

	raw_SetStatus(eStatus  );
}

inline struct SkinRect  IDUITabButton::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline void IDUITabButton::SetSize(struct SkinSize  sz  )
{

	raw_SetSize(sz  );
}

inline struct SkinSize  IDUITabButton::GetSize()
{
	struct SkinSize  _result;
	raw_GetSize(&_result);
	return _result;
}

inline void IDUITabButton::SetOffset(struct SkinSize  sz  )
{

	raw_SetOffset(sz  );
}

inline struct SkinSize  IDUITabButton::GetOffset()
{
	struct SkinSize  _result;
	raw_GetOffset(&_result);
	return _result;
}

inline void IDUITabButton::SetSpaceWithBlind(short  nSpace  )
{

	raw_SetSpaceWithBlind(nSpace  );
}

inline short  IDUITabButton::GetSpaceWithBlind()
{
	short  _result;
	raw_GetSpaceWithBlind(&_result);
	return _result;
}

inline struct IDUIToolBarItemBase * IDUIToolBar_::InsertItem(short  nIndex, long  nID, tstring  strText, long  nGroupID, enum DUI_TBITEM_STYLE  eStyle, tstring  strTooltip  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strTooltip(strTooltip.c_str());
	struct IDUIToolBarItemBase * _result;
	raw_InsertItem(nIndex, nID, xxx_strText, nGroupID, eStyle, xxx_strTooltip, &_result);
	return _result;
}

inline struct IDUIToolBarItemBase * IDUIToolBar_::AppendItem(long  nID, tstring  strText, long  nGroupID, enum DUI_TBITEM_STYLE  eStyle, tstring  strTooltip  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strTooltip(strTooltip.c_str());
	struct IDUIToolBarItemBase * _result;
	raw_AppendItem(nID, xxx_strText, nGroupID, eStyle, xxx_strTooltip, &_result);
	return _result;
}

inline BOOL  IDUIToolBar_::RemoveItemByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIToolBar_::RemoveItemByIndex(short  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByIndex(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBar_::RemoveAllItems()
{

	raw_RemoveAllItems();
}

inline struct IDUIToolBarItemBase * IDUIToolBar_::GetItem(long  nID  )
{
	struct IDUIToolBarItemBase * _result;
	raw_GetItem(nID, &_result);
	return _result;
}

inline struct IDUIToolBarItemBase * IDUIToolBar_::GetAt(short  nIndex  )
{
	struct IDUIToolBarItemBase * _result;
	raw_GetAt(nIndex, &_result);
	return _result;
}

inline long  IDUIToolBar_::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline struct IDUIToolBarMoreButton * IDUIToolBar_::GetMoreButton()
{
	struct IDUIToolBarMoreButton * _result;
	raw_GetMoreButton(&_result);
	return _result;
}

inline struct IDUIToolBarItemBase * IDUIToolBar_::GetItemByStyle(enum DUI_TBITEM_STYLE  eStyle, long  nID  )
{
	struct IDUIToolBarItemBase * _result;
	raw_GetItemByStyle(eStyle, nID, &_result);
	return _result;
}

inline void IDUIToolBar_::SetAutoSize(BOOL  bAutoSize, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bAutoSize = bAutoSize ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoSize(xxx_bAutoSize, xxx_bRedraw  );
}

inline BOOL  IDUIToolBar_::IsAutoSize()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoSize(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBar_::SetShowText(BOOL  bShowText, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bShowText = bShowText ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowText(xxx_bShowText, xxx_bRedraw  );
}

inline BOOL  IDUIToolBar_::IsShowText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowText(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBar_::SetItemHeight(long  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemHeight(nHeight, xxx_bRedraw  );
}

inline long  IDUIToolBar_::GetItemHeight()
{
	long  _result;
	raw_GetItemHeight(&_result);
	return _result;
}

inline void IDUIToolBar_::SetItemWidth(long  nWidth, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemWidth(nWidth, xxx_bRedraw  );
}

inline long  IDUIToolBar_::GetItemWidth()
{
	long  _result;
	raw_GetItemWidth(&_result);
	return _result;
}

inline void IDUIToolBar_::SetItemSpace(long  nSpace, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemSpace(nSpace, xxx_bRedraw  );
}

inline long  IDUIToolBar_::GetItemSpace()
{
	long  _result;
	raw_GetItemSpace(&_result);
	return _result;
}

inline void IDUIToolBar_::SetIconSize(struct SkinSize  size, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetIconSize(size, xxx_bRedraw  );
}

inline struct SkinSize  IDUIToolBar_::GetIconSize()
{
	struct SkinSize  _result;
	raw_GetIconSize(&_result);
	return _result;
}

inline BOOL  IDUIToolBar_::CancelGroupRadio(long  nGnGroupID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_CancelGroupRadio(nGnGroupID, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIToolBarItemBase * IDUIToolBar::InsertItem(short  nIndex, long  nID, tstring  strText, long  nGroupID, enum DUI_TBITEM_STYLE  eStyle, tstring  strTooltip  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->InsertItem(nIndex, nID, strText, nGroupID, eStyle, strTooltip);
}

inline struct IDUIToolBarItemBase * IDUIToolBar::AppendItem(long  nID, tstring  strText, long  nGroupID, enum DUI_TBITEM_STYLE  eStyle, tstring  strTooltip  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->AppendItem(nID, strText, nGroupID, eStyle, strTooltip);
}

inline BOOL  IDUIToolBar::RemoveItemByID(long  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->RemoveItemByID(nID);
}

inline BOOL  IDUIToolBar::RemoveItemByIndex(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->RemoveItemByIndex(nIndex);
}

inline void  IDUIToolBar::RemoveAllItems()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->RemoveAllItems();
}

inline struct IDUIToolBarItemBase * IDUIToolBar::GetItem(long  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->GetItem(nID);
}

inline struct IDUIToolBarItemBase * IDUIToolBar::GetAt(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->GetAt(nIndex);
}

inline long  IDUIToolBar::GetItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->GetItemCount();
}

inline struct IDUIToolBarMoreButton * IDUIToolBar::GetMoreButton()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->GetMoreButton();
}

inline struct IDUIToolBarItemBase * IDUIToolBar::GetItemByStyle(enum DUI_TBITEM_STYLE  eStyle, long  nID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->GetItemByStyle(eStyle, nID);
}

inline void  IDUIToolBar::SetAutoSize(BOOL  bAutoSize, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->SetAutoSize(bAutoSize, bRedraw);
}

inline BOOL  IDUIToolBar::IsAutoSize()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->IsAutoSize();
}

inline void  IDUIToolBar::SetShowText(BOOL  bShowText, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->SetShowText(bShowText, bRedraw);
}

inline BOOL  IDUIToolBar::IsShowText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->IsShowText();
}

inline void  IDUIToolBar::SetItemHeight(long  nHeight, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->SetItemHeight(nHeight, bRedraw);
}

inline long  IDUIToolBar::GetItemHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->GetItemHeight();
}

inline void  IDUIToolBar::SetItemWidth(long  nWidth, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->SetItemWidth(nWidth, bRedraw);
}

inline long  IDUIToolBar::GetItemWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->GetItemWidth();
}

inline void  IDUIToolBar::SetItemSpace(long  nSpace, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->SetItemSpace(nSpace, bRedraw);
}

inline long  IDUIToolBar::GetItemSpace()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->GetItemSpace();
}

inline void  IDUIToolBar::SetIconSize(struct SkinSize  size, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->SetIconSize(size, bRedraw);
}

inline struct SkinSize  IDUIToolBar::GetIconSize()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->GetIconSize();
}

inline BOOL  IDUIToolBar::CancelGroupRadio(long  nGnGroupID  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIToolBar_*)m_pCtrl)->CancelGroupRadio(nGnGroupID);
}

inline BOOL  IDUIToolBarItemBase::SetID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIToolBarItemBase::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline void IDUIToolBarItemBase::SetSize(int  nWidth, int  nHeight  )
{

	raw_SetSize(nWidth, nHeight  );
}

inline void IDUIToolBarItemBase::GetSize(int * nWidth, int * nHeight  )
{

	raw_GetSize(nWidth, nHeight  );
}

inline enum DUI_TBITEM_STYLE  IDUIToolBarItemBase::GetStyle()
{
	enum DUI_TBITEM_STYLE  _result;
	raw_GetStyle(&_result);
	return _result;
}

inline void IDUIToolBarItemBase::SetObjPtr(OLE_HANDLE  pObjPtr  )
{

	raw_SetObjPtr(pObjPtr  );
}

inline void IDUIToolBarMoreButton::SetSize(int  nWidth, int  nHeight  )
{

	raw_SetSize(nWidth, nHeight  );
}

inline void IDUIToolBarMoreButton::GetSize(int * nWidth, int * nHeight  )
{

	raw_GetSize(nWidth, nHeight  );
}

inline void IDUIToolBarMoreButton::SetVisible(BOOL  bVisible, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetVisible(xxx_bVisible, xxx_bRedraw  );
}

inline BOOL  IDUIToolBarMoreButton::IsVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBarMoreButton::SetState(enum DUI_TBITEM_STATE  eState  )
{

	raw_SetState(eState  );
}

inline enum DUI_TBITEM_STATE  IDUIToolBarMoreButton::GetState()
{
	enum DUI_TBITEM_STATE  _result;
	raw_GetState(&_result);
	return _result;
}

inline BOOL  IDUIToolBarButton::SetText(tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetText(xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIToolBarButton::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIToolBarButton::SetData(OLE_HANDLE  hData  )
{

	raw_SetData(hData  );
}

inline OLE_HANDLE  IDUIToolBarButton::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline void IDUIToolBarButton::SetGraphic(OLE_HANDLE  hBmp, BOOL  bIcon  )
{
	VARIANT_BOOL xxx_bIcon = bIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphic(hBmp, xxx_bIcon  );
}

inline OLE_HANDLE  IDUIToolBarButton::GetGraphic()
{
	OLE_HANDLE  _result;
	raw_GetGraphic(&_result);
	return _result;
}

inline void IDUIToolBarButton::SetState(enum DUI_TBITEM_STATE  eState, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetState(eState, xxx_bRedraw  );
}

inline enum DUI_TBITEM_STATE  IDUIToolBarButton::GetState()
{
	enum DUI_TBITEM_STATE  _result;
	raw_GetState(&_result);
	return _result;
}

inline void IDUIToolBarButton::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  IDUIToolBarButton::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIToolBarButton::SetDisableGraphic(OLE_HANDLE  hBmp, BOOL  bIcon  )
{
	VARIANT_BOOL xxx_bIcon = bIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDisableGraphic(hBmp, xxx_bIcon  );
}

inline struct SkinRect  IDUIToolBarButton::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline void IDUIToolBarCheckButton::SetCheck(BOOL  bCheck  )
{
	VARIANT_BOOL xxx_bCheck = bCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCheck(xxx_bCheck  );
}

inline BOOL  IDUIToolBarCheckButton::GetCheck()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetCheck(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBarRadioButton::SetGroupID(long  nID  )
{

	raw_SetGroupID(nID  );
}

inline long  IDUIToolBarRadioButton::GetGroupID()
{
	long  _result;
	raw_GetGroupID(&_result);
	return _result;
}

inline void IDUIToolBarRadioButton::SetRadio()
{

	raw_SetRadio();
}

inline BOOL  IDUIToolBarRadioButton::GetValue()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetValue(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBarRadioButton::CancelGroupRadio()
{

	raw_CancelGroupRadio();
}

inline BOOL  IDUIToolBarPushExButton::SetID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIToolBarPushExButton::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetSize(int  nWidth, int  nHeight  )
{

	raw_SetSize(nWidth, nHeight  );
}

inline void IDUIToolBarPushExButton::GetSize(int * nWidth, int * nHeight  )
{

	raw_GetSize(nWidth, nHeight  );
}

inline enum DUI_TBITEM_STYLE  IDUIToolBarPushExButton::GetStyle()
{
	enum DUI_TBITEM_STYLE  _result;
	raw_GetStyle(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetObjPtr(OLE_HANDLE  pObjPtr  )
{

	raw_SetObjPtr(pObjPtr  );
}

inline BOOL  IDUIToolBarPushExButton::SetText(tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetText(xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIToolBarPushExButton::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIToolBarPushExButton::SetData(OLE_HANDLE  hData  )
{

	raw_SetData(hData  );
}

inline OLE_HANDLE  IDUIToolBarPushExButton::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetGraphic(OLE_HANDLE  hBmp, BOOL  bIcon  )
{
	VARIANT_BOOL xxx_bIcon = bIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphic(hBmp, xxx_bIcon  );
}

inline OLE_HANDLE  IDUIToolBarPushExButton::GetGraphic()
{
	OLE_HANDLE  _result;
	raw_GetGraphic(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetState(enum DUI_TBITEM_STATE  eState, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetState(eState, xxx_bRedraw  );
}

inline enum DUI_TBITEM_STATE  IDUIToolBarPushExButton::GetState()
{
	enum DUI_TBITEM_STATE  _result;
	raw_GetState(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  IDUIToolBarPushExButton::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIToolBarPushExButton::SetDisableGraphic(OLE_HANDLE  hBmp, BOOL  bIcon  )
{
	VARIANT_BOOL xxx_bIcon = bIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDisableGraphic(hBmp, xxx_bIcon  );
}

inline struct SkinRect  IDUIToolBarPushExButton::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetBtnExId(long  nID  )
{

	raw_SetBtnExId(nID  );
}

inline long  IDUIToolBarPushExButton::GetBtnExId()
{
	long  _result;
	raw_GetBtnExId(&_result);
	return _result;
}

inline long  IDUIStarCtrl_::GetFrames()
{
	long  _result;
	raw_GetFrames(&_result);
	return _result;
}

inline BOOL  IDUIStarCtrl_::SetFrames(long  nFrames, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetFrames(nFrames, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIStarCtrl_::GetCurrPos()
{
	long  _result;
	raw_GetCurrPos(&_result);
	return _result;
}

inline BOOL  IDUIStarCtrl_::SetCurrPos(long  nPos, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetCurrPos(nPos, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStarCtrl_::IsCanSelStar()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsCanSelStar(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIStarCtrl_::SetCanSelStar(BOOL  bCanSelStar  )
{
	VARIANT_BOOL xxx_bCanSelStar = bCanSelStar ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCanSelStar(xxx_bCanSelStar  );
}

inline long  IDUIStarCtrl::GetFrames()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStarCtrl_*)m_pCtrl)->GetFrames();
}

inline BOOL  IDUIStarCtrl::SetFrames(long  nFrames, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStarCtrl_*)m_pCtrl)->SetFrames(nFrames, bRedraw);
}

inline long  IDUIStarCtrl::GetCurrPos()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStarCtrl_*)m_pCtrl)->GetCurrPos();
}

inline BOOL  IDUIStarCtrl::SetCurrPos(long  nPos, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStarCtrl_*)m_pCtrl)->SetCurrPos(nPos, bRedraw);
}

inline BOOL  IDUIStarCtrl::IsCanSelStar()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStarCtrl_*)m_pCtrl)->IsCanSelStar();
}

inline void  IDUIStarCtrl::SetCanSelStar(BOOL  bCanSelStar  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIStarCtrl_*)m_pCtrl)->SetCanSelStar(bCanSelStar);
}

inline OLE_HANDLE  IDUIHwndObj_::GetSafeHwnd(short  nIndex  )
{
	OLE_HANDLE  _result;
	raw_GetSafeHwnd(nIndex, &_result);
	return _result;
}

inline BOOL  IDUIHwndObj_::IsExist(OLE_HANDLE  hWnd  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsExist(hWnd, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHwndObj_::Attach(OLE_HANDLE  hWnd  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_Attach(hWnd, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHwndObj_::Detach(OLE_HANDLE  hWnd  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_Detach(hWnd, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIHwndObj_::MoveHwndObjCtrls(struct SkinRect  rect, BOOL  bPopup  )
{
	VARIANT_BOOL xxx_bPopup = bPopup ? VARIANT_TRUE : VARIANT_FALSE;

	raw_MoveHwndObjCtrls(rect, xxx_bPopup  );
}

inline BOOL  IDUIHwndObj_::ShowWindow(OLE_HANDLE  hWnd  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ShowWindow(hWnd, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHwndObj_::ShowWindowByIndex(short  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ShowWindowByIndex(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIHwndObj_::GetCurHwnd()
{
	OLE_HANDLE  _result;
	raw_GetCurHwnd(&_result);
	return _result;
}

inline BOOL  IDUIHwndObj_::HideCurWindow()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_HideCurWindow(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHwndObj_::ShowCurWindow()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ShowCurWindow(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIHwndObj_::SetClipIntersect(BOOL  bClip  )
{
	VARIANT_BOOL xxx_bClip = bClip ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetClipIntersect(xxx_bClip  );
}

inline BOOL  IDUIHwndObj_::IsClipIntersect()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsClipIntersect(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIHwndObj_::DetachAll()
{

	raw_DetachAll();
}

inline void IDUIHwndObj_::DestroyFloatWindow()
{

	raw_DestroyFloatWindow();
}

inline OLE_HANDLE  IDUIHwndObj::GetSafeHwnd(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->GetSafeHwnd(nIndex);
}

inline BOOL  IDUIHwndObj::IsExist(OLE_HANDLE  hWnd  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->IsExist(hWnd);
}

inline BOOL  IDUIHwndObj::Attach(OLE_HANDLE  hWnd  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->Attach(hWnd);
}

inline BOOL  IDUIHwndObj::Detach(OLE_HANDLE  hWnd  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->Detach(hWnd);
}

inline void  IDUIHwndObj::MoveHwndObjCtrls(struct SkinRect  rect, BOOL  bPopup  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->MoveHwndObjCtrls(rect, bPopup);
}

inline BOOL  IDUIHwndObj::ShowWindow(OLE_HANDLE  hWnd  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->ShowWindow(hWnd);
}

inline BOOL  IDUIHwndObj::ShowWindowByIndex(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->ShowWindowByIndex(nIndex);
}

inline OLE_HANDLE  IDUIHwndObj::GetCurHwnd()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->GetCurHwnd();
}

inline BOOL  IDUIHwndObj::HideCurWindow()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->HideCurWindow();
}

inline BOOL  IDUIHwndObj::ShowCurWindow()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->ShowCurWindow();
}

inline void  IDUIHwndObj::SetClipIntersect(BOOL  bClip  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->SetClipIntersect(bClip);
}

inline BOOL  IDUIHwndObj::IsClipIntersect()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->IsClipIntersect();
}

inline void  IDUIHwndObj::DetachAll()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->DetachAll();
}

inline void  IDUIHwndObj::DestroyFloatWindow()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIHwndObj_*)m_pCtrl)->DestroyFloatWindow();
}

inline BOOL  IDUIComboBox_::SetEditTooltip(tstring  strTooltip  )
{
_bstr_t xxx_strTooltip(strTooltip.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetEditTooltip(xxx_strTooltip, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIComboBox_::GetEditTooltip()
{
	BSTR _result = NULL;
	raw_GetEditTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUIComboBox_::SetButtonTooltip(tstring  strTooltip  )
{
_bstr_t xxx_strTooltip(strTooltip.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetButtonTooltip(xxx_strTooltip, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIComboBox_::GetButtonTooltip()
{
	BSTR _result = NULL;
	raw_GetButtonTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIComboBox_::SetCurrText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetCurrText(xxx_strText  );
}

inline tstring  IDUIComboBox_::GetCurrText()
{
	BSTR _result = NULL;
	raw_GetCurrText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIComboBox_::SetDefText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetDefText(xxx_strText  );
}

inline tstring  IDUIComboBox_::GetDefText()
{
	BSTR _result = NULL;
	raw_GetDefText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline long  IDUIComboBox_::AddItem(tstring  strText, long  nID, OLE_HANDLE  hInfo  )
{
_bstr_t xxx_strText(strText.c_str());
	long  _result;
	raw_AddItem(xxx_strText, nID, hInfo, &_result);
	return _result;
}

inline long  IDUIComboBox_::AddItemWithImage(tstring  strText, tstring  strPath, long  nID, OLE_HANDLE  hInfo  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strPath(strPath.c_str());
	long  _result;
	raw_AddItemWithImage(xxx_strText, xxx_strPath, nID, hInfo, &_result);
	return _result;
}

inline long  IDUIComboBox_::AddItemWithIcon(tstring  strText, OLE_HANDLE  hIcon, long  nID, OLE_HANDLE  hInfo  )
{
_bstr_t xxx_strText(strText.c_str());
	long  _result;
	raw_AddItemWithIcon(xxx_strText, hIcon, nID, hInfo, &_result);
	return _result;
}

inline long  IDUIComboBox_::AddItemWithImgLst(tstring  strText, long  nID, long  nImageIndex  )
{
_bstr_t xxx_strText(strText.c_str());
	long  _result;
	raw_AddItemWithImgLst(xxx_strText, nID, nImageIndex, &_result);
	return _result;
}

inline BOOL  IDUIComboBox_::SetItemText(long  nIndex, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemText(nIndex, xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIComboBox_::GetItemText(long  nIndex  )
{
	BSTR _result = NULL;
	raw_GetItemText(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUIComboBox_::RemoveAt(long  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveAt(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIComboBox_::RemoveAll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveAll(&_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIComboBox_::GetPopupList()
{
	OLE_HANDLE  _result;
	raw_GetPopupList(&_result);
	return _result;
}

inline OLE_HANDLE  IDUIComboBox_::GetImageList()
{
	OLE_HANDLE  _result;
	raw_GetImageList(&_result);
	return _result;
}

inline void IDUIComboBox_::SetImageList(OLE_HANDLE  hImageList  )
{

	raw_SetImageList(hImageList  );
}

inline long  IDUIComboBox_::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline void IDUIComboBox_::SetBorderDrawColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetBorderDrawColor(xxx_bDrawColor, xxx_bRedraw  );
}

inline BOOL  IDUIComboBox_::GetBorderDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetBorderDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIComboBox_::SetBorderImage(short  nIndex, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderImage(nIndex, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIComboBox_::GetBorderImage(short  nIndex  )
{
	struct IDUIImageBase * _result;
	raw_GetBorderImage(nIndex, &_result);
	return _result;
}

inline void IDUIComboBox_::SetCurSel(long  nSelect  )
{

	raw_SetCurSel(nSelect  );
}

inline long  IDUIComboBox_::GetCurSel()
{
	long  _result;
	raw_GetCurSel(&_result);
	return _result;
}

inline void IDUIComboBox_::SetPopupList(OLE_HANDLE  pPoputList  )
{

	raw_SetPopupList(pPoputList  );
}

inline void IDUIComboBox_::SetMaxItemCount(long  nItemCount  )
{

	raw_SetMaxItemCount(nItemCount  );
}

inline long  IDUIComboBox_::GetMaxItemCount()
{
	long  _result;
	raw_GetMaxItemCount(&_result);
	return _result;
}

inline void IDUIComboBox_::SetData(long  nIndex, OLE_HANDLE  hData  )
{

	raw_SetData(nIndex, hData  );
}

inline OLE_HANDLE  IDUIComboBox_::GetData(long  nIndex  )
{
	OLE_HANDLE  _result;
	raw_GetData(nIndex, &_result);
	return _result;
}

inline BOOL  IDUIComboBox_::SetItemTooltip(long  nIndex, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTooltip(nIndex, xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIComboBox_::GetItemTooltip(long  nIndex  )
{
	BSTR _result = NULL;
	raw_GetItemTooltip(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline tstring  IDUIComboBox_::GetItemIdByIndex(long  nIndex  )
{
	BSTR _result = NULL;
	raw_GetItemIdByIndex(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline tstring  IDUIComboBox_::GetItemIdByText(tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	BSTR _result = NULL;
	raw_GetItemIdByText(xxx_strText, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline long  IDUIComboBox_::AddItem2(tstring  strText, tstring  nID, OLE_HANDLE  hInfo  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_nID(nID.c_str());
	long  _result;
	raw_AddItem2(xxx_strText, xxx_nID, hInfo, &_result);
	return _result;
}

inline BOOL  IDUIComboBox::SetEditTooltip(tstring  strTooltip  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetEditTooltip(strTooltip);
}

inline tstring  IDUIComboBox::GetEditTooltip()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetEditTooltip();
}

inline BOOL  IDUIComboBox::SetButtonTooltip(tstring  strTooltip  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetButtonTooltip(strTooltip);
}

inline tstring  IDUIComboBox::GetButtonTooltip()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetButtonTooltip();
}

inline void  IDUIComboBox::SetCurrText(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetCurrText(strText);
}

inline tstring  IDUIComboBox::GetCurrText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetCurrText();
}

inline void  IDUIComboBox::SetDefText(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetDefText(strText);
}

inline tstring  IDUIComboBox::GetDefText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetDefText();
}

inline long  IDUIComboBox::AddItem(tstring  strText, long  nID, OLE_HANDLE  hInfo  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->AddItem(strText, nID, hInfo);
}

inline long  IDUIComboBox::AddItemWithImage(tstring  strText, tstring  strPath, long  nID, OLE_HANDLE  hInfo  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->AddItemWithImage(strText, strPath, nID, hInfo);
}

inline long  IDUIComboBox::AddItemWithIcon(tstring  strText, OLE_HANDLE  hIcon, long  nID, OLE_HANDLE  hInfo  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->AddItemWithIcon(strText, hIcon, nID, hInfo);
}

inline long  IDUIComboBox::AddItemWithImgLst(tstring  strText, long  nID, long  nImageIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->AddItemWithImgLst(strText, nID, nImageIndex);
}

inline BOOL  IDUIComboBox::SetItemText(long  nIndex, tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetItemText(nIndex, strText);
}

inline tstring  IDUIComboBox::GetItemText(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetItemText(nIndex);
}

inline BOOL  IDUIComboBox::RemoveAt(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->RemoveAt(nIndex);
}

inline BOOL  IDUIComboBox::RemoveAll()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->RemoveAll();
}

inline OLE_HANDLE  IDUIComboBox::GetPopupList()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetPopupList();
}

inline OLE_HANDLE  IDUIComboBox::GetImageList()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetImageList();
}

inline void  IDUIComboBox::SetImageList(OLE_HANDLE  hImageList  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetImageList(hImageList);
}

inline long  IDUIComboBox::GetItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetItemCount();
}

inline void  IDUIComboBox::SetBorderDrawColor(BOOL  bDrawColor, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetBorderDrawColor(bDrawColor, bRedraw);
}

inline BOOL  IDUIComboBox::GetBorderDrawColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetBorderDrawColor();
}

inline BOOL  IDUIComboBox::SetBorderImage(short  nIndex, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetBorderImage(nIndex, pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUIComboBox::GetBorderImage(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetBorderImage(nIndex);
}

inline void  IDUIComboBox::SetCurSel(long  nSelect  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetCurSel(nSelect);
}

inline long  IDUIComboBox::GetCurSel()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetCurSel();
}

inline void IDUIComboBox::SetPopupList(IDUIControlBase*  pPopSingleList  )
 {
 if(pPopSingleList == NULL)
   return;
 
   ((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);
 
   return ((IDUIComboBox_*)m_pCtrl)->SetPopupList(pPopSingleList->m_pDataBlock);
 }
 
inline void  IDUIComboBox::SetMaxItemCount(long  nItemCount  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetMaxItemCount(nItemCount);
}

inline long  IDUIComboBox::GetMaxItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetMaxItemCount();
}

inline void  IDUIComboBox::SetData(long  nIndex, OLE_HANDLE  hData  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetData(nIndex, hData);
}

inline OLE_HANDLE  IDUIComboBox::GetData(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetData(nIndex);
}

inline BOOL  IDUIComboBox::SetItemTooltip(long  nIndex, tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->SetItemTooltip(nIndex, strText);
}

inline tstring  IDUIComboBox::GetItemTooltip(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetItemTooltip(nIndex);
}

inline tstring  IDUIComboBox::GetItemIdByIndex(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetItemIdByIndex(nIndex);
}

inline tstring  IDUIComboBox::GetItemIdByText(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->GetItemIdByText(strText);
}

inline long  IDUIComboBox::AddItem2(tstring  strText, tstring  nID, OLE_HANDLE  hInfo  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIComboBox_*)m_pCtrl)->AddItem2(strText, nID, hInfo);
}

inline void IDUIPopupMenu_::TrackPopupMenu(enum DUI_TPMSTYLE  eFlags, short  nX, short  nY, OLE_HANDLE  hWnd  )
{

	raw_TrackPopupMenu(eFlags, nX, nY, hWnd  );
}

inline OLE_HANDLE  IDUIPopupMenu_::CreatePopupMenu()
{
	OLE_HANDLE  _result;
	raw_CreatePopupMenu(&_result);
	return _result;
}

inline struct IDUIMenuItemBase * IDUIPopupMenu_::AppendMenu(long  nID, tstring  strName, tstring  strText, long  nGroupID, enum DUI_MENUITEM_STYLE  eStyle, BOOL  bIsPopupSytle, BOOL  bRecalculate  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bIsPopupSytle = bIsPopupSytle ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRecalculate = bRecalculate ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_AppendMenu(nID, xxx_strName, xxx_strText, nGroupID, eStyle, xxx_bIsPopupSytle, xxx_bRecalculate, &_result);
	return _result;
}

inline struct IDUIMenuItemBase * IDUIPopupMenu_::InsertMenu(short  nIndex, long  nID, tstring  strName, tstring  strText, long  nGroupID, enum DUI_MENUITEM_STYLE  eStyle, BOOL  bIsPopupSytle, BOOL  bRecalculate  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bIsPopupSytle = bIsPopupSytle ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRecalculate = bRecalculate ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_InsertMenu(nIndex, nID, xxx_strName, xxx_strText, nGroupID, eStyle, xxx_bIsPopupSytle, xxx_bRecalculate, &_result);
	return _result;
}

inline BOOL  IDUIPopupMenu_::RemoveMenu(long  nItem, BOOL  bByPos  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveMenu(nItem, xxx_bByPos, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIMenuItemBase * IDUIPopupMenu_::GetMenu(long  nItem, BOOL  bByPos, enum DUI_MENUITEM_STYLE  eStyle  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_GetMenu(nItem, xxx_bByPos, eStyle, &_result);
	return _result;
}

inline long  IDUIPopupMenu_::GetMenuItemCount()
{
	long  _result;
	raw_GetMenuItemCount(&_result);
	return _result;
}

inline struct IPopMenu * IDUIPopupMenu_::GetSubMenu(short  nIndex  )
{
	struct IPopMenu * _result;
	raw_GetSubMenu(nIndex, &_result);
	return _result;
}

inline BOOL  IDUIPopupMenu_::IsMenuVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsMenuVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIPopupMenu_::GetHandle()
{
	OLE_HANDLE  _result;
	raw_GetHandle(&_result);
	return _result;
}

inline void IDUIPopupMenu_::SetMenuPos(short  x, short  y  )
{

	raw_SetMenuPos(x, y  );
}

inline tstring  IDUIPopupMenu_::GetMenuTextByIndex(short  nIndex  )
{
	BSTR _result = NULL;
	raw_GetMenuTextByIndex(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline long  IDUIPopupMenu_::GetMenuItemID(short  nIndex  )
{
	long  _result;
	raw_GetMenuItemID(nIndex, &_result);
	return _result;
}

inline void IDUIPopupMenu_::SetOwnerWnd(OLE_HANDLE  hWnd  )
{

	raw_SetOwnerWnd(hWnd  );
}

inline void IDUIPopupMenu_::SetMenuRect(struct SkinRect  rect  )
{

	raw_SetMenuRect(rect  );
}

inline void IDUIPopupMenu_::SetOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	raw_SetOwnerCtrl(pOwnerCtrl  );
}

inline OLE_HANDLE  IDUIPopupMenu_::GetOwnerCtrl()
{
	OLE_HANDLE  _result;
	raw_GetOwnerCtrl(&_result);
	return _result;
}

inline void IDUIPopupMenu_::SetItemVisible(long  nItem, BOOL  bByPos, BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemVisible(nItem, xxx_bByPos, xxx_bVisible  );
}

inline void IDUIPopupMenu_::EnableMenuItem(long  nItem, BOOL  bByPos, BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableMenuItem(nItem, xxx_bByPos, xxx_bEnable  );
}

inline void IDUIPopupMenu_::SetEventRecieve(struct IDirectUI * pDirectUI  )
{

	raw_SetEventRecieve(pDirectUI  );
}

inline struct IDirectUI * IDUIPopupMenu_::GetEventRecieve()
{
	struct IDirectUI * _result;
	raw_GetEventRecieve(&_result);
	return _result;
}

inline void IDUIPopupMenu_::SetAutoCheck(BOOL  bAutoCheck  )
{
	VARIANT_BOOL xxx_bAutoCheck = bAutoCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoCheck(xxx_bAutoCheck  );
}

inline BOOL  IDUIPopupMenu_::GetAutoCheck()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetAutoCheck(&_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIPopupMenu_::TrackPopupMenuEx(enum DUI_TPMSTYLE  eFlags, short  nX, short  nY, OLE_HANDLE  hWnd  )
{
	long  _result;
	raw_TrackPopupMenuEx(eFlags, nX, nY, hWnd, &_result);
	return _result;
}

inline void IDUIPopupMenu_::SetUseStandardMenu(BOOL  bAutoCheck  )
{
	VARIANT_BOOL xxx_bAutoCheck = bAutoCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseStandardMenu(xxx_bAutoCheck  );
}

inline BOOL  IDUIPopupMenu_::GetUseStandardMenu()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetUseStandardMenu(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupMenu_::SetStandardMenuHanlde(OLE_HANDLE  hMenuHandle  )
{

	raw_SetStandardMenuHanlde(hMenuHandle  );
}

inline OLE_HANDLE  IDUIPopupMenu_::GetStandardMenuHanlde()
{
	OLE_HANDLE  _result;
	raw_GetStandardMenuHanlde(&_result);
	return _result;
}

inline enum DUI_RENDERENGINE_TYPE  IDUIPopupMenu_::GetRenderType()
{
	enum DUI_RENDERENGINE_TYPE  _result;
	raw_GetRenderType(&_result);
	return _result;
}

inline void IDUIPopupMenu_::SetRenderType(enum DUI_RENDERENGINE_TYPE  eRenderType  )
{

	raw_SetRenderType(eRenderType  );
}

inline void IDUIPopupMenu_::SetMenuVisible(BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetMenuVisible(xxx_bShow  );
}

inline void IDUIPopupMenu_::SetDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDrawColor(xxx_bDrawColor  );
}

inline void IDUIPopupMenu_::SetBackColor(struct IFillColor * pFillColor  )
{

	raw_SetBackColor(pFillColor  );
}

inline void IDUIPopupMenu_::SetBackImage(struct IDUIImageBase * pBackImage  )
{

	raw_SetBackImage(pBackImage  );
}

inline void IDUIPopupMenu_::SetItemDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemDrawColor(xxx_bDrawColor  );
}

inline void IDUIPopupMenu_::SetItemLeftSpace(long  nLeftSpace  )
{

	raw_SetItemLeftSpace(nLeftSpace  );
}

inline void IDUIPopupMenu_::SetItemRightSpace(long  nRightSpace  )
{

	raw_SetItemRightSpace(nRightSpace  );
}

inline void IDUIPopupMenu_::SetMoreArrowWidth(long  nWidth  )
{

	raw_SetMoreArrowWidth(nWidth  );
}

inline void IDUIPopupMenu_::SetItemImage(enum DUI_MENUITEM_STATE  eState, struct IDUIImageBase * pImage  )
{

	raw_SetItemImage(eState, pImage  );
}

inline void IDUIPopupMenu_::SetItemColor(enum DUI_MENUITEM_STATE  eState, struct IFillColor * pFillColor  )
{

	raw_SetItemColor(eState, pFillColor  );
}

inline void IDUIPopupMenu_::SetTextStyle(enum DUI_MENUITEM_STATE  eState, struct IDUITextStyle * pStyle  )
{

	raw_SetTextStyle(eState, pStyle  );
}

inline void IDUIPopupMenu_::SetMoreArrowImage(enum DUI_MENUITEM_STATE  eState, struct IDUIImageBase * pImage  )
{

	raw_SetMoreArrowImage(eState, pImage  );
}

inline void IDUIPopupMenu_::SetItemHeight(long  nItemHeight  )
{

	raw_SetItemHeight(nItemHeight  );
}

inline void IDUIPopupMenu_::SetItemSpace(long  nItemSpace  )
{

	raw_SetItemSpace(nItemSpace  );
}

inline void IDUIPopupMenu_::SetMinWidth(long  nMinWidth  )
{

	raw_SetMinWidth(nMinWidth  );
}

inline void IDUIPopupMenu_::SetMaxWidth(long  nMaxWidth  )
{

	raw_SetMaxWidth(nMaxWidth  );
}

inline void IDUIPopupMenu_::SetMaxHeight(long  nMaxHeight  )
{

	raw_SetMaxHeight(nMaxHeight  );
}

inline void IDUIPopupMenu_::SetSeparatorDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSeparatorDrawColor(xxx_bDrawColor  );
}

inline void IDUIPopupMenu_::SetSeparatorColor(struct IFillColor * pFillColor  )
{

	raw_SetSeparatorColor(pFillColor  );
}

inline void IDUIPopupMenu_::SetSeparatorImage(struct IDUIImageBase * pImage  )
{

	raw_SetSeparatorImage(pImage  );
}

inline void IDUIPopupMenu_::SetSeparatorHeight(long  nHeight  )
{

	raw_SetSeparatorHeight(nHeight  );
}

inline void IDUIPopupMenu_::SetSeparatorLeftSpace(long  nLeftSpace  )
{

	raw_SetSeparatorLeftSpace(nLeftSpace  );
}

inline void IDUIPopupMenu_::SetSeparatorRightSpace(long  nRightSpace  )
{

	raw_SetSeparatorRightSpace(nRightSpace  );
}

inline void IDUIPopupMenu_::SetSeparatorSpaceWithItem(long  nSpace  )
{

	raw_SetSeparatorSpaceWithItem(nSpace  );
}

inline void IDUIPopupMenu_::SetCheckImage(enum DUI_MENUITEM_STATE  eState, struct IDUIImageBase * pImage  )
{

	raw_SetCheckImage(eState, pImage  );
}

inline void IDUIPopupMenu_::SetRadioImage(enum DUI_MENUITEM_STATE  eState, struct IDUIImageBase * pImage  )
{

	raw_SetRadioImage(eState, pImage  );
}

inline void IDUIPopupMenu_::SetIconAutoSize(BOOL  bAutoResize  )
{
	VARIANT_BOOL xxx_bAutoResize = bAutoResize ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetIconAutoSize(xxx_bAutoResize  );
}

inline void IDUIPopupMenu_::SetIconAutoWidth(long  nAutoWidth  )
{

	raw_SetIconAutoWidth(nAutoWidth  );
}

inline void IDUIPopupMenu_::SetIconAutoHeight(long  nAutoHeight  )
{

	raw_SetIconAutoHeight(nAutoHeight  );
}

inline void IDUIPopupMenu_::SetIconAutoCenter(BOOL  bAutoCenter  )
{
	VARIANT_BOOL xxx_bAutoCenter = bAutoCenter ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetIconAutoCenter(xxx_bAutoCenter  );
}

inline void IDUIPopupMenu_::SetIconOffsetX(long  nOffsetX  )
{

	raw_SetIconOffsetX(nOffsetX  );
}

inline void IDUIPopupMenu_::SetIconOffsetY(long  nOffsetY  )
{

	raw_SetIconOffsetY(nOffsetY  );
}

inline void IDUIPopupMenu_::RemoveAllItem()
{

	raw_RemoveAllItem();
}

inline void  IDUIPopupMenu::TrackPopupMenu(enum DUI_TPMSTYLE  eFlags, short  nX, short  nY, OLE_HANDLE  hWnd  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->TrackPopupMenu(eFlags, nX, nY, hWnd);
}

inline OLE_HANDLE  IDUIPopupMenu::CreatePopupMenu()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->CreatePopupMenu();
}

inline struct IDUIMenuItemBase * IDUIPopupMenu::AppendMenu(long  nID, tstring  strName, tstring  strText, long  nGroupID, enum DUI_MENUITEM_STYLE  eStyle, BOOL  bIsPopupSytle, BOOL  bRecalculate  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->AppendMenu(nID, strName, strText, nGroupID, eStyle, bIsPopupSytle, bRecalculate);
}

inline struct IDUIMenuItemBase * IDUIPopupMenu::InsertMenu(short  nIndex, long  nID, tstring  strName, tstring  strText, long  nGroupID, enum DUI_MENUITEM_STYLE  eStyle, BOOL  bIsPopupSytle, BOOL  bRecalculate  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->InsertMenu(nIndex, nID, strName, strText, nGroupID, eStyle, bIsPopupSytle, bRecalculate);
}

inline BOOL  IDUIPopupMenu::RemoveMenu(long  nItem, BOOL  bByPos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->RemoveMenu(nItem, bByPos);
}

inline struct IDUIMenuItemBase * IDUIPopupMenu::GetMenu(long  nItem, BOOL  bByPos, enum DUI_MENUITEM_STYLE  eStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetMenu(nItem, bByPos, eStyle);
}

inline long  IDUIPopupMenu::GetMenuItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetMenuItemCount();
}

inline struct IPopMenu * IDUIPopupMenu::GetSubMenu(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetSubMenu(nIndex);
}

inline BOOL  IDUIPopupMenu::IsMenuVisible()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->IsMenuVisible();
}

inline OLE_HANDLE  IDUIPopupMenu::GetHandle()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetHandle();
}

inline void  IDUIPopupMenu::SetMenuPos(short  x, short  y  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetMenuPos(x, y);
}

inline tstring  IDUIPopupMenu::GetMenuTextByIndex(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetMenuTextByIndex(nIndex);
}

inline long  IDUIPopupMenu::GetMenuItemID(short  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetMenuItemID(nIndex);
}

inline void  IDUIPopupMenu::SetOwnerWnd(OLE_HANDLE  hWnd  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetOwnerWnd(hWnd);
}

inline void  IDUIPopupMenu::SetMenuRect(struct SkinRect  rect  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetMenuRect(rect);
}

inline void  IDUIPopupMenu::SetOwnerCtrl(OLE_HANDLE  pOwnerCtrl  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetOwnerCtrl(pOwnerCtrl);
}

inline OLE_HANDLE  IDUIPopupMenu::GetOwnerCtrl()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetOwnerCtrl();
}

inline void  IDUIPopupMenu::SetItemVisible(long  nItem, BOOL  bByPos, BOOL  bVisible  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetItemVisible(nItem, bByPos, bVisible);
}

inline void  IDUIPopupMenu::EnableMenuItem(long  nItem, BOOL  bByPos, BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->EnableMenuItem(nItem, bByPos, bEnable);
}

inline void  IDUIPopupMenu::SetEventRecieve(struct IDirectUI * pDirectUI  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetEventRecieve(pDirectUI);
}

inline struct IDirectUI * IDUIPopupMenu::GetEventRecieve()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetEventRecieve();
}

inline void  IDUIPopupMenu::SetAutoCheck(BOOL  bAutoCheck  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetAutoCheck(bAutoCheck);
}

inline BOOL  IDUIPopupMenu::GetAutoCheck()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetAutoCheck();
}

inline long  IDUIPopupMenu::TrackPopupMenuEx(enum DUI_TPMSTYLE  eFlags, short  nX, short  nY, OLE_HANDLE  hWnd  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->TrackPopupMenuEx(eFlags, nX, nY, hWnd);
}

inline void  IDUIPopupMenu::SetUseStandardMenu(BOOL  bAutoCheck  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetUseStandardMenu(bAutoCheck);
}

inline BOOL  IDUIPopupMenu::GetUseStandardMenu()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetUseStandardMenu();
}

inline void  IDUIPopupMenu::SetStandardMenuHanlde(OLE_HANDLE  hMenuHandle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetStandardMenuHanlde(hMenuHandle);
}

inline OLE_HANDLE  IDUIPopupMenu::GetStandardMenuHanlde()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetStandardMenuHanlde();
}

inline enum DUI_RENDERENGINE_TYPE  IDUIPopupMenu::GetRenderType()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->GetRenderType();
}

inline void  IDUIPopupMenu::SetRenderType(enum DUI_RENDERENGINE_TYPE  eRenderType  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetRenderType(eRenderType);
}

inline void  IDUIPopupMenu::SetMenuVisible(BOOL  bShow  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetMenuVisible(bShow);
}

inline void  IDUIPopupMenu::SetDrawColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetDrawColor(bDrawColor);
}

inline void  IDUIPopupMenu::SetBackColor(struct IFillColor * pFillColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetBackColor(pFillColor);
}

inline void  IDUIPopupMenu::SetBackImage(struct IDUIImageBase * pBackImage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetBackImage(pBackImage);
}

inline void  IDUIPopupMenu::SetItemDrawColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetItemDrawColor(bDrawColor);
}

inline void  IDUIPopupMenu::SetItemLeftSpace(long  nLeftSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetItemLeftSpace(nLeftSpace);
}

inline void  IDUIPopupMenu::SetItemRightSpace(long  nRightSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetItemRightSpace(nRightSpace);
}

inline void  IDUIPopupMenu::SetMoreArrowWidth(long  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetMoreArrowWidth(nWidth);
}

inline void  IDUIPopupMenu::SetItemImage(enum DUI_MENUITEM_STATE  eState, struct IDUIImageBase * pImage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetItemImage(eState, pImage);
}

inline void  IDUIPopupMenu::SetItemColor(enum DUI_MENUITEM_STATE  eState, struct IFillColor * pFillColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetItemColor(eState, pFillColor);
}

inline void  IDUIPopupMenu::SetTextStyle(enum DUI_MENUITEM_STATE  eState, struct IDUITextStyle * pStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetTextStyle(eState, pStyle);
}

inline void  IDUIPopupMenu::SetMoreArrowImage(enum DUI_MENUITEM_STATE  eState, struct IDUIImageBase * pImage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetMoreArrowImage(eState, pImage);
}

inline void  IDUIPopupMenu::SetItemHeight(long  nItemHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetItemHeight(nItemHeight);
}

inline void  IDUIPopupMenu::SetItemSpace(long  nItemSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetItemSpace(nItemSpace);
}

inline void  IDUIPopupMenu::SetMinWidth(long  nMinWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetMinWidth(nMinWidth);
}

inline void  IDUIPopupMenu::SetMaxWidth(long  nMaxWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetMaxWidth(nMaxWidth);
}

inline void  IDUIPopupMenu::SetMaxHeight(long  nMaxHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetMaxHeight(nMaxHeight);
}

inline void  IDUIPopupMenu::SetSeparatorDrawColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetSeparatorDrawColor(bDrawColor);
}

inline void  IDUIPopupMenu::SetSeparatorColor(struct IFillColor * pFillColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetSeparatorColor(pFillColor);
}

inline void  IDUIPopupMenu::SetSeparatorImage(struct IDUIImageBase * pImage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetSeparatorImage(pImage);
}

inline void  IDUIPopupMenu::SetSeparatorHeight(long  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetSeparatorHeight(nHeight);
}

inline void  IDUIPopupMenu::SetSeparatorLeftSpace(long  nLeftSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetSeparatorLeftSpace(nLeftSpace);
}

inline void  IDUIPopupMenu::SetSeparatorRightSpace(long  nRightSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetSeparatorRightSpace(nRightSpace);
}

inline void  IDUIPopupMenu::SetSeparatorSpaceWithItem(long  nSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetSeparatorSpaceWithItem(nSpace);
}

inline void  IDUIPopupMenu::SetCheckImage(enum DUI_MENUITEM_STATE  eState, struct IDUIImageBase * pImage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetCheckImage(eState, pImage);
}

inline void  IDUIPopupMenu::SetRadioImage(enum DUI_MENUITEM_STATE  eState, struct IDUIImageBase * pImage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetRadioImage(eState, pImage);
}

inline void  IDUIPopupMenu::SetIconAutoSize(BOOL  bAutoResize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetIconAutoSize(bAutoResize);
}

inline void  IDUIPopupMenu::SetIconAutoWidth(long  nAutoWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetIconAutoWidth(nAutoWidth);
}

inline void  IDUIPopupMenu::SetIconAutoHeight(long  nAutoHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetIconAutoHeight(nAutoHeight);
}

inline void  IDUIPopupMenu::SetIconAutoCenter(BOOL  bAutoCenter  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetIconAutoCenter(bAutoCenter);
}

inline void  IDUIPopupMenu::SetIconOffsetX(long  nOffsetX  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetIconOffsetX(nOffsetX);
}

inline void  IDUIPopupMenu::SetIconOffsetY(long  nOffsetY  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->SetIconOffsetY(nOffsetY);
}

inline void  IDUIPopupMenu::RemoveAllItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIPopupMenu_*)m_pCtrl)->RemoveAllItem();
}

inline void IDUIMenuItemBase::SetID(long  nID  )
{

	raw_SetID(nID  );
}

inline long  IDUIMenuItemBase::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline enum DUI_MENUITEM_STYLE  IDUIMenuItemBase::GetStyle()
{
	enum DUI_MENUITEM_STYLE  _result;
	raw_GetStyle(&_result);
	return _result;
}

inline void IDUIMenuItemBase::SetObjPtr(OLE_HANDLE  pObjPtr  )
{

	raw_SetObjPtr(pObjPtr  );
}

inline void IDUIMenuItemBase::SetVisible(BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetVisible(xxx_bVisible  );
}

inline void IDUIMenuItemBase::GetVisible(VARIANT_BOOL * pbResult  )
{

	raw_GetVisible(pbResult  );
}

inline void IPopMenu::TrackPopupMenu(enum DUI_TPMSTYLE  eFlags, short  nX, short  nY, OLE_HANDLE  hWnd  )
{

	raw_TrackPopupMenu(eFlags, nX, nY, hWnd  );
}

inline struct IDUIMenuItemBase * IPopMenu::AppendMenu(long  nID, tstring  strName, tstring  strText, long  nGroupID, enum DUI_MENUITEM_STYLE  eStyle, BOOL  bIsPopupStyle, BOOL  bRecalculate  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bIsPopupStyle = bIsPopupStyle ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRecalculate = bRecalculate ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_AppendMenu(nID, xxx_strName, xxx_strText, nGroupID, eStyle, xxx_bIsPopupStyle, xxx_bRecalculate, &_result);
	return _result;
}

inline struct IDUIMenuItemBase * IPopMenu::InsertMenu(short  nIndex, long  nID, tstring  strName, tstring  strText, long  nGroupID, enum DUI_MENUITEM_STYLE  eStyle, BOOL  bIsPopupStyle, BOOL  bRecalculate  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bIsPopupStyle = bIsPopupStyle ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRecalculate = bRecalculate ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_InsertMenu(nIndex, nID, xxx_strName, xxx_strText, nGroupID, eStyle, xxx_bIsPopupStyle, xxx_bRecalculate, &_result);
	return _result;
}

inline BOOL  IPopMenu::RemoveMenu(long  nItem, BOOL  bByPos  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveMenu(nItem, xxx_bByPos, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIMenuItemBase * IPopMenu::GetMenu(long  nItem, BOOL  bByPos, enum DUI_MENUITEM_STYLE  eStyle  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_GetMenu(nItem, xxx_bByPos, eStyle, &_result);
	return _result;
}

inline long  IPopMenu::GetMenuItemCount()
{
	long  _result;
	raw_GetMenuItemCount(&_result);
	return _result;
}

inline struct IPopMenu * IPopMenu::GetSubMenu(short  nIndex  )
{
	struct IPopMenu * _result;
	raw_GetSubMenu(nIndex, &_result);
	return _result;
}

inline BOOL  IPopMenu::IsMenuVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsMenuVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IPopMenu::GetHandle()
{
	OLE_HANDLE  _result;
	raw_GetHandle(&_result);
	return _result;
}

inline void IPopMenu::SetMenuPos(short  x, short  y  )
{

	raw_SetMenuPos(x, y  );
}

inline tstring  IPopMenu::GetMenuTextByIndex(short  nIndex  )
{
	BSTR _result = NULL;
	raw_GetMenuTextByIndex(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline long  IPopMenu::GetMenuItemID(short  nIndex  )
{
	long  _result;
	raw_GetMenuItemID(nIndex, &_result);
	return _result;
}

inline void IPopMenu::SetItemVisible(long  nItem, BOOL  bByPos, BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemVisible(nItem, xxx_bByPos, xxx_bVisible  );
}

inline void IPopMenu::EnableMenuItem(long  nItem, BOOL  bByPos, BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableMenuItem(nItem, xxx_bByPos, xxx_bEnable  );
}

inline void IPopMenu::SetMenuBar(OLE_HANDLE  hMenuBar  )
{

	raw_SetMenuBar(hMenuBar  );
}

inline OLE_HANDLE  IPopMenu::GetMenuBar()
{
	OLE_HANDLE  _result;
	raw_GetMenuBar(&_result);
	return _result;
}

inline void IPopMenu::UnSelRadioGroup(long  nMenuBar  )
{

	raw_UnSelRadioGroup(nMenuBar  );
}

inline void IDUIMenuItem::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline void IDUIMenuItem::GetText(BSTR * pstrResult  )
{

	raw_GetText(pstrResult  );
}

inline void IDUIMenuItem::SetData(OLE_HANDLE  pData  )
{

	raw_SetData(pData  );
}

inline void IDUIMenuItem::GetData(OLE_HANDLE * phResult  )
{

	raw_GetData(phResult  );
}

inline void IDUIMenuItem::SetHotKey(tstring  strHotKey  )
{
	_bstr_t xxx_strHotKey(strHotKey.c_str());

	raw_SetHotKey(xxx_strHotKey  );
}

inline void IDUIMenuItem::GetHotKey(BSTR * pstrResult  )
{

	raw_GetHotKey(pstrResult  );
}

inline void IDUIMenuItem::SetState(enum DUI_MENUITEM_STATE  eState  )
{

	raw_SetState(eState  );
}

inline void IDUIMenuItem::GetState(enum DUI_MENUITEM_STATE * peResult  )
{

	raw_GetState(peResult  );
}

inline void IDUIMenuPushItem::SetGraphic(tstring  strImage  )
{
	_bstr_t xxx_strImage(strImage.c_str());

	raw_SetGraphic(xxx_strImage  );
}

inline tstring  IDUIMenuPushItem::GetGraphic()
{
	BSTR _result = NULL;
	raw_GetGraphic(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIMenuPushItem::SetPopStyle(BOOL  bIsPopupStyle  )
{
	VARIANT_BOOL xxx_bIsPopupStyle = bIsPopupStyle ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetPopStyle(xxx_bIsPopupStyle  );
}

inline BOOL  IDUIMenuPushItem::GetPopStyle()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetPopStyle(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIMenuPushItem::SetGraphicFromImageBase(enum DUI_MENUITEM_STATE  nState, struct IDUIImageBase * pImageBase  )
{

	raw_SetGraphicFromImageBase(nState, pImageBase  );
}

inline void IDUIMenuPushItem::SetGraphicBitmap(enum DUI_MENUITEM_STATE  nState, OLE_HANDLE  hBitmap  )
{

	raw_SetGraphicBitmap(nState, hBitmap  );
}

inline void IDUIMenuCheckItem::SetCheck(enum DUI_MENUITEM_VALUE  eValue  )
{

	raw_SetCheck(eValue  );
}

inline enum DUI_MENUITEM_VALUE  IDUIMenuCheckItem::GetCheck()
{
	enum DUI_MENUITEM_VALUE  _result;
	raw_GetCheck(&_result);
	return _result;
}

inline void IDUIMenuCheckItem::SetGraphicBitmap(enum DUI_MENUITEM_STATE  eStatus, OLE_HANDLE  hBitmap  )
{

	raw_SetGraphicBitmap(eStatus, hBitmap  );
}

inline OLE_HANDLE  IDUIMenuCheckItem::GetGraphicBitmap(enum DUI_MENUITEM_STATE  eStatus  )
{
	OLE_HANDLE  _result;
	raw_GetGraphicBitmap(eStatus, &_result);
	return _result;
}

inline void IDUIMenuRadioItem::SetGroupID(long  nID  )
{

	raw_SetGroupID(nID  );
}

inline long  IDUIMenuRadioItem::GetGroupID()
{
	long  _result;
	raw_GetGroupID(&_result);
	return _result;
}

inline void IDUIMenuRadioItem::SetRadio()
{

	raw_SetRadio();
}

inline enum DUI_MENUITEM_VALUE  IDUIMenuRadioItem::GetValue()
{
	enum DUI_MENUITEM_VALUE  _result;
	raw_GetValue(&_result);
	return _result;
}

inline void IDUIMenuRadioItem::SetGraphicBitmap(enum DUI_MENUITEM_STATE  eStatus, OLE_HANDLE  hBitmap  )
{

	raw_SetGraphicBitmap(eStatus, hBitmap  );
}

inline OLE_HANDLE  IDUIMenuRadioItem::GetGraphicBitmap(enum DUI_MENUITEM_STATE  eStatus  )
{
	OLE_HANDLE  _result;
	raw_GetGraphicBitmap(eStatus, &_result);
	return _result;
}

inline void IDUILogoObj_::DestroyLogoImage()
{

	raw_DestroyLogoImage();
}

inline void IDUILogoObj_::SetImageHandle(OLE_HANDLE  hBitmap  )
{

	raw_SetImageHandle(hBitmap  );
}

inline BOOL  IDUILogoObj_::SetBackImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUILogoObj_::GetBackImage()
{
	struct IDUIImageBase * _result;
	raw_GetBackImage(&_result);
	return _result;
}

inline void IDUILogoObj_::SetImageHandleEx(OLE_HANDLE  hBitmap, long  nX, long  nY, long  nWidth, long  nHeight  )
{

	raw_SetImageHandleEx(hBitmap, nX, nY, nWidth, nHeight  );
}

inline void IDUILogoObj_::GetState(enum DUI_LOGOBJSTATE * pResult  )
{

	raw_GetState(pResult  );
}

inline void IDUILogoObj_::SetState(enum DUI_LOGOBJSTATE  eState  )
{

	raw_SetState(eState  );
}

inline void IDUILogoObj_::SetImageBorder(long  nLeft, long  nTop, long  nRight, long  nBottom  )
{

	raw_SetImageBorder(nLeft, nTop, nRight, nBottom  );
}

inline void  IDUILogoObj::DestroyLogoImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUILogoObj_*)m_pCtrl)->DestroyLogoImage();
}

inline void  IDUILogoObj::SetImageHandle(OLE_HANDLE  hBitmap  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUILogoObj_*)m_pCtrl)->SetImageHandle(hBitmap);
}

inline BOOL  IDUILogoObj::SetBackImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUILogoObj_*)m_pCtrl)->SetBackImage(pImageBase, bRedraw);
}

inline struct IDUIImageBase * IDUILogoObj::GetBackImage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUILogoObj_*)m_pCtrl)->GetBackImage();
}

inline void  IDUILogoObj::SetImageHandleEx(OLE_HANDLE  hBitmap, long  nX, long  nY, long  nWidth, long  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUILogoObj_*)m_pCtrl)->SetImageHandleEx(hBitmap, nX, nY, nWidth, nHeight);
}

inline void  IDUILogoObj::GetState(enum DUI_LOGOBJSTATE * pResult  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUILogoObj_*)m_pCtrl)->GetState(pResult);
}

inline void  IDUILogoObj::SetState(enum DUI_LOGOBJSTATE  eState  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUILogoObj_*)m_pCtrl)->SetState(eState);
}

inline void  IDUILogoObj::SetImageBorder(long  nLeft, long  nTop, long  nRight, long  nBottom  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUILogoObj_*)m_pCtrl)->SetImageBorder(nLeft, nTop, nRight, nBottom);
}

inline void IDUIFormBorder_::SetCaption(tstring  bstrCaption, BOOL  bRefresh  )
{
	_bstr_t xxx_bstrCaption(bstrCaption.c_str());
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCaption(xxx_bstrCaption, xxx_bRefresh  );
}

inline void IDUIFormBorder_::SetIcon(OLE_HANDLE  hBitmapIcon, BOOL  bRefresh, BOOL  bIsIcon  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bIsIcon = bIsIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetIcon(hBitmapIcon, xxx_bRefresh, xxx_bIsIcon  );
}

inline void IDUIFormBorder_::SetIconByImageBase(struct IDUIImageBase * hImageBase, BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetIconByImageBase(hImageBase, xxx_bRefresh  );
}

inline void IDUIFormBorder_::SetCaptionHeight(long  nHeight  )
{

	raw_SetCaptionHeight(nHeight  );
}

inline void IDUIFormBorder_::SetUseSysMenu(BOOL  bUseSysMenu  )
{
	VARIANT_BOOL xxx_bUseSysMenu = bUseSysMenu ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseSysMenu(xxx_bUseSysMenu  );
}

inline void IDUIFormBorder_::SetSysBtn(tstring  strCloseBtn, tstring  strMaxBtn, tstring  strMinBtn, tstring  strHelpBtn  )
{
	_bstr_t xxx_strCloseBtn(strCloseBtn.c_str());
	_bstr_t xxx_strMaxBtn(strMaxBtn.c_str());
	_bstr_t xxx_strMinBtn(strMinBtn.c_str());
	_bstr_t xxx_strHelpBtn(strHelpBtn.c_str());

	raw_SetSysBtn(xxx_strCloseBtn, xxx_strMaxBtn, xxx_strMinBtn, xxx_strHelpBtn  );
}

inline void IDUIFormBorder_::SetCaptionDragable(BOOL  bValue  )
{
	VARIANT_BOOL xxx_bValue = bValue ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCaptionDragable(xxx_bValue  );
}

inline void IDUIFormBorder_::DBClickCaptionMaxWnd(BOOL  bValue  )
{
	VARIANT_BOOL xxx_bValue = bValue ? VARIANT_TRUE : VARIANT_FALSE;

	raw_DBClickCaptionMaxWnd(xxx_bValue  );
}

inline void  IDUIFormBorder::SetCaption(tstring  bstrCaption, BOOL  bRefresh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIFormBorder_*)m_pCtrl)->SetCaption(bstrCaption, bRefresh);
}

inline void  IDUIFormBorder::SetIcon(OLE_HANDLE  hBitmapIcon, BOOL  bRefresh, BOOL  bIsIcon  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIFormBorder_*)m_pCtrl)->SetIcon(hBitmapIcon, bRefresh, bIsIcon);
}

inline void  IDUIFormBorder::SetIconByImageBase(struct IDUIImageBase * hImageBase, BOOL  bRefresh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIFormBorder_*)m_pCtrl)->SetIconByImageBase(hImageBase, bRefresh);
}

inline void  IDUIFormBorder::SetCaptionHeight(long  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIFormBorder_*)m_pCtrl)->SetCaptionHeight(nHeight);
}

inline void  IDUIFormBorder::SetUseSysMenu(BOOL  bUseSysMenu  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIFormBorder_*)m_pCtrl)->SetUseSysMenu(bUseSysMenu);
}

inline void  IDUIFormBorder::SetSysBtn(tstring  strCloseBtn, tstring  strMaxBtn, tstring  strMinBtn, tstring  strHelpBtn  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIFormBorder_*)m_pCtrl)->SetSysBtn(strCloseBtn, strMaxBtn, strMinBtn, strHelpBtn);
}

inline void  IDUIFormBorder::SetCaptionDragable(BOOL  bValue  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIFormBorder_*)m_pCtrl)->SetCaptionDragable(bValue);
}

inline void  IDUIFormBorder::DBClickCaptionMaxWnd(BOOL  bValue  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIFormBorder_*)m_pCtrl)->DBClickCaptionMaxWnd(bValue);
}

inline BOOL  IDUICalendar_::IsAutoSize()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoSize(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICalendar_::SetAutoSize(BOOL  bAutoSize  )
{
	VARIANT_BOOL xxx_bAutoSize = bAutoSize ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoSize(xxx_bAutoSize  );
}

inline long  IDUICalendar_::GetSpace()
{
	long  _result;
	raw_GetSpace(&_result);
	return _result;
}

inline void IDUICalendar_::SetSpace(long  nSpace  )
{

	raw_SetSpace(nSpace  );
}

inline void IDUICalendar_::SetFixedSize(long  nWidth, long  nHeight  )
{

	raw_SetFixedSize(nWidth, nHeight  );
}

inline void IDUICalendar_::GetFixedSize(long * pWidth, long * pHeight  )
{

	raw_GetFixedSize(pWidth, pHeight  );
}

inline BOOL  IDUICalendar_::IsBackDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsBackDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICalendar_::SetBackDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetBackDrawColor(xxx_bDrawColor  );
}

inline short  IDUICalendar_::GetYearMonthBarHeight()
{
	short  _result;
	raw_GetYearMonthBarHeight(&_result);
	return _result;
}

inline void IDUICalendar_::SetYearMonthBarHeight(short  nHeight  )
{

	raw_SetYearMonthBarHeight(nHeight  );
}

inline short  IDUICalendar_::GetWeekBarHeight()
{
	short  _result;
	raw_GetWeekBarHeight(&_result);
	return _result;
}

inline void IDUICalendar_::SetWeekBarHeight(short  nHeight  )
{

	raw_SetWeekBarHeight(nHeight  );
}

inline void IDUICalendar_::SetWeekBarText(tstring  strSun, tstring  strMon, tstring  strTues, tstring  strWed, tstring  strThurs, tstring  strFri, tstring  strSat  )
{
	_bstr_t xxx_strSun(strSun.c_str());
	_bstr_t xxx_strMon(strMon.c_str());
	_bstr_t xxx_strTues(strTues.c_str());
	_bstr_t xxx_strWed(strWed.c_str());
	_bstr_t xxx_strThurs(strThurs.c_str());
	_bstr_t xxx_strFri(strFri.c_str());
	_bstr_t xxx_strSat(strSat.c_str());

	raw_SetWeekBarText(xxx_strSun, xxx_strMon, xxx_strTues, xxx_strWed, xxx_strThurs, xxx_strFri, xxx_strSat  );
}

inline void IDUICalendar_::GetWeekBarText(BSTR * pstrSun, BSTR * pstrMon, BSTR * pstrTues, BSTR * pstrWed, BSTR * pstrThurs, BSTR * pstrFri, BSTR * pstrSat  )
{

	raw_GetWeekBarText(pstrSun, pstrMon, pstrTues, pstrWed, pstrThurs, pstrFri, pstrSat  );
}

inline void IDUICalendar_::SetWeekBarTextByEnum(enum DUI_WEEKTEXT  eWeekText, tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetWeekBarTextByEnum(eWeekText, xxx_strText  );
}

inline tstring  IDUICalendar_::GetWeekBarTextByEnum(enum DUI_WEEKTEXT  eWeekText  )
{
	BSTR _result = NULL;
	raw_GetWeekBarTextByEnum(eWeekText, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline struct DUI_CALENDARDATE  IDUICalendar_::GetSelectedDate()
{
	struct DUI_CALENDARDATE  _result;
	raw_GetSelectedDate(&_result);
	return _result;
}

inline void IDUICalendar_::SetSelectedDate(struct DUI_CALENDARDATE * pDate  )
{

	raw_SetSelectedDate(pDate  );
}

inline void IDUICalendar_::SetWeekBarTextStyle(struct IDUITextStyle * pTextStyle  )
{

	raw_SetWeekBarTextStyle(pTextStyle  );
}

inline void IDUICalendar_::GetWeekBarTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	raw_GetWeekBarTextStyle(ppTextStyle  );
}

inline void IDUICalendar_::SetWeekStart(enum DUI_WEEKTEXT  eWeekStart  )
{

	raw_SetWeekStart(eWeekStart  );
}

inline void IDUICalendar_::GetWeekStart(enum DUI_WEEKTEXT * eWeekStart  )
{

	raw_GetWeekStart(eWeekStart  );
}

inline void IDUICalendar_::SetDayTextStyle(struct IDUITextStyle * pTextStyle  )
{

	raw_SetDayTextStyle(pTextStyle  );
}

inline void IDUICalendar_::GetDayTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	raw_GetDayTextStyle(ppTextStyle  );
}

inline void IDUICalendar_::SetPreMonthDayTextStyle(struct IDUITextStyle * pTextStyle  )
{

	raw_SetPreMonthDayTextStyle(pTextStyle  );
}

inline void IDUICalendar_::GetPreMonthDayTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	raw_GetPreMonthDayTextStyle(ppTextStyle  );
}

inline void IDUICalendar_::SetNextMonthDayTextStyle(struct IDUITextStyle * pTextStyle  )
{

	raw_SetNextMonthDayTextStyle(pTextStyle  );
}

inline void IDUICalendar_::GetNextMonthDayTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	raw_GetNextMonthDayTextStyle(ppTextStyle  );
}

inline void IDUICalendar_::GetFocusDayImage(struct IDUIImageBase ** ppImageBase  )
{

	raw_GetFocusDayImage(ppImageBase  );
}

inline void IDUICalendar_::SetFocusDayImage(struct IDUIImageBase * pImageBase  )
{

	raw_SetFocusDayImage(pImageBase  );
}

inline void IDUICalendar_::IsShowFrameGrid(VARIANT_BOOL * pbShowGrid  )
{

	raw_IsShowFrameGrid(pbShowGrid  );
}

inline void IDUICalendar_::SetShowFrameGrid(BOOL  bShowGrid  )
{
	VARIANT_BOOL xxx_bShowGrid = bShowGrid ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowFrameGrid(xxx_bShowGrid  );
}

inline void IDUICalendar_::IsShowFrameGridColor(VARIANT_BOOL * pbShowGridColor  )
{

	raw_IsShowFrameGridColor(pbShowGridColor  );
}

inline void IDUICalendar_::SetShowFrameGridColor(BOOL  bShowGridColor  )
{
	VARIANT_BOOL xxx_bShowGridColor = bShowGridColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowFrameGridColor(xxx_bShowGridColor  );
}

inline void IDUICalendar_::SetFrameGridColor(OLE_COLOR  color  )
{

	raw_SetFrameGridColor(color  );
}

inline void IDUICalendar_::GetFrameGridColor(OLE_COLOR * pColor  )
{

	raw_GetFrameGridColor(pColor  );
}

inline void IDUICalendar_::CancelEventDate(struct DUI_CALENDARDATE  date, BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_CancelEventDate(date, xxx_bRefresh  );
}

inline void IDUICalendar_::SetEventDate(struct DUI_CALENDARDATE  date, BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEventDate(date, xxx_bRefresh  );
}

inline void IDUICalendar_::IsEventDate(struct DUI_CALENDARDATE  date, VARIANT_BOOL * bpIsEventDay  )
{

	raw_IsEventDate(date, bpIsEventDay  );
}

inline void IDUICalendar_::JumpToToday()
{

	raw_JumpToToday();
}

inline void IDUICalendar_::JumpToSpecDay(short  year, short  month, short  day  )
{

	raw_JumpToSpecDay(year, month, day  );
}

inline void IDUICalendar_::SetUseChineseText(BOOL  bChineseText  )
{
	VARIANT_BOOL xxx_bChineseText = bChineseText ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseChineseText(xxx_bChineseText  );
}

inline BOOL  IDUICalendar::IsAutoSize()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->IsAutoSize();
}

inline void  IDUICalendar::SetAutoSize(BOOL  bAutoSize  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetAutoSize(bAutoSize);
}

inline long  IDUICalendar::GetSpace()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetSpace();
}

inline void  IDUICalendar::SetSpace(long  nSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetSpace(nSpace);
}

inline void  IDUICalendar::SetFixedSize(long  nWidth, long  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetFixedSize(nWidth, nHeight);
}

inline void  IDUICalendar::GetFixedSize(long * pWidth, long * pHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetFixedSize(pWidth, pHeight);
}

inline BOOL  IDUICalendar::IsBackDrawColor()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->IsBackDrawColor();
}

inline void  IDUICalendar::SetBackDrawColor(BOOL  bDrawColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetBackDrawColor(bDrawColor);
}

inline short  IDUICalendar::GetYearMonthBarHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetYearMonthBarHeight();
}

inline void  IDUICalendar::SetYearMonthBarHeight(short  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetYearMonthBarHeight(nHeight);
}

inline short  IDUICalendar::GetWeekBarHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetWeekBarHeight();
}

inline void  IDUICalendar::SetWeekBarHeight(short  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetWeekBarHeight(nHeight);
}

inline void  IDUICalendar::SetWeekBarText(tstring  strSun, tstring  strMon, tstring  strTues, tstring  strWed, tstring  strThurs, tstring  strFri, tstring  strSat  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetWeekBarText(strSun, strMon, strTues, strWed, strThurs, strFri, strSat);
}

inline void  IDUICalendar::GetWeekBarText(BSTR * pstrSun, BSTR * pstrMon, BSTR * pstrTues, BSTR * pstrWed, BSTR * pstrThurs, BSTR * pstrFri, BSTR * pstrSat  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetWeekBarText(pstrSun, pstrMon, pstrTues, pstrWed, pstrThurs, pstrFri, pstrSat);
}

inline void  IDUICalendar::SetWeekBarTextByEnum(enum DUI_WEEKTEXT  eWeekText, tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetWeekBarTextByEnum(eWeekText, strText);
}

inline tstring  IDUICalendar::GetWeekBarTextByEnum(enum DUI_WEEKTEXT  eWeekText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetWeekBarTextByEnum(eWeekText);
}

inline struct DUI_CALENDARDATE  IDUICalendar::GetSelectedDate()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetSelectedDate();
}

inline void  IDUICalendar::SetSelectedDate(struct DUI_CALENDARDATE * pDate  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetSelectedDate(pDate);
}

inline void  IDUICalendar::SetWeekBarTextStyle(struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetWeekBarTextStyle(pTextStyle);
}

inline void  IDUICalendar::GetWeekBarTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetWeekBarTextStyle(ppTextStyle);
}

inline void  IDUICalendar::SetWeekStart(enum DUI_WEEKTEXT  eWeekStart  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetWeekStart(eWeekStart);
}

inline void  IDUICalendar::GetWeekStart(enum DUI_WEEKTEXT * eWeekStart  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetWeekStart(eWeekStart);
}

inline void  IDUICalendar::SetDayTextStyle(struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetDayTextStyle(pTextStyle);
}

inline void  IDUICalendar::GetDayTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetDayTextStyle(ppTextStyle);
}

inline void  IDUICalendar::SetPreMonthDayTextStyle(struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetPreMonthDayTextStyle(pTextStyle);
}

inline void  IDUICalendar::GetPreMonthDayTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetPreMonthDayTextStyle(ppTextStyle);
}

inline void  IDUICalendar::SetNextMonthDayTextStyle(struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetNextMonthDayTextStyle(pTextStyle);
}

inline void  IDUICalendar::GetNextMonthDayTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetNextMonthDayTextStyle(ppTextStyle);
}

inline void  IDUICalendar::GetFocusDayImage(struct IDUIImageBase ** ppImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetFocusDayImage(ppImageBase);
}

inline void  IDUICalendar::SetFocusDayImage(struct IDUIImageBase * pImageBase  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetFocusDayImage(pImageBase);
}

inline void  IDUICalendar::IsShowFrameGrid(VARIANT_BOOL * pbShowGrid  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->IsShowFrameGrid(pbShowGrid);
}

inline void  IDUICalendar::SetShowFrameGrid(BOOL  bShowGrid  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetShowFrameGrid(bShowGrid);
}

inline void  IDUICalendar::IsShowFrameGridColor(VARIANT_BOOL * pbShowGridColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->IsShowFrameGridColor(pbShowGridColor);
}

inline void  IDUICalendar::SetShowFrameGridColor(BOOL  bShowGridColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetShowFrameGridColor(bShowGridColor);
}

inline void  IDUICalendar::SetFrameGridColor(OLE_COLOR  color  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetFrameGridColor(color);
}

inline void  IDUICalendar::GetFrameGridColor(OLE_COLOR * pColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->GetFrameGridColor(pColor);
}

inline void  IDUICalendar::CancelEventDate(struct DUI_CALENDARDATE  date, BOOL  bRefresh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->CancelEventDate(date, bRefresh);
}

inline void  IDUICalendar::SetEventDate(struct DUI_CALENDARDATE  date, BOOL  bRefresh  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetEventDate(date, bRefresh);
}

inline void  IDUICalendar::IsEventDate(struct DUI_CALENDARDATE  date, VARIANT_BOOL * bpIsEventDay  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->IsEventDate(date, bpIsEventDay);
}

inline void  IDUICalendar::JumpToToday()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->JumpToToday();
}

inline void  IDUICalendar::JumpToSpecDay(short  year, short  month, short  day  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->JumpToSpecDay(year, month, day);
}

inline void  IDUICalendar::SetUseChineseText(BOOL  bChineseText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUICalendar_*)m_pCtrl)->SetUseChineseText(bChineseText);
}

inline BOOL  IDUISwitchCtrl_::IsSwitchTabLeft()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsSwitchTabLeft(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISwitchCtrl_::SetSwitchTabPos(BOOL  bIsLeft  )
{
	VARIANT_BOOL xxx_bIsLeft = bIsLeft ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSwitchTabPos(xxx_bIsLeft  );
}

inline tstring  IDUISwitchCtrl_::GetSwitchTabLeftText()
{
	BSTR _result = NULL;
	raw_GetSwitchTabLeftText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline tstring  IDUISwitchCtrl_::GetSwitchTabRightText()
{
	BSTR _result = NULL;
	raw_GetSwitchTabRightText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUISwitchCtrl_::SetSwitchTabLeftText(tstring  strLeftText  )
{
	_bstr_t xxx_strLeftText(strLeftText.c_str());

	raw_SetSwitchTabLeftText(xxx_strLeftText  );
}

inline void IDUISwitchCtrl_::SetSwitchTabRightText(tstring  strRightText  )
{
	_bstr_t xxx_strRightText(strRightText.c_str());

	raw_SetSwitchTabRightText(xxx_strRightText  );
}

inline BOOL  IDUISwitchCtrl::IsSwitchTabLeft()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISwitchCtrl_*)m_pCtrl)->IsSwitchTabLeft();
}

inline void  IDUISwitchCtrl::SetSwitchTabPos(BOOL  bIsLeft  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISwitchCtrl_*)m_pCtrl)->SetSwitchTabPos(bIsLeft);
}

inline tstring  IDUISwitchCtrl::GetSwitchTabLeftText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISwitchCtrl_*)m_pCtrl)->GetSwitchTabLeftText();
}

inline tstring  IDUISwitchCtrl::GetSwitchTabRightText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISwitchCtrl_*)m_pCtrl)->GetSwitchTabRightText();
}

inline void  IDUISwitchCtrl::SetSwitchTabLeftText(tstring  strLeftText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISwitchCtrl_*)m_pCtrl)->SetSwitchTabLeftText(strLeftText);
}

inline void  IDUISwitchCtrl::SetSwitchTabRightText(tstring  strRightText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUISwitchCtrl_*)m_pCtrl)->SetSwitchTabRightText(strRightText);
}

inline void IDUIGraphCtrl_::AddColumn(float  nValue1, float  nValue2, float  nValue3, float  nValue4, long  nIndex, BOOL  bIncreased  )
{
	VARIANT_BOOL xxx_bIncreased = bIncreased ? VARIANT_TRUE : VARIANT_FALSE;

	raw_AddColumn(nValue1, nValue2, nValue3, nValue4, nIndex, xxx_bIncreased  );
}

inline void IDUIGraphCtrl_::AddCurve()
{

	raw_AddCurve();
}

inline void IDUIGraphCtrl_::AddCurvePoint(long  nIndex, float  nValueX, float  nValueY  )
{

	raw_AddCurvePoint(nIndex, nValueX, nValueY  );
}

inline void IDUIGraphCtrl_::RemoveAllCurve()
{

	raw_RemoveAllCurve();
}

inline void IDUIGraphCtrl_::RemoveAllColumns()
{

	raw_RemoveAllColumns();
}

inline void IDUIGraphCtrl_::CreateTestPoint(long  nIndex  )
{

	raw_CreateTestPoint(nIndex  );
}

inline void IDUIGraphCtrl_::CreateTestKLineData()
{

	raw_CreateTestKLineData();
}

inline void IDUIGraphCtrl_::CreateTestHistorgramData()
{

	raw_CreateTestHistorgramData();
}

inline void IDUIGraphCtrl_::CreateTestStockData()
{

	raw_CreateTestStockData();
}

inline void IDUIGraphCtrl_::SetXAxisProp(float  nDataLenth, long  nUint, long  nNumPerUnit  )
{

	raw_SetXAxisProp(nDataLenth, nUint, nNumPerUnit  );
}

inline void IDUIGraphCtrl_::SetYAxisProp(float  nDataLenth, long  nUint, long  nNumPerUnit, float  nAxisLevelOffset  )
{

	raw_SetYAxisProp(nDataLenth, nUint, nNumPerUnit, nAxisLevelOffset  );
}

inline void IDUIGraphCtrl_::SetXAxisUnitText(long  nIndex, tstring  strDes  )
{
	_bstr_t xxx_strDes(strDes.c_str());

	raw_SetXAxisUnitText(nIndex, xxx_strDes  );
}

inline void IDUIGraphCtrl_::SetYAxisUnitText(long  nIndex, tstring  strDes  )
{
	_bstr_t xxx_strDes(strDes.c_str());

	raw_SetYAxisUnitText(nIndex, xxx_strDes  );
}

inline void IDUIGraphCtrl_::SetYAxisRightUnitText(long  nIndex, tstring  strDes  )
{
	_bstr_t xxx_strDes(strDes.c_str());

	raw_SetYAxisRightUnitText(nIndex, xxx_strDes  );
}

inline void IDUIGraphCtrl_::CreateTestBlockData()
{

	raw_CreateTestBlockData();
}

inline void IDUIGraphCtrl_::ResetXAxisPoint(BOOL  bFreshOrInit  )
{
	VARIANT_BOOL xxx_bFreshOrInit = bFreshOrInit ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ResetXAxisPoint(xxx_bFreshOrInit  );
}

inline void IDUIGraphCtrl_::AddWaitAxisText(tstring  strAxisText  )
{
	_bstr_t xxx_strAxisText(strAxisText.c_str());

	raw_AddWaitAxisText(xxx_strAxisText  );
}

inline void IDUIGraphCtrl_::AddBlockGraphPoint(float  fValue  )
{

	raw_AddBlockGraphPoint(fValue  );
}

inline void IDUIGraphCtrl_::SetAxisColor(long  nColor  )
{

	raw_SetAxisColor(nColor  );
}

inline void IDUIGraphCtrl_::SetBlockColor(long  nColor  )
{

	raw_SetBlockColor(nColor  );
}

inline void IDUIGraphCtrl_::SetBlockOverLineColor(long  nColor  )
{

	raw_SetBlockOverLineColor(nColor  );
}

inline void  IDUIGraphCtrl::AddColumn(float  nValue1, float  nValue2, float  nValue3, float  nValue4, long  nIndex, BOOL  bIncreased  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->AddColumn(nValue1, nValue2, nValue3, nValue4, nIndex, bIncreased);
}

inline void  IDUIGraphCtrl::AddCurve()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->AddCurve();
}

inline void  IDUIGraphCtrl::AddCurvePoint(long  nIndex, float  nValueX, float  nValueY  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->AddCurvePoint(nIndex, nValueX, nValueY);
}

inline void  IDUIGraphCtrl::RemoveAllCurve()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->RemoveAllCurve();
}

inline void  IDUIGraphCtrl::RemoveAllColumns()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->RemoveAllColumns();
}

inline void  IDUIGraphCtrl::CreateTestPoint(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->CreateTestPoint(nIndex);
}

inline void  IDUIGraphCtrl::CreateTestKLineData()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->CreateTestKLineData();
}

inline void  IDUIGraphCtrl::CreateTestHistorgramData()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->CreateTestHistorgramData();
}

inline void  IDUIGraphCtrl::CreateTestStockData()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->CreateTestStockData();
}

inline void  IDUIGraphCtrl::SetXAxisProp(float  nDataLenth, long  nUint, long  nNumPerUnit  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->SetXAxisProp(nDataLenth, nUint, nNumPerUnit);
}

inline void  IDUIGraphCtrl::SetYAxisProp(float  nDataLenth, long  nUint, long  nNumPerUnit, float  nAxisLevelOffset  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->SetYAxisProp(nDataLenth, nUint, nNumPerUnit, nAxisLevelOffset);
}

inline void  IDUIGraphCtrl::SetXAxisUnitText(long  nIndex, tstring  strDes  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->SetXAxisUnitText(nIndex, strDes);
}

inline void  IDUIGraphCtrl::SetYAxisUnitText(long  nIndex, tstring  strDes  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->SetYAxisUnitText(nIndex, strDes);
}

inline void  IDUIGraphCtrl::SetYAxisRightUnitText(long  nIndex, tstring  strDes  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->SetYAxisRightUnitText(nIndex, strDes);
}

inline void  IDUIGraphCtrl::CreateTestBlockData()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->CreateTestBlockData();
}

inline void  IDUIGraphCtrl::ResetXAxisPoint(BOOL  bFreshOrInit  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->ResetXAxisPoint(bFreshOrInit);
}

inline void  IDUIGraphCtrl::AddWaitAxisText(tstring  strAxisText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->AddWaitAxisText(strAxisText);
}

inline void  IDUIGraphCtrl::AddBlockGraphPoint(float  fValue  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->AddBlockGraphPoint(fValue);
}

inline void  IDUIGraphCtrl::SetAxisColor(long  nColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->SetAxisColor(nColor);
}

inline void  IDUIGraphCtrl::SetBlockColor(long  nColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->SetBlockColor(nColor);
}

inline void  IDUIGraphCtrl::SetBlockOverLineColor(long  nColor  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIGraphCtrl_*)m_pCtrl)->SetBlockOverLineColor(nColor);
}

inline long  IDUIMeetingConflict_::GetFrames()
{
	long  _result;
	raw_GetFrames(&_result);
	return _result;
}

inline BOOL  IDUIMeetingConflict_::SetFrames(long  nFrames, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetFrames(nFrames, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIMeetingConflict_::GetCurrPos()
{
	long  _result;
	raw_GetCurrPos(&_result);
	return _result;
}

inline BOOL  IDUIMeetingConflict_::SetCurrPos(long  nPos, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetCurrPos(nPos, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMeetingConflict_::IsCanSelStar()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsCanSelStar(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIMeetingConflict_::SetCanSelStar(BOOL  bCanSelStar  )
{
	VARIANT_BOOL xxx_bCanSelStar = bCanSelStar ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCanSelStar(xxx_bCanSelStar  );
}

inline void IDUIMeetingConflict_::SetFirstBeginTime(LONGLONG  nBeginTime  )
{

	raw_SetFirstBeginTime(nBeginTime  );
}

inline void IDUIMeetingConflict_::SetFirstEndTime(LONGLONG  nEndTime  )
{

	raw_SetFirstEndTime(nEndTime  );
}

inline void IDUIMeetingConflict_::SetSecondBeginTime(LONGLONG  nBeginTime  )
{

	raw_SetSecondBeginTime(nBeginTime  );
}

inline void IDUIMeetingConflict_::SetSecondEndTime(LONGLONG  nEndTime  )
{

	raw_SetSecondEndTime(nEndTime  );
}

inline void IDUIMeetingConflict_::SetLineX(int  nX  )
{

	raw_SetLineX(nX  );
}

inline void IDUIMeetingConflict_::SetFormX(int  nX  )
{

	raw_SetFormX(nX  );
}

inline void IDUIMeetingConflict_::Refresh()
{

	raw_Refresh();
}

inline void IDUIMeetingConflict_::SetDotWidth(int  nDotWidth  )
{

	raw_SetDotWidth(nDotWidth  );
}

inline void IDUIMeetingConflict_::SetLineWidth(int  nLineWidth  )
{

	raw_SetLineWidth(nLineWidth  );
}

inline void IDUIMeetingConflict_::SetHeaderHeight(int  nHeight  )
{

	raw_SetHeaderHeight(nHeight  );
}

inline void IDUIMeetingConflict_::SetTailHeight(int  nHeight  )
{

	raw_SetTailHeight(nHeight  );
}

inline long  IDUIMeetingConflict::GetFrames()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->GetFrames();
}

inline BOOL  IDUIMeetingConflict::SetFrames(long  nFrames, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetFrames(nFrames, bRedraw);
}

inline long  IDUIMeetingConflict::GetCurrPos()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->GetCurrPos();
}

inline BOOL  IDUIMeetingConflict::SetCurrPos(long  nPos, BOOL  bRedraw  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetCurrPos(nPos, bRedraw);
}

inline BOOL  IDUIMeetingConflict::IsCanSelStar()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->IsCanSelStar();
}

inline void  IDUIMeetingConflict::SetCanSelStar(BOOL  bCanSelStar  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetCanSelStar(bCanSelStar);
}

inline void  IDUIMeetingConflict::SetFirstBeginTime(LONGLONG  nBeginTime  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetFirstBeginTime(nBeginTime);
}

inline void  IDUIMeetingConflict::SetFirstEndTime(LONGLONG  nEndTime  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetFirstEndTime(nEndTime);
}

inline void  IDUIMeetingConflict::SetSecondBeginTime(LONGLONG  nBeginTime  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetSecondBeginTime(nBeginTime);
}

inline void  IDUIMeetingConflict::SetSecondEndTime(LONGLONG  nEndTime  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetSecondEndTime(nEndTime);
}

inline void  IDUIMeetingConflict::SetLineX(int  nX  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetLineX(nX);
}

inline void  IDUIMeetingConflict::SetFormX(int  nX  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetFormX(nX);
}

inline void  IDUIMeetingConflict::Refresh()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->Refresh();
}

inline void  IDUIMeetingConflict::SetDotWidth(int  nDotWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetDotWidth(nDotWidth);
}

inline void  IDUIMeetingConflict::SetLineWidth(int  nLineWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetLineWidth(nLineWidth);
}

inline void  IDUIMeetingConflict::SetHeaderHeight(int  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetHeaderHeight(nHeight);
}

inline void  IDUIMeetingConflict::SetTailHeight(int  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIMeetingConflict_*)m_pCtrl)->SetTailHeight(nHeight);
}

inline void IDUIRollCalendar_::GetCurDate(long * pnYear, long * pnMonth, long * pnDay  )
{

	raw_GetCurDate(pnYear, pnMonth, pnDay  );
}

inline void IDUIRollCalendar_::SetCurDate(long  nYear, long  nMonth, long  nDay  )
{

	raw_SetCurDate(nYear, nMonth, nDay  );
}

inline void IDUIRollCalendar_::SetShowDays(long  nDays  )
{

	raw_SetShowDays(nDays  );
}

inline void IDUIRollCalendar_::SetMonthLeft(long  nMonthLeft  )
{

	raw_SetMonthLeft(nMonthLeft  );
}

inline void IDUIRollCalendar_::SetMonthWidth(long  nWidth  )
{

	raw_SetMonthWidth(nWidth  );
}

inline void IDUIRollCalendar_::SetDayWidth(long  nWidth  )
{

	raw_SetDayWidth(nWidth  );
}

inline void IDUIRollCalendar_::SetTopSpace(long  nTopSpace  )
{

	raw_SetTopSpace(nTopSpace  );
}

inline void IDUIRollCalendar_::SetBottomSpace(long  nBottomSpace  )
{

	raw_SetBottomSpace(nBottomSpace  );
}

inline void IDUIRollCalendar_::SetRollSteep(long  nRollSteep  )
{

	raw_SetRollSteep(nRollSteep  );
}

inline void IDUIRollCalendar_::SetRollInterval(long  nInterval  )
{

	raw_SetRollInterval(nInterval  );
}

inline BOOL  IDUIRollCalendar_::SetSpecialDate(long  lYear, long  lMonth, long  lDay  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSpecialDate(lYear, lMonth, lDay, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIRollCalendar_::ClearSpecialDate(long  lYear, long  lMonth, long  lDay  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ClearSpecialDate(lYear, lMonth, lDay, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRollCalendar_::ClearAllSpecialDate()
{

	raw_ClearAllSpecialDate();
}

inline void  IDUIRollCalendar::GetCurDate(long * pnYear, long * pnMonth, long * pnDay  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->GetCurDate(pnYear, pnMonth, pnDay);
}

inline void  IDUIRollCalendar::SetCurDate(long  nYear, long  nMonth, long  nDay  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->SetCurDate(nYear, nMonth, nDay);
}

inline void  IDUIRollCalendar::SetShowDays(long  nDays  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->SetShowDays(nDays);
}

inline void  IDUIRollCalendar::SetMonthLeft(long  nMonthLeft  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->SetMonthLeft(nMonthLeft);
}

inline void  IDUIRollCalendar::SetMonthWidth(long  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->SetMonthWidth(nWidth);
}

inline void  IDUIRollCalendar::SetDayWidth(long  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->SetDayWidth(nWidth);
}

inline void  IDUIRollCalendar::SetTopSpace(long  nTopSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->SetTopSpace(nTopSpace);
}

inline void  IDUIRollCalendar::SetBottomSpace(long  nBottomSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->SetBottomSpace(nBottomSpace);
}

inline void  IDUIRollCalendar::SetRollSteep(long  nRollSteep  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->SetRollSteep(nRollSteep);
}

inline void  IDUIRollCalendar::SetRollInterval(long  nInterval  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->SetRollInterval(nInterval);
}

inline BOOL  IDUIRollCalendar::SetSpecialDate(long  lYear, long  lMonth, long  lDay  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->SetSpecialDate(lYear, lMonth, lDay);
}

inline BOOL  IDUIRollCalendar::ClearSpecialDate(long  lYear, long  lMonth, long  lDay  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->ClearSpecialDate(lYear, lMonth, lDay);
}

inline void  IDUIRollCalendar::ClearAllSpecialDate()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCalendar_*)m_pCtrl)->ClearAllSpecialDate();
}

inline void IDUITagCtrl_::SetLeft(long  left  )
{

	raw_SetLeft(left  );
}

inline void IDUITagCtrl_::SetHSpace(long  nSpace  )
{

	raw_SetHSpace(nSpace  );
}

inline void IDUITagCtrl_::SetVSpace(long  nSpace  )
{

	raw_SetVSpace(nSpace  );
}

inline void IDUITagCtrl_::SetTop(long  nTop  )
{

	raw_SetTop(nTop  );
}

inline struct IDUITagItem * IDUITagCtrl_::CreateItem(tstring  strText, struct IDUITagItem * pParent  )
{
_bstr_t xxx_strText(strText.c_str());
	struct IDUITagItem * _result;
	raw_CreateItem(xxx_strText, pParent, &_result);
	return _result;
}

inline void IDUITagCtrl_::SetItemHeight(long  nHeight  )
{

	raw_SetItemHeight(nHeight  );
}

inline void IDUITagCtrl_::SetTimeInterval(long  nInterval  )
{

	raw_SetTimeInterval(nInterval  );
}

inline struct IDUITagItem * IDUITagCtrl_::GetFirstItem()
{
	struct IDUITagItem * _result;
	raw_GetFirstItem(&_result);
	return _result;
}

inline struct IDUITagItem * IDUITagCtrl_::GetNextItem(struct IDUITagItem * pItem  )
{
	struct IDUITagItem * _result;
	raw_GetNextItem(pItem, &_result);
	return _result;
}

inline struct IDUITagItem * IDUITagCtrl_::GetTailItem()
{
	struct IDUITagItem * _result;
	raw_GetTailItem(&_result);
	return _result;
}

inline BOOL  IDUITagCtrl_::PopItem(struct IDUITagItem * pItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_PopItem(pItem, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITagCtrl_::DeleteItem(struct IDUITagItem * pItem  )
{

	raw_DeleteItem(pItem  );
}

inline void IDUITagCtrl_::ChangeItemRect(struct IDUITagItem * pItem, BOOL  bLeft  )
{
	VARIANT_BOOL xxx_bLeft = bLeft ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ChangeItemRect(pItem, xxx_bLeft  );
}

inline void IDUITagCtrl_::SetMinWidth(long  nWidth  )
{

	raw_SetMinWidth(nWidth  );
}

inline void IDUITagCtrl_::SetMaxWidth(long  nWidth  )
{

	raw_SetMaxWidth(nWidth  );
}

inline BOOL  IDUITagCtrl_::IsMoving()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsMoving(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITagCtrl_::SetLineWidth(long  nWidth  )
{

	raw_SetLineWidth(nWidth  );
}

inline BOOL  IDUITagCtrl_::EnableAnimate(BOOL  bAnimate  )
{
	VARIANT_BOOL xxx_bAnimate = bAnimate ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_EnableAnimate(xxx_bAnimate, &_result);
	return _result ? TRUE : FALSE;
}

inline void  IDUITagCtrl::SetLeft(long  left  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->SetLeft(left);
}

inline void  IDUITagCtrl::SetHSpace(long  nSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->SetHSpace(nSpace);
}

inline void  IDUITagCtrl::SetVSpace(long  nSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->SetVSpace(nSpace);
}

inline void  IDUITagCtrl::SetTop(long  nTop  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->SetTop(nTop);
}

inline struct IDUITagItem * IDUITagCtrl::CreateItem(tstring  strText, struct IDUITagItem * pParent  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->CreateItem(strText, pParent);
}

inline void  IDUITagCtrl::SetItemHeight(long  nHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->SetItemHeight(nHeight);
}

inline void  IDUITagCtrl::SetTimeInterval(long  nInterval  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->SetTimeInterval(nInterval);
}

inline struct IDUITagItem * IDUITagCtrl::GetFirstItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->GetFirstItem();
}

inline struct IDUITagItem * IDUITagCtrl::GetNextItem(struct IDUITagItem * pItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->GetNextItem(pItem);
}

inline struct IDUITagItem * IDUITagCtrl::GetTailItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->GetTailItem();
}

inline BOOL  IDUITagCtrl::PopItem(struct IDUITagItem * pItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->PopItem(pItem);
}

inline void  IDUITagCtrl::DeleteItem(struct IDUITagItem * pItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->DeleteItem(pItem);
}

inline void  IDUITagCtrl::ChangeItemRect(struct IDUITagItem * pItem, BOOL  bLeft  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->ChangeItemRect(pItem, bLeft);
}

inline void  IDUITagCtrl::SetMinWidth(long  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->SetMinWidth(nWidth);
}

inline void  IDUITagCtrl::SetMaxWidth(long  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->SetMaxWidth(nWidth);
}

inline BOOL  IDUITagCtrl::IsMoving()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->IsMoving();
}

inline void  IDUITagCtrl::SetLineWidth(long  nWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->SetLineWidth(nWidth);
}

inline BOOL  IDUITagCtrl::EnableAnimate(BOOL  bAnimate  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUITagCtrl_*)m_pCtrl)->EnableAnimate(bAnimate);
}

inline void IDUITagItem::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUITagItem::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITagItem::SetVisible(BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetVisible(xxx_bVisible  );
}

inline BOOL  IDUITagItem::IsVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITagItem * IDUITagItem::GetParent()
{
	struct IDUITagItem * _result;
	raw_GetParent(&_result);
	return _result;
}

inline struct IDUITagItem * IDUITagItem::GetSubItem(long  nIndex  )
{
	struct IDUITagItem * _result;
	raw_GetSubItem(nIndex, &_result);
	return _result;
}

inline long  IDUITagItem::GetSubItemCount()
{
	long  _result;
	raw_GetSubItemCount(&_result);
	return _result;
}

inline void IDUITagItem::SetData(OLE_HANDLE  lnData  )
{

	raw_SetData(lnData  );
}

inline OLE_HANDLE  IDUITagItem::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline void IDUIRollCtrl_::ClearText()
{

	raw_ClearText();
}

inline void IDUIRollCtrl_::AppendText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_AppendText(xxx_strText  );
}

inline void IDUIRollCtrl_::Refresh()
{

	raw_Refresh();
}

inline void  IDUIRollCtrl::ClearText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCtrl_*)m_pCtrl)->ClearText();
}

inline void  IDUIRollCtrl::AppendText(tstring  strText  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCtrl_*)m_pCtrl)->AppendText(strText);
}

inline void  IDUIRollCtrl::Refresh()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRollCtrl_*)m_pCtrl)->Refresh();
}

inline long  IDUIListCtrl_::InsertItem(long  nIndex, tstring  szText, long  nID, OLE_HANDLE  hIcon, OLE_HANDLE  hSmallIcon  )
{
_bstr_t xxx_szText(szText.c_str());
	long  _result;
	raw_InsertItem(nIndex, xxx_szText, nID, hIcon, hSmallIcon, &_result);
	return _result;
}

inline void IDUIListCtrl_::SetLStyle(enum LVCTRL_STYLE  nStyle  )
{

	raw_SetLStyle(nStyle  );
}

inline long  IDUIListCtrl_::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline struct IDUILCItem * IDUIListCtrl_::GetAt(long  nIndex  )
{
	struct IDUILCItem * _result;
	raw_GetAt(nIndex, &_result);
	return _result;
}

inline void IDUIListCtrl_::SetHorScroll(BOOL  bHorScroll  )
{
	VARIANT_BOOL xxx_bHorScroll = bHorScroll ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHorScroll(xxx_bHorScroll  );
}

inline long  IDUIListCtrl_::GetPageCount()
{
	long  _result;
	raw_GetPageCount(&_result);
	return _result;
}

inline void IDUIListCtrl_::SetCurrentPage(long  nPage  )
{

	raw_SetCurrentPage(nPage  );
}

inline long  IDUIListCtrl_::GetCurrentPage()
{
	long  _result;
	raw_GetCurrentPage(&_result);
	return _result;
}

inline short  IDUIListCtrl_::GetItemWidth()
{
	short  _result;
	raw_GetItemWidth(&_result);
	return _result;
}

inline short  IDUIListCtrl_::GetItemHeight()
{
	short  _result;
	raw_GetItemHeight(&_result);
	return _result;
}

inline short  IDUIListCtrl_::GetItemHorSpace()
{
	short  _result;
	raw_GetItemHorSpace(&_result);
	return _result;
}

inline short  IDUIListCtrl_::GetItemVerSpace()
{
	short  _result;
	raw_GetItemVerSpace(&_result);
	return _result;
}

inline struct SkinRect  IDUIListCtrl_::GetBorderRect()
{
	struct SkinRect  _result;
	raw_GetBorderRect(&_result);
	return _result;
}

inline void IDUIListCtrl_::SetItemWidth(long  nItemWidth  )
{

	raw_SetItemWidth(nItemWidth  );
}

inline void IDUIListCtrl_::SetItemHeight(long  nItemHeight  )
{

	raw_SetItemHeight(nItemHeight  );
}

inline void IDUIListCtrl_::SetItemHorSpace(long  nHorSpace  )
{

	raw_SetItemHorSpace(nHorSpace  );
}

inline void IDUIListCtrl_::SetItemVerSpace(long  nVerSpace  )
{

	raw_SetItemVerSpace(nVerSpace  );
}

inline void IDUIListCtrl_::SetBorderRect(struct SkinRect  rcBorder  )
{

	raw_SetBorderRect(rcBorder  );
}

inline void IDUIListCtrl_::RemoveItemByIndex(long  nIndex, BOOL  bDel  )
{
	VARIANT_BOOL xxx_bDel = bDel ? VARIANT_TRUE : VARIANT_FALSE;

	raw_RemoveItemByIndex(nIndex, xxx_bDel  );
}

inline void IDUIListCtrl_::InsertItemByItem(struct IDUILCItem * pItem, long  nIndex  )
{

	raw_InsertItemByItem(pItem, nIndex  );
}

inline void IDUIListCtrl_::RemoveItemByItem(struct IDUILCItem * pItem, BOOL  bDel  )
{
	VARIANT_BOOL xxx_bDel = bDel ? VARIANT_TRUE : VARIANT_FALSE;

	raw_RemoveItemByItem(pItem, xxx_bDel  );
}

inline BOOL  IDUIListCtrl_::EraseAllItem()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_EraseAllItem(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListCtrl_::DeleteAllItem()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteAllItem(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListCtrl_::SetMaxCount(long  nMax  )
{

	raw_SetMaxCount(nMax  );
}

inline long  IDUIListCtrl_::GetMaxCount()
{
	long  _result;
	raw_GetMaxCount(&_result);
	return _result;
}

inline void IDUIListCtrl_::SetListModel(struct IDUIControlBase * pUIForm  )
{

	raw_SetListModel(pUIForm  );
}

inline struct IDUILCItem * IDUIListCtrl_::GetFirstSelectedItem()
{
	struct IDUILCItem * _result;
	raw_GetFirstSelectedItem(&_result);
	return _result;
}

inline struct IDUILCItem * IDUIListCtrl_::GetNextSelectedItem(struct IDUILCItem * pItem  )
{
	struct IDUILCItem * _result;
	raw_GetNextSelectedItem(pItem, &_result);
	return _result;
}

inline long  IDUIListCtrl_::GetSelectedItemCount()
{
	long  _result;
	raw_GetSelectedItemCount(&_result);
	return _result;
}

inline long  IDUIListCtrl_::InsertItemByHBitmap(long  nIndex, tstring  szText, long  nID, OLE_HANDLE  hBitmap  )
{
_bstr_t xxx_szText(szText.c_str());
	long  _result;
	raw_InsertItemByHBitmap(nIndex, xxx_szText, nID, hBitmap, &_result);
	return _result;
}

inline long  IDUIListCtrl::InsertItem(long  nIndex, tstring  szText, long  nID, OLE_HANDLE  hIcon, OLE_HANDLE  hSmallIcon  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->InsertItem(nIndex, szText, nID, hIcon, hSmallIcon);
}

inline void  IDUIListCtrl::SetLStyle(enum LVCTRL_STYLE  nStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->SetLStyle(nStyle);
}

inline long  IDUIListCtrl::GetItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetItemCount();
}

inline struct IDUILCItem * IDUIListCtrl::GetAt(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetAt(nIndex);
}

inline void  IDUIListCtrl::SetHorScroll(BOOL  bHorScroll  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->SetHorScroll(bHorScroll);
}

inline long  IDUIListCtrl::GetPageCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetPageCount();
}

inline void  IDUIListCtrl::SetCurrentPage(long  nPage  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->SetCurrentPage(nPage);
}

inline long  IDUIListCtrl::GetCurrentPage()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetCurrentPage();
}

inline short  IDUIListCtrl::GetItemWidth()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetItemWidth();
}

inline short  IDUIListCtrl::GetItemHeight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetItemHeight();
}

inline short  IDUIListCtrl::GetItemHorSpace()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetItemHorSpace();
}

inline short  IDUIListCtrl::GetItemVerSpace()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetItemVerSpace();
}

inline struct SkinRect  IDUIListCtrl::GetBorderRect()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetBorderRect();
}

inline void  IDUIListCtrl::SetItemWidth(long  nItemWidth  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->SetItemWidth(nItemWidth);
}

inline void  IDUIListCtrl::SetItemHeight(long  nItemHeight  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->SetItemHeight(nItemHeight);
}

inline void  IDUIListCtrl::SetItemHorSpace(long  nHorSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->SetItemHorSpace(nHorSpace);
}

inline void  IDUIListCtrl::SetItemVerSpace(long  nVerSpace  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->SetItemVerSpace(nVerSpace);
}

inline void  IDUIListCtrl::SetBorderRect(struct SkinRect  rcBorder  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->SetBorderRect(rcBorder);
}

inline void  IDUIListCtrl::RemoveItemByIndex(long  nIndex, BOOL  bDel  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->RemoveItemByIndex(nIndex, bDel);
}

inline void  IDUIListCtrl::InsertItemByItem(struct IDUILCItem * pItem, long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->InsertItemByItem(pItem, nIndex);
}

inline void  IDUIListCtrl::RemoveItemByItem(struct IDUILCItem * pItem, BOOL  bDel  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->RemoveItemByItem(pItem, bDel);
}

inline BOOL  IDUIListCtrl::EraseAllItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->EraseAllItem();
}

inline BOOL  IDUIListCtrl::DeleteAllItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->DeleteAllItem();
}

inline void  IDUIListCtrl::SetMaxCount(long  nMax  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->SetMaxCount(nMax);
}

inline long  IDUIListCtrl::GetMaxCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetMaxCount();
}

inline void  IDUIListCtrl::SetListModel(struct IDUIControlBase * pUIForm  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->SetListModel(pUIForm);
}

inline struct IDUILCItem * IDUIListCtrl::GetFirstSelectedItem()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetFirstSelectedItem();
}

inline struct IDUILCItem * IDUIListCtrl::GetNextSelectedItem(struct IDUILCItem * pItem  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetNextSelectedItem(pItem);
}

inline long  IDUIListCtrl::GetSelectedItemCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->GetSelectedItemCount();
}

inline long  IDUIListCtrl::InsertItemByHBitmap(long  nIndex, tstring  szText, long  nID, OLE_HANDLE  hBitmap  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIListCtrl_*)m_pCtrl)->InsertItemByHBitmap(nIndex, szText, nID, hBitmap);
}

inline void IDUILCItem::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUILCItem::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUILCItem::SetHICON(OLE_HANDLE  hIcon, enum LC_ICONSTYLE  nStyle  )
{

	raw_SetHICON(hIcon, nStyle  );
}

inline struct SkinRect  IDUILCItem::GetDrawRect()
{
	struct SkinRect  _result;
	raw_GetDrawRect(&_result);
	return _result;
}

inline long  IDUILCItem::GetIndex()
{
	long  _result;
	raw_GetIndex(&_result);
	return _result;
}

inline void IDUILCItem::SetCanMerger(BOOL  bDragChangePos  )
{
	VARIANT_BOOL xxx_bDragChangePos = bDragChangePos ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCanMerger(xxx_bDragChangePos  );
}

inline OLE_HANDLE  IDUILCItem::GetHICON()
{
	OLE_HANDLE  _result;
	raw_GetHICON(&_result);
	return _result;
}

inline OLE_HANDLE  IDUILCItem::GetChildCount()
{
	OLE_HANDLE  _result;
	raw_GetChildCount(&_result);
	return _result;
}

inline void IDUILCItem::SetFile(BOOL  bFile  )
{
	VARIANT_BOOL xxx_bFile = bFile ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetFile(xxx_bFile  );
}

inline BOOL  IDUILCItem::IsFile()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsFile(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUILCItem::SetData(OLE_HANDLE  hData  )
{

	raw_SetData(hData  );
}

inline OLE_HANDLE  IDUILCItem::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline struct IDUIControlBase * IDUILCItem::GetModel()
{
	struct IDUIControlBase * _result;
	raw_GetModel(&_result);
	return _result;
}

inline void IDUILCItem::SetGraphicRect(struct SkinRect  skinRc  )
{

	raw_SetGraphicRect(skinRc  );
}

inline struct SkinRect  IDUILCItem::GetGraphicRect()
{
	struct SkinRect  _result;
	raw_GetGraphicRect(&_result);
	return _result;
}

inline void IDUILCItem::SetModel(struct IDUIControlBase * pModel, BOOL  bClone  )
{
	VARIANT_BOOL xxx_bClone = bClone ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetModel(pModel, xxx_bClone  );
}

inline BOOL  IDUILCItem::RemoveModel()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveModel(&_result);
	return _result ? TRUE : FALSE;
}

inline struct SkinRect  IDUILCItem::GetTextRect()
{
	struct SkinRect  _result;
	raw_GetTextRect(&_result);
	return _result;
}

inline void IDUILCItem::SetHBitmap(OLE_HANDLE  hBitmap  )
{

	raw_SetHBitmap(hBitmap  );
}

inline void IDUID3DContent_::SetButtonImages(tstring  nextImageName, tstring  prevImageName, tstring  deleteImageName, tstring  rotateImageName  )
{
	_bstr_t xxx_nextImageName(nextImageName.c_str());
	_bstr_t xxx_prevImageName(prevImageName.c_str());
	_bstr_t xxx_deleteImageName(deleteImageName.c_str());
	_bstr_t xxx_rotateImageName(rotateImageName.c_str());

	raw_SetButtonImages(xxx_nextImageName, xxx_prevImageName, xxx_deleteImageName, xxx_rotateImageName  );
}

inline void IDUID3DContent_::SetImageNameArray(tstring  imageArray  )
{
	_bstr_t xxx_imageArray(imageArray.c_str());

	raw_SetImageNameArray(xxx_imageArray  );
}

inline void IDUID3DContent_::DoLayout(struct DUI_PhotoGalleryLayout  strustlayout  )
{

	raw_DoLayout(strustlayout  );
}

inline void IDUID3DContent_::DestoryImages()
{

	raw_DestoryImages();
}

inline void  IDUID3DContent::SetButtonImages(tstring  nextImageName, tstring  prevImageName, tstring  deleteImageName, tstring  rotateImageName  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUID3DContent_*)m_pCtrl)->SetButtonImages(nextImageName, prevImageName, deleteImageName, rotateImageName);
}

inline void  IDUID3DContent::SetImageNameArray(tstring  imageArray  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUID3DContent_*)m_pCtrl)->SetImageNameArray(imageArray);
}

inline void  IDUID3DContent::DoLayout(struct DUI_PhotoGalleryLayout  strustlayout  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUID3DContent_*)m_pCtrl)->DoLayout(strustlayout);
}

inline void  IDUID3DContent::DestoryImages()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUID3DContent_*)m_pCtrl)->DestoryImages();
}

inline long  IDUIRichEdit_::SetSel(long  nStartPos, long  nEndPos  )
{
	long  _result;
	raw_SetSel(nStartPos, nEndPos, &_result);
	return _result;
}

inline void IDUIRichEdit_::GetSel(long * pStartPos, long * pEndPos  )
{

	raw_GetSel(pStartPos, pEndPos  );
}

inline void IDUIRichEdit_::ReplaceSel(tstring  strNewText, BOOL  bCanUndo  )
{
	_bstr_t xxx_strNewText(strNewText.c_str());
	VARIANT_BOOL xxx_bCanUndo = bCanUndo ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ReplaceSel(xxx_strNewText, xxx_bCanUndo  );
}

inline void IDUIRichEdit_::SetSelAll()
{

	raw_SetSelAll();
}

inline void IDUIRichEdit_::SetSelNone()
{

	raw_SetSelNone();
}

inline short  IDUIRichEdit_::GetSelType()
{
	short  _result;
	raw_GetSelType(&_result);
	return _result;
}

inline tstring  IDUIRichEdit_::GetSelText()
{
	BSTR _result = NULL;
	raw_GetSelText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUIRichEdit_::GetSelOleUserData(unsigned long * pdwData, unsigned long * pdwParam  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetSelOleUserData(pdwData, pdwParam, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIRichEdit_::SetSelCharFormat(OLE_HANDLE  pcf  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelCharFormat(pcf, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIRichEdit_::GetSelCharFormat(OLE_HANDLE * pcf  )
{
	long  _result;
	raw_GetSelCharFormat(pcf, &_result);
	return _result;
}

inline long  IDUIRichEdit_::GetDefaultCharFormat(OLE_HANDLE * pcf  )
{
	long  _result;
	raw_GetDefaultCharFormat(pcf, &_result);
	return _result;
}

inline BOOL  IDUIRichEdit_::SetParaFormat(OLE_HANDLE  ppf  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetParaFormat(ppf, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIRichEdit_::GetParaFormat(OLE_HANDLE * ppf  )
{
	long  _result;
	raw_GetParaFormat(ppf, &_result);
	return _result;
}

inline long  IDUIRichEdit_::InsertText(long  nInsertAfterChar, tstring  strText, BOOL  bCanUndo  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bCanUndo = bCanUndo ? VARIANT_TRUE : VARIANT_FALSE;
	long  _result;
	raw_InsertText(nInsertAfterChar, xxx_strText, xxx_bCanUndo, &_result);
	return _result;
}

inline long  IDUIRichEdit_::AppendText(tstring  strText, BOOL  bCanUndo  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bCanUndo = bCanUndo ? VARIANT_TRUE : VARIANT_FALSE;
	long  _result;
	raw_AppendText(xxx_strText, xxx_bCanUndo, &_result);
	return _result;
}

inline void IDUIRichEdit_::AppendNewLine()
{

	raw_AppendNewLine();
}

inline void IDUIRichEdit_::AppendNewPara(long  nStartIdent  )
{

	raw_AppendNewPara(nStartIdent  );
}

inline BOOL  IDUIRichEdit_::SetAutoDetectURL(BOOL  bAutoDetect  )
{
	VARIANT_BOOL xxx_bAutoDetect = bAutoDetect ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetAutoDetectURL(xxx_bAutoDetect, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIRichEdit_::IsAutoDetectURL()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoDetectURL(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::HideSelection(BOOL  bHide, BOOL  bPerm  )
{
	VARIANT_BOOL xxx_bHide = bHide ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bPerm = bPerm ? VARIANT_TRUE : VARIANT_FALSE;

	raw_HideSelection(xxx_bHide, xxx_bPerm  );
}

inline void IDUIRichEdit_::ScrollCaret()
{

	raw_ScrollCaret();
}

inline long  IDUIRichEdit_::GetTextLength(long  nFlags  )
{
	long  _result;
	raw_GetTextLength(nFlags, &_result);
	return _result;
}

inline long  IDUIRichEdit_::GetLineCount()
{
	long  _result;
	raw_GetLineCount(&_result);
	return _result;
}

inline tstring  IDUIRichEdit_::GetLineText(long  nIndex, long  nMaxLength  )
{
	BSTR _result = NULL;
	raw_GetLineText(nIndex, nMaxLength, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline long  IDUIRichEdit_::LineIndex(long  nLine  )
{
	long  _result;
	raw_LineIndex(nLine, &_result);
	return _result;
}

inline long  IDUIRichEdit_::LineLength(long  nLine  )
{
	long  _result;
	raw_LineLength(nLine, &_result);
	return _result;
}

inline long  IDUIRichEdit_::LineScroll(long  nLines  )
{
	long  _result;
	raw_LineScroll(nLines, &_result);
	return _result;
}

inline long  IDUIRichEdit_::LineFromChar(long  nIndex  )
{
	long  _result;
	raw_LineFromChar(nIndex, &_result);
	return _result;
}

inline struct SkinPoint  IDUIRichEdit_::PosFromChar(long  nChar  )
{
	struct SkinPoint  _result;
	raw_PosFromChar(nChar, &_result);
	return _result;
}

inline long  IDUIRichEdit_::CharFromPos(struct SkinPoint  nChar  )
{
	long  _result;
	raw_CharFromPos(nChar, &_result);
	return _result;
}

inline long  IDUIRichEdit_::StreamIn(long  nFormat, OLE_HANDLE  es  )
{
	long  _result;
	raw_StreamIn(nFormat, es, &_result);
	return _result;
}

inline long  IDUIRichEdit_::StreamOut(long  nFormat, OLE_HANDLE  es  )
{
	long  _result;
	raw_StreamOut(nFormat, es, &_result);
	return _result;
}

inline void IDUIRichEdit_::EmptyUndoBuffer()
{

	raw_EmptyUndoBuffer();
}

inline long  IDUIRichEdit_::SetUndoLimit(long  nLimit  )
{
	long  _result;
	raw_SetUndoLimit(nLimit, &_result);
	return _result;
}

inline void IDUIRichEdit_::LineUp()
{

	raw_LineUp();
}

inline void IDUIRichEdit_::LineDown()
{

	raw_LineDown();
}

inline void IDUIRichEdit_::PageUp()
{

	raw_PageUp();
}

inline void IDUIRichEdit_::PageDown()
{

	raw_PageDown();
}

inline void IDUIRichEdit_::HomeUp()
{

	raw_HomeUp();
}

inline void IDUIRichEdit_::EndDown()
{

	raw_EndDown();
}

inline void IDUIRichEdit_::LineLeft()
{

	raw_LineLeft();
}

inline void IDUIRichEdit_::LineRight()
{

	raw_LineRight();
}

inline void IDUIRichEdit_::PageLeft()
{

	raw_PageLeft();
}

inline void IDUIRichEdit_::PageRight()
{

	raw_PageRight();
}

inline void IDUIRichEdit_::HomeLeft()
{

	raw_HomeLeft();
}

inline void IDUIRichEdit_::EndRight()
{

	raw_EndRight();
}

inline void IDUIRichEdit_::SetScrollPos(struct SkinSize  szPos  )
{

	raw_SetScrollPos(szPos  );
}

inline BOOL  IDUIRichEdit_::Redo()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_Redo(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIRichEdit_::Undo()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_Undo(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::Clear()
{

	raw_Clear();
}

inline void IDUIRichEdit_::Copy()
{

	raw_Copy();
}

inline void IDUIRichEdit_::Cut()
{

	raw_Cut();
}

inline void IDUIRichEdit_::Paste()
{

	raw_Paste();
}

inline void IDUIRichEdit_::SetRich(BOOL  bRich  )
{
	VARIANT_BOOL xxx_bRich = bRich ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetRich(xxx_bRich  );
}

inline BOOL  IDUIRichEdit_::IsRich()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsRich(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetWantTab(BOOL  bWantTab  )
{
	VARIANT_BOOL xxx_bWantTab = bWantTab ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetWantTab(xxx_bWantTab  );
}

inline BOOL  IDUIRichEdit_::IsWantTab()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsWantTab(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetWantReturn(BOOL  bWantReturn  )
{
	VARIANT_BOOL xxx_bWantReturn = bWantReturn ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetWantReturn(xxx_bWantReturn  );
}

inline BOOL  IDUIRichEdit_::IsWantReturn()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsWantReturn(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetWantCtrlReturn(BOOL  bWantCtrlReturn  )
{
	VARIANT_BOOL xxx_bWantCtrlReturn = bWantCtrlReturn ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetWantCtrlReturn(xxx_bWantCtrlReturn  );
}

inline BOOL  IDUIRichEdit_::IsWantCtrlReturn()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsWantCtrlReturn(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetMultiLine(BOOL  bMultiLine  )
{
	VARIANT_BOOL xxx_bMultiLine = bMultiLine ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetMultiLine(xxx_bMultiLine  );
}

inline BOOL  IDUIRichEdit_::IsMultiLine()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsMultiLine(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetReadOnly(BOOL  bReadOnly  )
{
	VARIANT_BOOL xxx_bReadOnly = bReadOnly ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetReadOnly(xxx_bReadOnly  );
}

inline BOOL  IDUIRichEdit_::IsReadOnly()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsReadOnly(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetPassword(BOOL  bPassword  )
{
	VARIANT_BOOL xxx_bPassword = bPassword ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetPassword(xxx_bPassword  );
}

inline BOOL  IDUIRichEdit_::IsPassword()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsPassword(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetUseScrollBar(BOOL  bUseScrollBar  )
{
	VARIANT_BOOL xxx_bUseScrollBar = bUseScrollBar ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseScrollBar(xxx_bUseScrollBar  );
}

inline BOOL  IDUIRichEdit_::IsUseScrollBar()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsUseScrollBar(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetAutoVScroll(BOOL  bAutoVScroll  )
{
	VARIANT_BOOL xxx_bAutoVScroll = bAutoVScroll ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoVScroll(xxx_bAutoVScroll  );
}

inline BOOL  IDUIRichEdit_::IsAutoVScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoVScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetAutoHScroll(BOOL  bAutoHScroll  )
{
	VARIANT_BOOL xxx_bAutoHScroll = bAutoHScroll ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoHScroll(xxx_bAutoHScroll  );
}

inline BOOL  IDUIRichEdit_::IsAutoHScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoHScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetWordWrap(BOOL  bWordWrap  )
{
	VARIANT_BOOL xxx_bWordWrap = bWordWrap ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetWordWrap(xxx_bWordWrap  );
}

inline BOOL  IDUIRichEdit_::IsWordWrap()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsWordWrap(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetAutoWordSel(BOOL  bAutoWordSel  )
{
	VARIANT_BOOL xxx_bAutoWordSel = bAutoWordSel ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoWordSel(xxx_bAutoWordSel  );
}

inline BOOL  IDUIRichEdit_::IsAutoWordSel()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoWordSel(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetAllowBeep(BOOL  bAllowBeep  )
{
	VARIANT_BOOL xxx_bAllowBeep = bAllowBeep ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAllowBeep(xxx_bAllowBeep  );
}

inline BOOL  IDUIRichEdit_::IsAllowBeep()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAllowBeep(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetSaveSelection(BOOL  bSaveSelection  )
{
	VARIANT_BOOL xxx_bSaveSelection = bSaveSelection ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSaveSelection(xxx_bSaveSelection  );
}

inline BOOL  IDUIRichEdit_::IsSaveSelection()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsSaveSelection(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetLimitText(long  nChars  )
{

	raw_SetLimitText(nChars  );
}

inline long  IDUIRichEdit_::GetLimitText()
{
	long  _result;
	raw_GetLimitText(&_result);
	return _result;
}

inline void IDUIRichEdit_::SetAccelPos(long  nAccelPos  )
{

	raw_SetAccelPos(nAccelPos  );
}

inline long  IDUIRichEdit_::GetAccelPos()
{
	long  _result;
	raw_GetAccelPos(&_result);
	return _result;
}

inline void IDUIRichEdit_::SetEditFocus()
{

	raw_SetEditFocus();
}

inline void IDUIRichEdit_::KillEditFocus()
{

	raw_KillEditFocus();
}

inline BOOL  IDUIRichEdit_::SetRichEditOleCallback(OLE_HANDLE  pRichEditOleCallback  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRichEditOleCallback(pRichEditOleCallback, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::EnableSysMenu(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableSysMenu(xxx_bEnable  );
}

inline BOOL  IDUIRichEdit_::IsEnableSysMenu()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsEnableSysMenu(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRichEdit_::SetTextStyle(struct IDUITextStyle * pTextStyle  )
{

	raw_SetTextStyle(pTextStyle  );
}

inline long  IDUIRichEdit::SetSel(long  nStartPos, long  nEndPos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetSel(nStartPos, nEndPos);
}

inline void  IDUIRichEdit::GetSel(long * pStartPos, long * pEndPos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetSel(pStartPos, pEndPos);
}

inline void  IDUIRichEdit::ReplaceSel(tstring  strNewText, BOOL  bCanUndo  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->ReplaceSel(strNewText, bCanUndo);
}

inline void  IDUIRichEdit::SetSelAll()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetSelAll();
}

inline void  IDUIRichEdit::SetSelNone()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetSelNone();
}

inline short  IDUIRichEdit::GetSelType()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetSelType();
}

inline tstring  IDUIRichEdit::GetSelText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetSelText();
}

inline BOOL  IDUIRichEdit::GetSelOleUserData(unsigned long * pdwData, unsigned long * pdwParam  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetSelOleUserData(pdwData, pdwParam);
}

inline BOOL  IDUIRichEdit::SetSelCharFormat(OLE_HANDLE  pcf  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetSelCharFormat(pcf);
}

inline long  IDUIRichEdit::GetSelCharFormat(OLE_HANDLE * pcf  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetSelCharFormat(pcf);
}

inline long  IDUIRichEdit::GetDefaultCharFormat(OLE_HANDLE * pcf  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetDefaultCharFormat(pcf);
}

inline BOOL  IDUIRichEdit::SetParaFormat(OLE_HANDLE  ppf  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetParaFormat(ppf);
}

inline long  IDUIRichEdit::GetParaFormat(OLE_HANDLE * ppf  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetParaFormat(ppf);
}

inline long  IDUIRichEdit::InsertText(long  nInsertAfterChar, tstring  strText, BOOL  bCanUndo  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->InsertText(nInsertAfterChar, strText, bCanUndo);
}

inline long  IDUIRichEdit::AppendText(tstring  strText, BOOL  bCanUndo  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->AppendText(strText, bCanUndo);
}

inline void  IDUIRichEdit::AppendNewLine()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->AppendNewLine();
}

inline void  IDUIRichEdit::AppendNewPara(long  nStartIdent  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->AppendNewPara(nStartIdent);
}

inline BOOL  IDUIRichEdit::SetAutoDetectURL(BOOL  bAutoDetect  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetAutoDetectURL(bAutoDetect);
}

inline BOOL  IDUIRichEdit::IsAutoDetectURL()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsAutoDetectURL();
}

inline void  IDUIRichEdit::HideSelection(BOOL  bHide, BOOL  bPerm  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->HideSelection(bHide, bPerm);
}

inline void  IDUIRichEdit::ScrollCaret()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->ScrollCaret();
}

inline long  IDUIRichEdit::GetTextLength(long  nFlags  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetTextLength(nFlags);
}

inline long  IDUIRichEdit::GetLineCount()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetLineCount();
}

inline tstring  IDUIRichEdit::GetLineText(long  nIndex, long  nMaxLength  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetLineText(nIndex, nMaxLength);
}

inline long  IDUIRichEdit::LineIndex(long  nLine  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->LineIndex(nLine);
}

inline long  IDUIRichEdit::LineLength(long  nLine  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->LineLength(nLine);
}

inline long  IDUIRichEdit::LineScroll(long  nLines  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->LineScroll(nLines);
}

inline long  IDUIRichEdit::LineFromChar(long  nIndex  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->LineFromChar(nIndex);
}

inline struct SkinPoint  IDUIRichEdit::PosFromChar(long  nChar  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->PosFromChar(nChar);
}

inline long  IDUIRichEdit::CharFromPos(struct SkinPoint  nChar  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->CharFromPos(nChar);
}

inline long  IDUIRichEdit::StreamIn(long  nFormat, OLE_HANDLE  es  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->StreamIn(nFormat, es);
}

inline long  IDUIRichEdit::StreamOut(long  nFormat, OLE_HANDLE  es  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->StreamOut(nFormat, es);
}

inline void  IDUIRichEdit::EmptyUndoBuffer()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->EmptyUndoBuffer();
}

inline long  IDUIRichEdit::SetUndoLimit(long  nLimit  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetUndoLimit(nLimit);
}

inline void  IDUIRichEdit::LineUp()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->LineUp();
}

inline void  IDUIRichEdit::LineDown()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->LineDown();
}

inline void  IDUIRichEdit::PageUp()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->PageUp();
}

inline void  IDUIRichEdit::PageDown()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->PageDown();
}

inline void  IDUIRichEdit::HomeUp()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->HomeUp();
}

inline void  IDUIRichEdit::EndDown()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->EndDown();
}

inline void  IDUIRichEdit::LineLeft()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->LineLeft();
}

inline void  IDUIRichEdit::LineRight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->LineRight();
}

inline void  IDUIRichEdit::PageLeft()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->PageLeft();
}

inline void  IDUIRichEdit::PageRight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->PageRight();
}

inline void  IDUIRichEdit::HomeLeft()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->HomeLeft();
}

inline void  IDUIRichEdit::EndRight()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->EndRight();
}

inline void  IDUIRichEdit::SetScrollPos(struct SkinSize  szPos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetScrollPos(szPos);
}

inline BOOL  IDUIRichEdit::Redo()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->Redo();
}

inline BOOL  IDUIRichEdit::Undo()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->Undo();
}

inline void  IDUIRichEdit::Clear()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->Clear();
}

inline void  IDUIRichEdit::Copy()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->Copy();
}

inline void  IDUIRichEdit::Cut()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->Cut();
}

inline void  IDUIRichEdit::Paste()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->Paste();
}

inline void  IDUIRichEdit::SetRich(BOOL  bRich  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetRich(bRich);
}

inline BOOL  IDUIRichEdit::IsRich()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsRich();
}

inline void  IDUIRichEdit::SetWantTab(BOOL  bWantTab  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetWantTab(bWantTab);
}

inline BOOL  IDUIRichEdit::IsWantTab()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsWantTab();
}

inline void  IDUIRichEdit::SetWantReturn(BOOL  bWantReturn  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetWantReturn(bWantReturn);
}

inline BOOL  IDUIRichEdit::IsWantReturn()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsWantReturn();
}

inline void  IDUIRichEdit::SetWantCtrlReturn(BOOL  bWantCtrlReturn  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetWantCtrlReturn(bWantCtrlReturn);
}

inline BOOL  IDUIRichEdit::IsWantCtrlReturn()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsWantCtrlReturn();
}

inline void  IDUIRichEdit::SetMultiLine(BOOL  bMultiLine  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetMultiLine(bMultiLine);
}

inline BOOL  IDUIRichEdit::IsMultiLine()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsMultiLine();
}

inline void  IDUIRichEdit::SetReadOnly(BOOL  bReadOnly  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetReadOnly(bReadOnly);
}

inline BOOL  IDUIRichEdit::IsReadOnly()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsReadOnly();
}

inline void  IDUIRichEdit::SetPassword(BOOL  bPassword  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetPassword(bPassword);
}

inline BOOL  IDUIRichEdit::IsPassword()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsPassword();
}

inline void  IDUIRichEdit::SetUseScrollBar(BOOL  bUseScrollBar  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetUseScrollBar(bUseScrollBar);
}

inline BOOL  IDUIRichEdit::IsUseScrollBar()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsUseScrollBar();
}

inline void  IDUIRichEdit::SetAutoVScroll(BOOL  bAutoVScroll  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetAutoVScroll(bAutoVScroll);
}

inline BOOL  IDUIRichEdit::IsAutoVScroll()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsAutoVScroll();
}

inline void  IDUIRichEdit::SetAutoHScroll(BOOL  bAutoHScroll  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetAutoHScroll(bAutoHScroll);
}

inline BOOL  IDUIRichEdit::IsAutoHScroll()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsAutoHScroll();
}

inline void  IDUIRichEdit::SetWordWrap(BOOL  bWordWrap  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetWordWrap(bWordWrap);
}

inline BOOL  IDUIRichEdit::IsWordWrap()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsWordWrap();
}

inline void  IDUIRichEdit::SetAutoWordSel(BOOL  bAutoWordSel  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetAutoWordSel(bAutoWordSel);
}

inline BOOL  IDUIRichEdit::IsAutoWordSel()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsAutoWordSel();
}

inline void  IDUIRichEdit::SetAllowBeep(BOOL  bAllowBeep  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetAllowBeep(bAllowBeep);
}

inline BOOL  IDUIRichEdit::IsAllowBeep()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsAllowBeep();
}

inline void  IDUIRichEdit::SetSaveSelection(BOOL  bSaveSelection  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetSaveSelection(bSaveSelection);
}

inline BOOL  IDUIRichEdit::IsSaveSelection()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsSaveSelection();
}

inline void  IDUIRichEdit::SetLimitText(long  nChars  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetLimitText(nChars);
}

inline long  IDUIRichEdit::GetLimitText()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetLimitText();
}

inline void  IDUIRichEdit::SetAccelPos(long  nAccelPos  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetAccelPos(nAccelPos);
}

inline long  IDUIRichEdit::GetAccelPos()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->GetAccelPos();
}

inline void  IDUIRichEdit::SetEditFocus()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetEditFocus();
}

inline void  IDUIRichEdit::KillEditFocus()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->KillEditFocus();
}

inline BOOL  IDUIRichEdit::SetRichEditOleCallback(OLE_HANDLE  pRichEditOleCallback  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetRichEditOleCallback(pRichEditOleCallback);
}

inline void  IDUIRichEdit::EnableSysMenu(BOOL  bEnable  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->EnableSysMenu(bEnable);
}

inline BOOL  IDUIRichEdit::IsEnableSysMenu()
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->IsEnableSysMenu();
}

inline void  IDUIRichEdit::SetTextStyle(struct IDUITextStyle * pTextStyle  )
{

	((IDUIControlBase_*)m_pCtrl)->SetDataBlock((OLE_HANDLE)m_pDataBlock);

	return ((IDUIRichEdit_*)m_pCtrl)->SetTextStyle(pTextStyle);
}

